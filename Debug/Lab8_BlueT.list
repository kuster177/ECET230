
Lab8_BlueT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005720  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080058a8  080058a8  000158a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005914  08005914  00015914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800591c  0800591c  0001591c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005920  08005920  00015920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000520  20000000  08005924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b38  20000520  08005e44  00020520  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001058  08005e44  00021058  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020520  2**0
                  CONTENTS, READONLY
 10 .debug_info   000347fb  00000000  00000000  00020550  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005aee  00000000  00000000  00054d4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0001542b  00000000  00000000  0005a839  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001a20  00000000  00000000  0006fc68  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001db0  00000000  00000000  00071688  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000e578  00000000  00000000  00073438  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000a284  00000000  00000000  000819b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0008bc34  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005298  00000000  00000000  0008bcb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000520 	.word	0x20000520
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005890 	.word	0x08005890

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000524 	.word	0x20000524
 80001c4:	08005890 	.word	0x08005890

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_d2f>:
 8000538:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800053c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000540:	bf24      	itt	cs
 8000542:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000546:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800054a:	d90d      	bls.n	8000568 <__aeabi_d2f+0x30>
 800054c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000550:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000554:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000558:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800055c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800056c:	d121      	bne.n	80005b2 <__aeabi_d2f+0x7a>
 800056e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000572:	bfbc      	itt	lt
 8000574:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000578:	4770      	bxlt	lr
 800057a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000582:	f1c2 0218 	rsb	r2, r2, #24
 8000586:	f1c2 0c20 	rsb	ip, r2, #32
 800058a:	fa10 f30c 	lsls.w	r3, r0, ip
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	bf18      	it	ne
 8000594:	f040 0001 	orrne.w	r0, r0, #1
 8000598:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800059c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005a4:	ea40 000c 	orr.w	r0, r0, ip
 80005a8:	fa23 f302 	lsr.w	r3, r3, r2
 80005ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005b0:	e7cc      	b.n	800054c <__aeabi_d2f+0x14>
 80005b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005b6:	d107      	bne.n	80005c8 <__aeabi_d2f+0x90>
 80005b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005bc:	bf1e      	ittt	ne
 80005be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005c6:	4770      	bxne	lr
 80005c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <__aeabi_uldivmod>:
 80005d8:	b953      	cbnz	r3, 80005f0 <__aeabi_uldivmod+0x18>
 80005da:	b94a      	cbnz	r2, 80005f0 <__aeabi_uldivmod+0x18>
 80005dc:	2900      	cmp	r1, #0
 80005de:	bf08      	it	eq
 80005e0:	2800      	cmpeq	r0, #0
 80005e2:	bf1c      	itt	ne
 80005e4:	f04f 31ff 	movne.w	r1, #4294967295
 80005e8:	f04f 30ff 	movne.w	r0, #4294967295
 80005ec:	f000 b97a 	b.w	80008e4 <__aeabi_idiv0>
 80005f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80005f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005f8:	f000 f806 	bl	8000608 <__udivmoddi4>
 80005fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000600:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000604:	b004      	add	sp, #16
 8000606:	4770      	bx	lr

08000608 <__udivmoddi4>:
 8000608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800060c:	468c      	mov	ip, r1
 800060e:	460d      	mov	r5, r1
 8000610:	4604      	mov	r4, r0
 8000612:	9e08      	ldr	r6, [sp, #32]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d151      	bne.n	80006bc <__udivmoddi4+0xb4>
 8000618:	428a      	cmp	r2, r1
 800061a:	4617      	mov	r7, r2
 800061c:	d96d      	bls.n	80006fa <__udivmoddi4+0xf2>
 800061e:	fab2 fe82 	clz	lr, r2
 8000622:	f1be 0f00 	cmp.w	lr, #0
 8000626:	d00b      	beq.n	8000640 <__udivmoddi4+0x38>
 8000628:	f1ce 0c20 	rsb	ip, lr, #32
 800062c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000630:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000634:	fa02 f70e 	lsl.w	r7, r2, lr
 8000638:	ea4c 0c05 	orr.w	ip, ip, r5
 800063c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000640:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000644:	0c25      	lsrs	r5, r4, #16
 8000646:	fbbc f8fa 	udiv	r8, ip, sl
 800064a:	fa1f f987 	uxth.w	r9, r7
 800064e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000652:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000656:	fb08 f309 	mul.w	r3, r8, r9
 800065a:	42ab      	cmp	r3, r5
 800065c:	d90a      	bls.n	8000674 <__udivmoddi4+0x6c>
 800065e:	19ed      	adds	r5, r5, r7
 8000660:	f108 32ff 	add.w	r2, r8, #4294967295
 8000664:	f080 8123 	bcs.w	80008ae <__udivmoddi4+0x2a6>
 8000668:	42ab      	cmp	r3, r5
 800066a:	f240 8120 	bls.w	80008ae <__udivmoddi4+0x2a6>
 800066e:	f1a8 0802 	sub.w	r8, r8, #2
 8000672:	443d      	add	r5, r7
 8000674:	1aed      	subs	r5, r5, r3
 8000676:	b2a4      	uxth	r4, r4
 8000678:	fbb5 f0fa 	udiv	r0, r5, sl
 800067c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000680:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000684:	fb00 f909 	mul.w	r9, r0, r9
 8000688:	45a1      	cmp	r9, r4
 800068a:	d909      	bls.n	80006a0 <__udivmoddi4+0x98>
 800068c:	19e4      	adds	r4, r4, r7
 800068e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000692:	f080 810a 	bcs.w	80008aa <__udivmoddi4+0x2a2>
 8000696:	45a1      	cmp	r9, r4
 8000698:	f240 8107 	bls.w	80008aa <__udivmoddi4+0x2a2>
 800069c:	3802      	subs	r0, #2
 800069e:	443c      	add	r4, r7
 80006a0:	eba4 0409 	sub.w	r4, r4, r9
 80006a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006a8:	2100      	movs	r1, #0
 80006aa:	2e00      	cmp	r6, #0
 80006ac:	d061      	beq.n	8000772 <__udivmoddi4+0x16a>
 80006ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80006b2:	2300      	movs	r3, #0
 80006b4:	6034      	str	r4, [r6, #0]
 80006b6:	6073      	str	r3, [r6, #4]
 80006b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006bc:	428b      	cmp	r3, r1
 80006be:	d907      	bls.n	80006d0 <__udivmoddi4+0xc8>
 80006c0:	2e00      	cmp	r6, #0
 80006c2:	d054      	beq.n	800076e <__udivmoddi4+0x166>
 80006c4:	2100      	movs	r1, #0
 80006c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80006ca:	4608      	mov	r0, r1
 80006cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006d0:	fab3 f183 	clz	r1, r3
 80006d4:	2900      	cmp	r1, #0
 80006d6:	f040 808e 	bne.w	80007f6 <__udivmoddi4+0x1ee>
 80006da:	42ab      	cmp	r3, r5
 80006dc:	d302      	bcc.n	80006e4 <__udivmoddi4+0xdc>
 80006de:	4282      	cmp	r2, r0
 80006e0:	f200 80fa 	bhi.w	80008d8 <__udivmoddi4+0x2d0>
 80006e4:	1a84      	subs	r4, r0, r2
 80006e6:	eb65 0503 	sbc.w	r5, r5, r3
 80006ea:	2001      	movs	r0, #1
 80006ec:	46ac      	mov	ip, r5
 80006ee:	2e00      	cmp	r6, #0
 80006f0:	d03f      	beq.n	8000772 <__udivmoddi4+0x16a>
 80006f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80006f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fa:	b912      	cbnz	r2, 8000702 <__udivmoddi4+0xfa>
 80006fc:	2701      	movs	r7, #1
 80006fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000702:	fab7 fe87 	clz	lr, r7
 8000706:	f1be 0f00 	cmp.w	lr, #0
 800070a:	d134      	bne.n	8000776 <__udivmoddi4+0x16e>
 800070c:	1beb      	subs	r3, r5, r7
 800070e:	0c3a      	lsrs	r2, r7, #16
 8000710:	fa1f fc87 	uxth.w	ip, r7
 8000714:	2101      	movs	r1, #1
 8000716:	fbb3 f8f2 	udiv	r8, r3, r2
 800071a:	0c25      	lsrs	r5, r4, #16
 800071c:	fb02 3318 	mls	r3, r2, r8, r3
 8000720:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000724:	fb0c f308 	mul.w	r3, ip, r8
 8000728:	42ab      	cmp	r3, r5
 800072a:	d907      	bls.n	800073c <__udivmoddi4+0x134>
 800072c:	19ed      	adds	r5, r5, r7
 800072e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000732:	d202      	bcs.n	800073a <__udivmoddi4+0x132>
 8000734:	42ab      	cmp	r3, r5
 8000736:	f200 80d1 	bhi.w	80008dc <__udivmoddi4+0x2d4>
 800073a:	4680      	mov	r8, r0
 800073c:	1aed      	subs	r5, r5, r3
 800073e:	b2a3      	uxth	r3, r4
 8000740:	fbb5 f0f2 	udiv	r0, r5, r2
 8000744:	fb02 5510 	mls	r5, r2, r0, r5
 8000748:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800074c:	fb0c fc00 	mul.w	ip, ip, r0
 8000750:	45a4      	cmp	ip, r4
 8000752:	d907      	bls.n	8000764 <__udivmoddi4+0x15c>
 8000754:	19e4      	adds	r4, r4, r7
 8000756:	f100 33ff 	add.w	r3, r0, #4294967295
 800075a:	d202      	bcs.n	8000762 <__udivmoddi4+0x15a>
 800075c:	45a4      	cmp	ip, r4
 800075e:	f200 80b8 	bhi.w	80008d2 <__udivmoddi4+0x2ca>
 8000762:	4618      	mov	r0, r3
 8000764:	eba4 040c 	sub.w	r4, r4, ip
 8000768:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800076c:	e79d      	b.n	80006aa <__udivmoddi4+0xa2>
 800076e:	4631      	mov	r1, r6
 8000770:	4630      	mov	r0, r6
 8000772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000776:	f1ce 0420 	rsb	r4, lr, #32
 800077a:	fa05 f30e 	lsl.w	r3, r5, lr
 800077e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000782:	fa20 f804 	lsr.w	r8, r0, r4
 8000786:	0c3a      	lsrs	r2, r7, #16
 8000788:	fa25 f404 	lsr.w	r4, r5, r4
 800078c:	ea48 0803 	orr.w	r8, r8, r3
 8000790:	fbb4 f1f2 	udiv	r1, r4, r2
 8000794:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000798:	fb02 4411 	mls	r4, r2, r1, r4
 800079c:	fa1f fc87 	uxth.w	ip, r7
 80007a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80007a4:	fb01 f30c 	mul.w	r3, r1, ip
 80007a8:	42ab      	cmp	r3, r5
 80007aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80007ae:	d909      	bls.n	80007c4 <__udivmoddi4+0x1bc>
 80007b0:	19ed      	adds	r5, r5, r7
 80007b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80007b6:	f080 808a 	bcs.w	80008ce <__udivmoddi4+0x2c6>
 80007ba:	42ab      	cmp	r3, r5
 80007bc:	f240 8087 	bls.w	80008ce <__udivmoddi4+0x2c6>
 80007c0:	3902      	subs	r1, #2
 80007c2:	443d      	add	r5, r7
 80007c4:	1aeb      	subs	r3, r5, r3
 80007c6:	fa1f f588 	uxth.w	r5, r8
 80007ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80007ce:	fb02 3310 	mls	r3, r2, r0, r3
 80007d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80007d6:	fb00 f30c 	mul.w	r3, r0, ip
 80007da:	42ab      	cmp	r3, r5
 80007dc:	d907      	bls.n	80007ee <__udivmoddi4+0x1e6>
 80007de:	19ed      	adds	r5, r5, r7
 80007e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80007e4:	d26f      	bcs.n	80008c6 <__udivmoddi4+0x2be>
 80007e6:	42ab      	cmp	r3, r5
 80007e8:	d96d      	bls.n	80008c6 <__udivmoddi4+0x2be>
 80007ea:	3802      	subs	r0, #2
 80007ec:	443d      	add	r5, r7
 80007ee:	1aeb      	subs	r3, r5, r3
 80007f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007f4:	e78f      	b.n	8000716 <__udivmoddi4+0x10e>
 80007f6:	f1c1 0720 	rsb	r7, r1, #32
 80007fa:	fa22 f807 	lsr.w	r8, r2, r7
 80007fe:	408b      	lsls	r3, r1
 8000800:	fa05 f401 	lsl.w	r4, r5, r1
 8000804:	ea48 0303 	orr.w	r3, r8, r3
 8000808:	fa20 fe07 	lsr.w	lr, r0, r7
 800080c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000810:	40fd      	lsrs	r5, r7
 8000812:	ea4e 0e04 	orr.w	lr, lr, r4
 8000816:	fbb5 f9fc 	udiv	r9, r5, ip
 800081a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800081e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000822:	fa1f f883 	uxth.w	r8, r3
 8000826:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800082a:	fb09 f408 	mul.w	r4, r9, r8
 800082e:	42ac      	cmp	r4, r5
 8000830:	fa02 f201 	lsl.w	r2, r2, r1
 8000834:	fa00 fa01 	lsl.w	sl, r0, r1
 8000838:	d908      	bls.n	800084c <__udivmoddi4+0x244>
 800083a:	18ed      	adds	r5, r5, r3
 800083c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000840:	d243      	bcs.n	80008ca <__udivmoddi4+0x2c2>
 8000842:	42ac      	cmp	r4, r5
 8000844:	d941      	bls.n	80008ca <__udivmoddi4+0x2c2>
 8000846:	f1a9 0902 	sub.w	r9, r9, #2
 800084a:	441d      	add	r5, r3
 800084c:	1b2d      	subs	r5, r5, r4
 800084e:	fa1f fe8e 	uxth.w	lr, lr
 8000852:	fbb5 f0fc 	udiv	r0, r5, ip
 8000856:	fb0c 5510 	mls	r5, ip, r0, r5
 800085a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800085e:	fb00 f808 	mul.w	r8, r0, r8
 8000862:	45a0      	cmp	r8, r4
 8000864:	d907      	bls.n	8000876 <__udivmoddi4+0x26e>
 8000866:	18e4      	adds	r4, r4, r3
 8000868:	f100 35ff 	add.w	r5, r0, #4294967295
 800086c:	d229      	bcs.n	80008c2 <__udivmoddi4+0x2ba>
 800086e:	45a0      	cmp	r8, r4
 8000870:	d927      	bls.n	80008c2 <__udivmoddi4+0x2ba>
 8000872:	3802      	subs	r0, #2
 8000874:	441c      	add	r4, r3
 8000876:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800087a:	eba4 0408 	sub.w	r4, r4, r8
 800087e:	fba0 8902 	umull	r8, r9, r0, r2
 8000882:	454c      	cmp	r4, r9
 8000884:	46c6      	mov	lr, r8
 8000886:	464d      	mov	r5, r9
 8000888:	d315      	bcc.n	80008b6 <__udivmoddi4+0x2ae>
 800088a:	d012      	beq.n	80008b2 <__udivmoddi4+0x2aa>
 800088c:	b156      	cbz	r6, 80008a4 <__udivmoddi4+0x29c>
 800088e:	ebba 030e 	subs.w	r3, sl, lr
 8000892:	eb64 0405 	sbc.w	r4, r4, r5
 8000896:	fa04 f707 	lsl.w	r7, r4, r7
 800089a:	40cb      	lsrs	r3, r1
 800089c:	431f      	orrs	r7, r3
 800089e:	40cc      	lsrs	r4, r1
 80008a0:	6037      	str	r7, [r6, #0]
 80008a2:	6074      	str	r4, [r6, #4]
 80008a4:	2100      	movs	r1, #0
 80008a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008aa:	4618      	mov	r0, r3
 80008ac:	e6f8      	b.n	80006a0 <__udivmoddi4+0x98>
 80008ae:	4690      	mov	r8, r2
 80008b0:	e6e0      	b.n	8000674 <__udivmoddi4+0x6c>
 80008b2:	45c2      	cmp	sl, r8
 80008b4:	d2ea      	bcs.n	800088c <__udivmoddi4+0x284>
 80008b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80008ba:	eb69 0503 	sbc.w	r5, r9, r3
 80008be:	3801      	subs	r0, #1
 80008c0:	e7e4      	b.n	800088c <__udivmoddi4+0x284>
 80008c2:	4628      	mov	r0, r5
 80008c4:	e7d7      	b.n	8000876 <__udivmoddi4+0x26e>
 80008c6:	4640      	mov	r0, r8
 80008c8:	e791      	b.n	80007ee <__udivmoddi4+0x1e6>
 80008ca:	4681      	mov	r9, r0
 80008cc:	e7be      	b.n	800084c <__udivmoddi4+0x244>
 80008ce:	4601      	mov	r1, r0
 80008d0:	e778      	b.n	80007c4 <__udivmoddi4+0x1bc>
 80008d2:	3802      	subs	r0, #2
 80008d4:	443c      	add	r4, r7
 80008d6:	e745      	b.n	8000764 <__udivmoddi4+0x15c>
 80008d8:	4608      	mov	r0, r1
 80008da:	e708      	b.n	80006ee <__udivmoddi4+0xe6>
 80008dc:	f1a8 0802 	sub.w	r8, r8, #2
 80008e0:	443d      	add	r5, r7
 80008e2:	e72b      	b.n	800073c <__udivmoddi4+0x134>

080008e4 <__aeabi_idiv0>:
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop

080008e8 <BSP_LED_Init>:
int32_t BSP_LED_Init(Led_TypeDef Led)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* LED2 is on the same GPIO Port */
  LED2_GPIO_CLK_ENABLE();    
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <BSP_LED_Init+0x44>)
{
 80008ea:	b530      	push	{r4, r5, lr}
  LED2_GPIO_CLK_ENABLE();    
 80008ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  GPIO_InitStruct.Pin   = LED_PIN [Led];
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; 
  
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 80008ee:	4c10      	ldr	r4, [pc, #64]	; (8000930 <BSP_LED_Init+0x48>)
  LED2_GPIO_CLK_ENABLE();    
 80008f0:	f042 0202 	orr.w	r2, r2, #2
 80008f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80008f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 80008f8:	b087      	sub	sp, #28
  LED2_GPIO_CLK_ENABLE();    
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin   = LED_PIN [Led];
 8000904:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000908:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 800090a:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 800090c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; 
 800090e:	2302      	movs	r3, #2
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 8000910:	4620      	mov	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; 
 8000912:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin   = LED_PIN [Led];
 8000914:	9501      	str	r5, [sp, #4]
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 8000916:	f000 fa59 	bl	8000dcc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 800091a:	4620      	mov	r0, r4
 800091c:	2200      	movs	r2, #0
 800091e:	4629      	mov	r1, r5
 8000920:	f000 fbc0 	bl	80010a4 <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
}
 8000924:	2000      	movs	r0, #0
 8000926:	b007      	add	sp, #28
 8000928:	bd30      	pop	{r4, r5, pc}
 800092a:	bf00      	nop
 800092c:	40021000 	.word	0x40021000
 8000930:	48000400 	.word	0x48000400

08000934 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000934:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000936:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800093a:	4802      	ldr	r0, [pc, #8]	; (8000944 <BSP_LED_Toggle+0x10>)
 800093c:	f000 fbb7 	bl	80010ae <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
}
 8000940:	2000      	movs	r0, #0
 8000942:	bd08      	pop	{r3, pc}
 8000944:	48000400 	.word	0x48000400

08000948 <BSP_PB_Init>:
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};                                                
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};  											     
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  
  /* Enable the BUTTON clock*/ 
  USER_BUTTON_GPIO_CLK_ENABLE();
 8000948:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <BSP_PB_Init+0x80>)
{
 800094a:	b530      	push	{r4, r5, lr}
  USER_BUTTON_GPIO_CLK_ENABLE();
 800094c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800094e:	f042 0204 	orr.w	r2, r2, #4
 8000952:	64da      	str	r2, [r3, #76]	; 0x4c
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8000956:	b087      	sub	sp, #28
  USER_BUTTON_GPIO_CLK_ENABLE();
 8000958:	f003 0304 	and.w	r3, r3, #4
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000964:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000966:	2302      	movs	r3, #2
{
 8000968:	4605      	mov	r5, r0
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800096a:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800096c:	9304      	str	r3, [sp, #16]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 800096e:	460c      	mov	r4, r1
 8000970:	b931      	cbnz	r1, 8000980 <BSP_PB_Init+0x38>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000972:	9102      	str	r1, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000974:	4815      	ldr	r0, [pc, #84]	; (80009cc <BSP_PB_Init+0x84>)
 8000976:	a901      	add	r1, sp, #4
 8000978:	f000 fa28 	bl	8000dcc <HAL_GPIO_Init>
  int32_t ret = BSP_ERROR_NONE;
 800097c:	4620      	mov	r0, r4
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
	}
  }
  
  return ret;
 800097e:	e010      	b.n	80009a2 <BSP_PB_Init+0x5a>
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8000980:	4c13      	ldr	r4, [pc, #76]	; (80009d0 <BSP_PB_Init+0x88>)
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <BSP_PB_Init+0x8c>)
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000984:	4811      	ldr	r0, [pc, #68]	; (80009cc <BSP_PB_Init+0x84>)
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000986:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000988:	a901      	add	r1, sp, #4
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 800098a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800098e:	f000 fa1d 	bl	8000dcc <HAL_GPIO_Init>
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8000992:	4911      	ldr	r1, [pc, #68]	; (80009d8 <BSP_PB_Init+0x90>)
 8000994:	4620      	mov	r0, r4
 8000996:	f000 f9fb 	bl	8000d90 <HAL_EXTI_GetHandle>
 800099a:	4601      	mov	r1, r0
 800099c:	b118      	cbz	r0, 80009a6 <BSP_PB_Init+0x5e>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800099e:	f06f 0003 	mvn.w	r0, #3
}
 80009a2:	b007      	add	sp, #28
 80009a4:	bd30      	pop	{r4, r5, pc}
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 80009a6:	4620      	mov	r0, r4
 80009a8:	4a0c      	ldr	r2, [pc, #48]	; (80009dc <BSP_PB_Init+0x94>)
 80009aa:	f000 f9eb 	bl	8000d84 <HAL_EXTI_RegisterCallback>
 80009ae:	4604      	mov	r4, r0
 80009b0:	2800      	cmp	r0, #0
 80009b2:	d1f4      	bne.n	800099e <BSP_PB_Init+0x56>
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80009b4:	4602      	mov	r2, r0
 80009b6:	210f      	movs	r1, #15
 80009b8:	2028      	movs	r0, #40	; 0x28
 80009ba:	f000 f8eb 	bl	8000b94 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80009be:	2028      	movs	r0, #40	; 0x28
 80009c0:	f000 f91c 	bl	8000bfc <HAL_NVIC_EnableIRQ>
 80009c4:	e7da      	b.n	800097c <BSP_PB_Init+0x34>
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000
 80009cc:	48000800 	.word	0x48000800
 80009d0:	20000004 	.word	0x20000004
 80009d4:	10110000 	.word	0x10110000
 80009d8:	1600000d 	.word	0x1600000d
 80009dc:	080009f9 	.word	0x080009f9

080009e0 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80009e0:	b508      	push	{r3, lr}
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 80009e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e6:	4803      	ldr	r0, [pc, #12]	; (80009f4 <BSP_PB_GetState+0x14>)
 80009e8:	f000 fb56 	bl	8001098 <HAL_GPIO_ReadPin>
}
 80009ec:	fab0 f080 	clz	r0, r0
 80009f0:	0940      	lsrs	r0, r0, #5
 80009f2:	bd08      	pop	{r3, pc}
 80009f4:	48000800 	.word	0x48000800

080009f8 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{   
 80009f8:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_USER);
 80009fa:	2000      	movs	r0, #0
 80009fc:	f003 fac6 	bl	8003f8c <BSP_PB_Callback>
 8000a00:	bd08      	pop	{r3, pc}
	...

08000a04 <MX_USART1_UART_Init>:

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
  HAL_StatusTypeDef ret = HAL_OK;
  huart->Instance = USART1;
  huart->Init.BaudRate = 115200;
 8000a04:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <MX_USART1_UART_Init+0x2c>)
 8000a06:	f44f 3ce1 	mov.w	ip, #115200	; 0x1c200
{
 8000a0a:	b508      	push	{r3, lr}
  huart->Init.WordLength = UART_WORDLENGTH_8B;
  huart->Init.StopBits = UART_STOPBITS_1;
  huart->Init.Parity = UART_PARITY_NONE;
  huart->Init.Mode = UART_MODE_TX_RX;
 8000a0c:	210c      	movs	r1, #12
  huart->Init.BaudRate = 115200;
 8000a0e:	e880 1004 	stmia.w	r0, {r2, ip}
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8000a12:	2200      	movs	r2, #0
 8000a14:	6082      	str	r2, [r0, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8000a16:	60c2      	str	r2, [r0, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8000a18:	6102      	str	r2, [r0, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8000a1a:	6141      	str	r1, [r0, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1c:	6182      	str	r2, [r0, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1e:	61c2      	str	r2, [r0, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a20:	6202      	str	r2, [r0, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a22:	6242      	str	r2, [r0, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8000a24:	f002 f845 	bl	8002ab2 <HAL_UART_Init>
  {
    ret = HAL_ERROR;
  }

  return ret;
}
 8000a28:	3000      	adds	r0, #0
 8000a2a:	bf18      	it	ne
 8000a2c:	2001      	movne	r0, #1
 8000a2e:	bd08      	pop	{r3, pc}
 8000a30:	40013800 	.word	0x40013800

08000a34 <BSP_COM_Init>:
{
 8000a34:	b510      	push	{r4, lr}
  if(COM > COMn)
 8000a36:	2801      	cmp	r0, #1
{
 8000a38:	b088      	sub	sp, #32
  if(COM > COMn)
 8000a3a:	d831      	bhi.n	8000aa0 <BSP_COM_Init+0x6c>
     hcom_uart[COM].Instance = COM_USART[COM];
 8000a3c:	491a      	ldr	r1, [pc, #104]	; (8000aa8 <BSP_COM_Init+0x74>)
 8000a3e:	4a1b      	ldr	r2, [pc, #108]	; (8000aac <BSP_COM_Init+0x78>)
 8000a40:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8000a44:	01c3      	lsls	r3, r0, #7
 8000a46:	18d4      	adds	r4, r2, r3
 8000a48:	50d1      	str	r1, [r2, r3]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <BSP_COM_Init+0x7c>)
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4c:	4819      	ldr	r0, [pc, #100]	; (8000ab4 <BSP_COM_Init+0x80>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000a54:	661a      	str	r2, [r3, #96]	; 0x60
 8000a56:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a58:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000a5c:	9201      	str	r2, [sp, #4]
 8000a5e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a62:	f042 0202 	orr.w	r2, r2, #2
 8000a66:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	9302      	str	r3, [sp, #8]
 8000a70:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000a72:	23c0      	movs	r3, #192	; 0xc0
 8000a74:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a82:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a84:	2307      	movs	r3, #7
 8000a86:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a88:	f000 f9a0 	bl	8000dcc <HAL_GPIO_Init>
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	f7ff ffb9 	bl	8000a04 <MX_USART1_UART_Init>
 8000a92:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000a94:	bf0c      	ite	eq
 8000a96:	2000      	moveq	r0, #0
 8000a98:	f06f 0003 	mvnne.w	r0, #3
}
 8000a9c:	b008      	add	sp, #32
 8000a9e:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8000aa0:	f06f 0001 	mvn.w	r0, #1
 8000aa4:	e7fa      	b.n	8000a9c <BSP_COM_Init+0x68>
 8000aa6:	bf00      	nop
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	200009c4 	.word	0x200009c4
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	48000400 	.word	0x48000400

08000ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <HAL_InitTick+0x40>)
{
 8000abc:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8000abe:	6818      	ldr	r0, [r3, #0]
 8000ac0:	b908      	cbnz	r0, 8000ac6 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ac6:	4a0d      	ldr	r2, [pc, #52]	; (8000afc <HAL_InitTick+0x44>)
 8000ac8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000acc:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ad0:	6810      	ldr	r0, [r2, #0]
 8000ad2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ad6:	f000 f89f 	bl	8000c18 <HAL_SYSTICK_Config>
 8000ada:	4604      	mov	r4, r0
 8000adc:	2800      	cmp	r0, #0
 8000ade:	d1f0      	bne.n	8000ac2 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae0:	2d0f      	cmp	r5, #15
 8000ae2:	d8ee      	bhi.n	8000ac2 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	4629      	mov	r1, r5
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	f000 f852 	bl	8000b94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <HAL_InitTick+0x48>)
 8000af2:	4620      	mov	r0, r4
 8000af4:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 8000af6:	bd38      	pop	{r3, r4, r5, pc}
 8000af8:	2000000c 	.word	0x2000000c
 8000afc:	20000018 	.word	0x20000018
 8000b00:	20000010 	.word	0x20000010

08000b04 <HAL_Init>:
{
 8000b04:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b06:	2003      	movs	r0, #3
 8000b08:	f000 f832 	bl	8000b70 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f7ff ffd3 	bl	8000ab8 <HAL_InitTick>
 8000b12:	4604      	mov	r4, r0
 8000b14:	b918      	cbnz	r0, 8000b1e <HAL_Init+0x1a>
    HAL_MspInit();
 8000b16:	f004 f8ff 	bl	8004d18 <HAL_MspInit>
}
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000b1e:	2401      	movs	r4, #1
 8000b20:	e7fb      	b.n	8000b1a <HAL_Init+0x16>
	...

08000b24 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b24:	4a03      	ldr	r2, [pc, #12]	; (8000b34 <HAL_IncTick+0x10>)
 8000b26:	4904      	ldr	r1, [pc, #16]	; (8000b38 <HAL_IncTick+0x14>)
 8000b28:	6813      	ldr	r3, [r2, #0]
 8000b2a:	6809      	ldr	r1, [r1, #0]
 8000b2c:	440b      	add	r3, r1
 8000b2e:	6013      	str	r3, [r2, #0]
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000a44 	.word	0x20000a44
 8000b38:	2000000c 	.word	0x2000000c

08000b3c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b3c:	4b01      	ldr	r3, [pc, #4]	; (8000b44 <HAL_GetTick+0x8>)
 8000b3e:	6818      	ldr	r0, [r3, #0]
}
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000a44 	.word	0x20000a44

08000b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b48:	b538      	push	{r3, r4, r5, lr}
 8000b4a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b4c:	f7ff fff6 	bl	8000b3c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b50:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000b52:	bf1c      	itt	ne
 8000b54:	4b05      	ldrne	r3, [pc, #20]	; (8000b6c <HAL_Delay+0x24>)
 8000b56:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000b58:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000b5a:	bf18      	it	ne
 8000b5c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b5e:	f7ff ffed 	bl	8000b3c <HAL_GetTick>
 8000b62:	1b40      	subs	r0, r0, r5
 8000b64:	4284      	cmp	r4, r0
 8000b66:	d8fa      	bhi.n	8000b5e <HAL_Delay+0x16>
  {
  }
}
 8000b68:	bd38      	pop	{r3, r4, r5, pc}
 8000b6a:	bf00      	nop
 8000b6c:	2000000c 	.word	0x2000000c

08000b70 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b70:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b72:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b74:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b78:	041b      	lsls	r3, r3, #16
 8000b7a:	0c1b      	lsrs	r3, r3, #16
 8000b7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b80:	0200      	lsls	r0, r0, #8
 8000b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b86:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000b8a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b8c:	60d3      	str	r3, [r2, #12]
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b94:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b96:	b530      	push	{r4, r5, lr}
 8000b98:	68dc      	ldr	r4, [r3, #12]
 8000b9a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b9e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba4:	2b04      	cmp	r3, #4
 8000ba6:	bf28      	it	cs
 8000ba8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000baa:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	f04f 0501 	mov.w	r5, #1
 8000bb0:	fa05 f303 	lsl.w	r3, r5, r3
 8000bb4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb8:	bf8c      	ite	hi
 8000bba:	3c03      	subhi	r4, #3
 8000bbc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbe:	4019      	ands	r1, r3
 8000bc0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc2:	fa05 f404 	lsl.w	r4, r5, r4
 8000bc6:	3c01      	subs	r4, #1
 8000bc8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000bca:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	ea42 0201 	orr.w	r2, r2, r1
 8000bd0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd4:	bfad      	iteet	ge
 8000bd6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bda:	f000 000f 	andlt.w	r0, r0, #15
 8000bde:	4b06      	ldrlt	r3, [pc, #24]	; (8000bf8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be4:	bfb5      	itete	lt
 8000be6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bea:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bec:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000bf0:	bd30      	pop	{r4, r5, pc}
 8000bf2:	bf00      	nop
 8000bf4:	e000ed00 	.word	0xe000ed00
 8000bf8:	e000ed14 	.word	0xe000ed14

08000bfc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000bfc:	2800      	cmp	r0, #0
 8000bfe:	db08      	blt.n	8000c12 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c00:	0942      	lsrs	r2, r0, #5
 8000c02:	2301      	movs	r3, #1
 8000c04:	f000 001f 	and.w	r0, r0, #31
 8000c08:	fa03 f000 	lsl.w	r0, r3, r0
 8000c0c:	4b01      	ldr	r3, [pc, #4]	; (8000c14 <HAL_NVIC_EnableIRQ+0x18>)
 8000c0e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000c12:	4770      	bx	lr
 8000c14:	e000e100 	.word	0xe000e100

08000c18 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c18:	3801      	subs	r0, #1
 8000c1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c1e:	d20a      	bcs.n	8000c36 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c22:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c24:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c26:	21f0      	movs	r1, #240	; 0xf0
 8000c28:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c2c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c30:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c36:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000e010 	.word	0xe000e010
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <DFSDM_GetChannelFromInstance>:
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8000c44:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <DFSDM_GetChannelFromInstance+0x54>)
 8000c46:	4298      	cmp	r0, r3
 8000c48:	d017      	beq.n	8000c7a <DFSDM_GetChannelFromInstance+0x36>
  {
    channel = 0;
  }
  else if (Instance == DFSDM1_Channel1)
 8000c4a:	3320      	adds	r3, #32
 8000c4c:	4298      	cmp	r0, r3
 8000c4e:	d016      	beq.n	8000c7e <DFSDM_GetChannelFromInstance+0x3a>
  {
    channel = 1;
  }
  else if (Instance == DFSDM1_Channel2)
 8000c50:	3320      	adds	r3, #32
 8000c52:	4298      	cmp	r0, r3
 8000c54:	d015      	beq.n	8000c82 <DFSDM_GetChannelFromInstance+0x3e>
  {
    channel = 2;
  }
  else if (Instance == DFSDM1_Channel3)
 8000c56:	3320      	adds	r3, #32
 8000c58:	4298      	cmp	r0, r3
 8000c5a:	d014      	beq.n	8000c86 <DFSDM_GetChannelFromInstance+0x42>
    channel = 3;
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8000c5c:	3320      	adds	r3, #32
 8000c5e:	4298      	cmp	r0, r3
 8000c60:	d013      	beq.n	8000c8a <DFSDM_GetChannelFromInstance+0x46>
  {
    channel = 4;
  }
  else if (Instance == DFSDM1_Channel5)
 8000c62:	3320      	adds	r3, #32
 8000c64:	4298      	cmp	r0, r3
 8000c66:	d012      	beq.n	8000c8e <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 5;
  }
  else if (Instance == DFSDM1_Channel6)
 8000c68:	3320      	adds	r3, #32
 8000c6a:	4298      	cmp	r0, r3
 8000c6c:	d011      	beq.n	8000c92 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 6;
  }
  else if (Instance == DFSDM1_Channel7)
  {
    channel = 7;
 8000c6e:	3320      	adds	r3, #32
 8000c70:	4298      	cmp	r0, r3
 8000c72:	bf0c      	ite	eq
 8000c74:	2007      	moveq	r0, #7
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bx	lr
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    channel = 0;
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	4770      	bx	lr
    channel = 1;
 8000c7e:	2001      	movs	r0, #1
 8000c80:	4770      	bx	lr
    channel = 2;
 8000c82:	2002      	movs	r0, #2
 8000c84:	4770      	bx	lr
    channel = 3;
 8000c86:	2003      	movs	r0, #3
 8000c88:	4770      	bx	lr
    channel = 4;
 8000c8a:	2004      	movs	r0, #4
 8000c8c:	4770      	bx	lr
    channel = 5;
 8000c8e:	2005      	movs	r0, #5
 8000c90:	4770      	bx	lr
    channel = 6;
 8000c92:	2006      	movs	r0, #6
  }

  return channel;
}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40016000 	.word	0x40016000

08000c9c <HAL_DFSDM_ChannelInit>:
{
 8000c9c:	b538      	push	{r3, r4, r5, lr}
  if (hdfsdm_channel == NULL)
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	2800      	cmp	r0, #0
 8000ca2:	d067      	beq.n	8000d74 <HAL_DFSDM_ChannelInit+0xd8>
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8000ca4:	6800      	ldr	r0, [r0, #0]
 8000ca6:	4d34      	ldr	r5, [pc, #208]	; (8000d78 <HAL_DFSDM_ChannelInit+0xdc>)
 8000ca8:	f7ff ffcc 	bl	8000c44 <DFSDM_GetChannelFromInstance>
 8000cac:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d15f      	bne.n	8000d74 <HAL_DFSDM_ChannelInit+0xd8>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f004 f847 	bl	8004d48 <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 8000cba:	4b30      	ldr	r3, [pc, #192]	; (8000d7c <HAL_DFSDM_ChannelInit+0xe0>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	3201      	adds	r2, #1
 8000cc0:	601a      	str	r2, [r3, #0]
  if (v_dfsdm1ChannelCounter == 1U)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d119      	bne.n	8000cfc <HAL_DFSDM_ChannelInit+0x60>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8000cc8:	4b2d      	ldr	r3, [pc, #180]	; (8000d80 <HAL_DFSDM_ChannelInit+0xe4>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8000cd0:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	68a1      	ldr	r1, [r4, #8]
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8000ce0:	601a      	str	r2, [r3, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8000ce2:	7922      	ldrb	r2, [r4, #4]
 8000ce4:	2a01      	cmp	r2, #1
 8000ce6:	d105      	bne.n	8000cf4 <HAL_DFSDM_ChannelInit+0x58>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8000ce8:	68e1      	ldr	r1, [r4, #12]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	3901      	subs	r1, #1
 8000cee:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cf2:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000cfa:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8000cfc:	6820      	ldr	r0, [r4, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000cfe:	6961      	ldr	r1, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8000d00:	6803      	ldr	r3, [r0, #0]
 8000d02:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 8000d06:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000d08:	6923      	ldr	r3, [r4, #16]
 8000d0a:	6802      	ldr	r2, [r0, #0]
 8000d0c:	430b      	orrs	r3, r1
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000d0e:	69a1      	ldr	r1, [r4, #24]
 8000d10:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000d12:	4313      	orrs	r3, r2
 8000d14:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000d16:	6803      	ldr	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000d18:	6a21      	ldr	r1, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000d1a:	f023 030f 	bic.w	r3, r3, #15
 8000d1e:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000d20:	69e3      	ldr	r3, [r4, #28]
 8000d22:	6802      	ldr	r2, [r0, #0]
 8000d24:	430b      	orrs	r3, r1
 8000d26:	4313      	orrs	r3, r2
 8000d28:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8000d2a:	6883      	ldr	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000d2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8000d2e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8000d30:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 8000d34:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000d36:	6883      	ldr	r3, [r0, #8]
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8000d38:	3a01      	subs	r2, #1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000d3a:	430b      	orrs	r3, r1
 8000d3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d40:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8000d42:	6843      	ldr	r3, [r0, #4]
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8000d44:	6b22      	ldr	r2, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000d4c:	6843      	ldr	r3, [r0, #4]
 8000d4e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000d58:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8000d5a:	6803      	ldr	r3, [r0, #0]
 8000d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d60:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8000d62:	2301      	movs	r3, #1
 8000d64:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8000d68:	f7ff ff6c 	bl	8000c44 <DFSDM_GetChannelFromInstance>
 8000d6c:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 8000d70:	2000      	movs	r0, #0
 8000d72:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000d74:	2001      	movs	r0, #1
}
 8000d76:	bd38      	pop	{r3, r4, r5, pc}
 8000d78:	2000053c 	.word	0x2000053c
 8000d7c:	2000055c 	.word	0x2000055c
 8000d80:	40016000 	.word	0x40016000

08000d84 <HAL_EXTI_RegisterCallback>:
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8000d84:	b911      	cbnz	r1, 8000d8c <HAL_EXTI_RegisterCallback+0x8>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8000d86:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d88:	4608      	mov	r0, r1
      break;
 8000d8a:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 8000d8c:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8000d8e:	4770      	bx	lr

08000d90 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8000d90:	b110      	cbz	r0, 8000d98 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8000d92:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8000d94:	2000      	movs	r0, #0
 8000d96:	4770      	bx	lr
    return HAL_ERROR;
 8000d98:	2001      	movs	r0, #1
  }
}
 8000d9a:	4770      	bx	lr

08000d9c <HAL_EXTI_IRQHandler>:
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8000d9c:	6803      	ldr	r3, [r0, #0]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f003 011f 	and.w	r1, r3, #31
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8000da4:	f3c3 4300 	ubfx	r3, r3, #16, #1
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8000da8:	408a      	lsls	r2, r1

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8000daa:	015b      	lsls	r3, r3, #5
 8000dac:	4906      	ldr	r1, [pc, #24]	; (8000dc8 <HAL_EXTI_IRQHandler+0x2c>)
{
 8000dae:	b410      	push	{r4}
  regval = (*regaddr & maskline);
 8000db0:	585c      	ldr	r4, [r3, r1]

  if (regval != 0x00u)
 8000db2:	4222      	tst	r2, r4
 8000db4:	d005      	beq.n	8000dc2 <HAL_EXTI_IRQHandler+0x26>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8000db6:	505a      	str	r2, [r3, r1]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8000db8:	6843      	ldr	r3, [r0, #4]
 8000dba:	b113      	cbz	r3, 8000dc2 <HAL_EXTI_IRQHandler+0x26>
    {
      hexti->PendingCallback();
    }
  }
}
 8000dbc:	f85d 4b04 	ldr.w	r4, [sp], #4
      hexti->PendingCallback();
 8000dc0:	4718      	bx	r3
}
 8000dc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	40010414 	.word	0x40010414

08000dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dd0:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd4:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000f80 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000dd8:	4c67      	ldr	r4, [pc, #412]	; (8000f78 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dda:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8000ddc:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dde:	9a01      	ldr	r2, [sp, #4]
 8000de0:	40da      	lsrs	r2, r3
 8000de2:	d102      	bne.n	8000dea <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8000de4:	b005      	add	sp, #20
 8000de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dea:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8000dec:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dee:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8000df0:	ea12 0e06 	ands.w	lr, r2, r6
 8000df4:	f000 80b1 	beq.w	8000f5a <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000df8:	684a      	ldr	r2, [r1, #4]
 8000dfa:	f022 0710 	bic.w	r7, r2, #16
 8000dfe:	2f02      	cmp	r7, #2
 8000e00:	d116      	bne.n	8000e30 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8000e02:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8000e06:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e0a:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000e0e:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e12:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000e16:	f04f 0c0f 	mov.w	ip, #15
 8000e1a:	fa0c fc0a 	lsl.w	ip, ip, sl
 8000e1e:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e22:	690d      	ldr	r5, [r1, #16]
 8000e24:	fa05 f50a 	lsl.w	r5, r5, sl
 8000e28:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8000e2c:	f8c9 5020 	str.w	r5, [r9, #32]
 8000e30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e34:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000e36:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e3a:	fa05 f50c 	lsl.w	r5, r5, ip
 8000e3e:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e40:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e44:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e48:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e4c:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e4e:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e52:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000e54:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e58:	d811      	bhi.n	8000e7e <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000e5a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e5c:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e60:	68cf      	ldr	r7, [r1, #12]
 8000e62:	fa07 f70c 	lsl.w	r7, r7, ip
 8000e66:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8000e6a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000e6c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e6e:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e72:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8000e76:	409f      	lsls	r7, r3
 8000e78:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8000e7c:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e7e:	f1ba 0f03 	cmp.w	sl, #3
 8000e82:	d107      	bne.n	8000e94 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8000e84:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e86:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000e8a:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8000e8e:	409f      	lsls	r7, r3
 8000e90:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8000e92:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8000e94:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e96:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e98:	688e      	ldr	r6, [r1, #8]
 8000e9a:	fa06 f60c 	lsl.w	r6, r6, ip
 8000e9e:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8000ea0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ea2:	00d5      	lsls	r5, r2, #3
 8000ea4:	d559      	bpl.n	8000f5a <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000eaa:	f045 0501 	orr.w	r5, r5, #1
 8000eae:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8000eb2:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000eb6:	f023 0603 	bic.w	r6, r3, #3
 8000eba:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000ebe:	f005 0501 	and.w	r5, r5, #1
 8000ec2:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000ec6:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ec8:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ecc:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000ece:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ed0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000ed4:	270f      	movs	r7, #15
 8000ed6:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000eda:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ede:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ee2:	d03c      	beq.n	8000f5e <HAL_GPIO_Init+0x192>
 8000ee4:	4d25      	ldr	r5, [pc, #148]	; (8000f7c <HAL_GPIO_Init+0x1b0>)
 8000ee6:	42a8      	cmp	r0, r5
 8000ee8:	d03b      	beq.n	8000f62 <HAL_GPIO_Init+0x196>
 8000eea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000eee:	42a8      	cmp	r0, r5
 8000ef0:	d039      	beq.n	8000f66 <HAL_GPIO_Init+0x19a>
 8000ef2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ef6:	42a8      	cmp	r0, r5
 8000ef8:	d037      	beq.n	8000f6a <HAL_GPIO_Init+0x19e>
 8000efa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000efe:	42a8      	cmp	r0, r5
 8000f00:	d035      	beq.n	8000f6e <HAL_GPIO_Init+0x1a2>
 8000f02:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f06:	42a8      	cmp	r0, r5
 8000f08:	d033      	beq.n	8000f72 <HAL_GPIO_Init+0x1a6>
 8000f0a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f0e:	42a8      	cmp	r0, r5
 8000f10:	bf14      	ite	ne
 8000f12:	2507      	movne	r5, #7
 8000f14:	2506      	moveq	r5, #6
 8000f16:	fa05 f50c 	lsl.w	r5, r5, ip
 8000f1a:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f1c:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8000f1e:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8000f20:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f24:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8000f26:	bf54      	ite	pl
 8000f28:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000f2a:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8000f2e:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8000f30:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f32:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8000f34:	bf54      	ite	pl
 8000f36:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000f38:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8000f3c:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8000f3e:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f40:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8000f42:	bf54      	ite	pl
 8000f44:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000f46:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8000f4a:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8000f4c:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f4e:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8000f50:	bf54      	ite	pl
 8000f52:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000f54:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8000f58:	60e5      	str	r5, [r4, #12]
    position++;
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	e73f      	b.n	8000dde <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f5e:	2500      	movs	r5, #0
 8000f60:	e7d9      	b.n	8000f16 <HAL_GPIO_Init+0x14a>
 8000f62:	2501      	movs	r5, #1
 8000f64:	e7d7      	b.n	8000f16 <HAL_GPIO_Init+0x14a>
 8000f66:	2502      	movs	r5, #2
 8000f68:	e7d5      	b.n	8000f16 <HAL_GPIO_Init+0x14a>
 8000f6a:	2503      	movs	r5, #3
 8000f6c:	e7d3      	b.n	8000f16 <HAL_GPIO_Init+0x14a>
 8000f6e:	2504      	movs	r5, #4
 8000f70:	e7d1      	b.n	8000f16 <HAL_GPIO_Init+0x14a>
 8000f72:	2505      	movs	r5, #5
 8000f74:	e7cf      	b.n	8000f16 <HAL_GPIO_Init+0x14a>
 8000f76:	bf00      	nop
 8000f78:	40010400 	.word	0x40010400
 8000f7c:	48000400 	.word	0x48000400
 8000f80:	40021000 	.word	0x40021000

08000f84 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8000f88:	4c40      	ldr	r4, [pc, #256]	; (800108c <HAL_GPIO_DeInit+0x108>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000f8a:	f8df b108 	ldr.w	fp, [pc, #264]	; 8001094 <HAL_GPIO_DeInit+0x110>
  uint32_t position = 0x00u;
 8000f8e:	2300      	movs	r3, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000f90:	f04f 0a01 	mov.w	sl, #1
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000f94:	f04f 080f 	mov.w	r8, #15
  while ((GPIO_Pin >> position) != 0x00u)
 8000f98:	fa31 f203 	lsrs.w	r2, r1, r3
 8000f9c:	d101      	bne.n	8000fa2 <HAL_GPIO_DeInit+0x1e>
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
  }
}
 8000f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000fa2:	fa0a f503 	lsl.w	r5, sl, r3
    if (iocurrent != 0x00u)
 8000fa6:	ea11 0605 	ands.w	r6, r1, r5
 8000faa:	d060      	beq.n	800106e <HAL_GPIO_DeInit+0xea>
 8000fac:	f023 0703 	bic.w	r7, r3, #3
 8000fb0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000fb4:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000fb8:	f003 0e03 	and.w	lr, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 8000fbc:	68ba      	ldr	r2, [r7, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000fbe:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000fc2:	fa08 f90e 	lsl.w	r9, r8, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000fc6:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000fca:	ea02 0c09 	and.w	ip, r2, r9
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000fce:	d050      	beq.n	8001072 <HAL_GPIO_DeInit+0xee>
 8000fd0:	4a2f      	ldr	r2, [pc, #188]	; (8001090 <HAL_GPIO_DeInit+0x10c>)
 8000fd2:	4290      	cmp	r0, r2
 8000fd4:	d04f      	beq.n	8001076 <HAL_GPIO_DeInit+0xf2>
 8000fd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fda:	4290      	cmp	r0, r2
 8000fdc:	d04d      	beq.n	800107a <HAL_GPIO_DeInit+0xf6>
 8000fde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fe2:	4290      	cmp	r0, r2
 8000fe4:	d04b      	beq.n	800107e <HAL_GPIO_DeInit+0xfa>
 8000fe6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fea:	4290      	cmp	r0, r2
 8000fec:	d049      	beq.n	8001082 <HAL_GPIO_DeInit+0xfe>
 8000fee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ff2:	4290      	cmp	r0, r2
 8000ff4:	d047      	beq.n	8001086 <HAL_GPIO_DeInit+0x102>
 8000ff6:	4558      	cmp	r0, fp
 8000ff8:	bf0c      	ite	eq
 8000ffa:	2206      	moveq	r2, #6
 8000ffc:	2207      	movne	r2, #7
 8000ffe:	fa02 f20e 	lsl.w	r2, r2, lr
 8001002:	4594      	cmp	ip, r2
 8001004:	d110      	bne.n	8001028 <HAL_GPIO_DeInit+0xa4>
        EXTI->IMR1 &= ~(iocurrent);
 8001006:	6822      	ldr	r2, [r4, #0]
 8001008:	43f6      	mvns	r6, r6
 800100a:	4032      	ands	r2, r6
 800100c:	6022      	str	r2, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800100e:	6862      	ldr	r2, [r4, #4]
 8001010:	4032      	ands	r2, r6
 8001012:	6062      	str	r2, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8001014:	68a2      	ldr	r2, [r4, #8]
 8001016:	4032      	ands	r2, r6
 8001018:	60a2      	str	r2, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800101a:	68e2      	ldr	r2, [r4, #12]
 800101c:	4016      	ands	r6, r2
 800101e:	60e6      	str	r6, [r4, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001020:	68ba      	ldr	r2, [r7, #8]
 8001022:	ea22 0209 	bic.w	r2, r2, r9
 8001026:	60ba      	str	r2, [r7, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001028:	6806      	ldr	r6, [r0, #0]
 800102a:	2703      	movs	r7, #3
 800102c:	005a      	lsls	r2, r3, #1
 800102e:	fa07 f202 	lsl.w	r2, r7, r2
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001032:	fa23 f707 	lsr.w	r7, r3, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001036:	4316      	orrs	r6, r2
 8001038:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800103c:	6006      	str	r6, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800103e:	f003 0607 	and.w	r6, r3, #7
 8001042:	f8d7 e020 	ldr.w	lr, [r7, #32]
 8001046:	00b6      	lsls	r6, r6, #2
 8001048:	fa08 f606 	lsl.w	r6, r8, r6
 800104c:	ea2e 0606 	bic.w	r6, lr, r6
 8001050:	623e      	str	r6, [r7, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001052:	6886      	ldr	r6, [r0, #8]
 8001054:	43d2      	mvns	r2, r2
 8001056:	4016      	ands	r6, r2
 8001058:	6086      	str	r6, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800105a:	6846      	ldr	r6, [r0, #4]
 800105c:	43ed      	mvns	r5, r5
 800105e:	402e      	ands	r6, r5
 8001060:	6046      	str	r6, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001062:	68c6      	ldr	r6, [r0, #12]
 8001064:	4032      	ands	r2, r6
 8001066:	60c2      	str	r2, [r0, #12]
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8001068:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800106a:	4015      	ands	r5, r2
 800106c:	62c5      	str	r5, [r0, #44]	; 0x2c
    position++;
 800106e:	3301      	adds	r3, #1
 8001070:	e792      	b.n	8000f98 <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001072:	2200      	movs	r2, #0
 8001074:	e7c3      	b.n	8000ffe <HAL_GPIO_DeInit+0x7a>
 8001076:	2201      	movs	r2, #1
 8001078:	e7c1      	b.n	8000ffe <HAL_GPIO_DeInit+0x7a>
 800107a:	2202      	movs	r2, #2
 800107c:	e7bf      	b.n	8000ffe <HAL_GPIO_DeInit+0x7a>
 800107e:	2203      	movs	r2, #3
 8001080:	e7bd      	b.n	8000ffe <HAL_GPIO_DeInit+0x7a>
 8001082:	2204      	movs	r2, #4
 8001084:	e7bb      	b.n	8000ffe <HAL_GPIO_DeInit+0x7a>
 8001086:	2205      	movs	r2, #5
 8001088:	e7b9      	b.n	8000ffe <HAL_GPIO_DeInit+0x7a>
 800108a:	bf00      	nop
 800108c:	40010400 	.word	0x40010400
 8001090:	48000400 	.word	0x48000400
 8001094:	48001800 	.word	0x48001800

08001098 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001098:	6903      	ldr	r3, [r0, #16]
 800109a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800109c:	bf14      	ite	ne
 800109e:	2001      	movne	r0, #1
 80010a0:	2000      	moveq	r0, #0
 80010a2:	4770      	bx	lr

080010a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010a4:	b10a      	cbz	r2, 80010aa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010a6:	6181      	str	r1, [r0, #24]
 80010a8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010aa:	6281      	str	r1, [r0, #40]	; 0x28
 80010ac:	4770      	bx	lr

080010ae <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80010ae:	6943      	ldr	r3, [r0, #20]
 80010b0:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010b2:	bf14      	ite	ne
 80010b4:	6281      	strne	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010b6:	6181      	streq	r1, [r0, #24]
 80010b8:	4770      	bx	lr

080010ba <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010ba:	4770      	bx	lr

080010bc <HAL_GPIO_EXTI_IRQHandler>:
{
 80010bc:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80010be:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80010c0:	6959      	ldr	r1, [r3, #20]
 80010c2:	4201      	tst	r1, r0
 80010c4:	d002      	beq.n	80010cc <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010c6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010c8:	f7ff fff7 	bl	80010ba <HAL_GPIO_EXTI_Callback>
 80010cc:	bd08      	pop	{r3, pc}
 80010ce:	bf00      	nop
 80010d0:	40010400 	.word	0x40010400

080010d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010d4:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010d6:	4604      	mov	r4, r0
 80010d8:	2800      	cmp	r0, #0
 80010da:	d04a      	beq.n	8001172 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010dc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80010e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010e4:	b91b      	cbnz	r3, 80010ee <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010e6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010ea:	f003 fe5f 	bl	8004dac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010ee:	2324      	movs	r3, #36	; 0x24
 80010f0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010f4:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010f6:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	f022 0201 	bic.w	r2, r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001100:	6862      	ldr	r2, [r4, #4]
 8001102:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001106:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001108:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800110a:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800110c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001114:	d124      	bne.n	8001160 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001116:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800111a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800111c:	685a      	ldr	r2, [r3, #4]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800111e:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001120:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001124:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001128:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800112a:	68da      	ldr	r2, [r3, #12]
 800112c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001130:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001132:	6922      	ldr	r2, [r4, #16]
 8001134:	430a      	orrs	r2, r1
 8001136:	69a1      	ldr	r1, [r4, #24]
 8001138:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800113c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800113e:	6a21      	ldr	r1, [r4, #32]
 8001140:	69e2      	ldr	r2, [r4, #28]
 8001142:	430a      	orrs	r2, r1
 8001144:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	f042 0201 	orr.w	r2, r2, #1
 800114c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800114e:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001150:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001152:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001154:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001158:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800115a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 800115e:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001160:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001164:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001166:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001168:	bf04      	itt	eq
 800116a:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800116e:	605a      	streq	r2, [r3, #4]
 8001170:	e7d4      	b.n	800111c <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8001172:	2001      	movs	r0, #1
}
 8001174:	bd10      	pop	{r4, pc}

08001176 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001176:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	2a20      	cmp	r2, #32
{
 800117e:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001180:	d11d      	bne.n	80011be <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001182:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001186:	2b01      	cmp	r3, #1
 8001188:	d019      	beq.n	80011be <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800118a:	2324      	movs	r3, #36	; 0x24
 800118c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001190:	6803      	ldr	r3, [r0, #0]
 8001192:	681c      	ldr	r4, [r3, #0]
 8001194:	f024 0401 	bic.w	r4, r4, #1
 8001198:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800119a:	681c      	ldr	r4, [r3, #0]
 800119c:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80011a0:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80011a2:	681c      	ldr	r4, [r3, #0]
 80011a4:	4321      	orrs	r1, r4
 80011a6:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80011a8:	6819      	ldr	r1, [r3, #0]
 80011aa:	f041 0101 	orr.w	r1, r1, #1
 80011ae:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011b0:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80011b2:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80011b6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80011ba:	4618      	mov	r0, r3
 80011bc:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80011be:	2002      	movs	r0, #2
  }
}
 80011c0:	bd10      	pop	{r4, pc}

080011c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80011c2:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011c4:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80011c8:	b2e4      	uxtb	r4, r4
 80011ca:	2c20      	cmp	r4, #32
 80011cc:	d11c      	bne.n	8001208 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011ce:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d018      	beq.n	8001208 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80011d6:	2324      	movs	r3, #36	; 0x24
 80011d8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80011dc:	6803      	ldr	r3, [r0, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	f022 0201 	bic.w	r2, r2, #1
 80011e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80011e6:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80011e8:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80011ec:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80011f0:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	f042 0201 	orr.w	r2, r2, #1
 80011f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011fa:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80011fc:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001200:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001204:	4618      	mov	r0, r3
 8001206:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001208:	2002      	movs	r0, #2
  }
}
 800120a:	bd10      	pop	{r4, pc}

0800120c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800120c:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800120e:	4604      	mov	r4, r0
{
 8001210:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8001212:	b360      	cbz	r0, 800126e <HAL_PCD_Init+0x62>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001214:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8001218:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800121a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800121e:	b91b      	cbnz	r3, 8001228 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001220:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001224:	f003 fe62 	bl	8004eec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001228:	2303      	movs	r3, #3
 800122a:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800122e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001230:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001232:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8001236:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 800123a:	bf08      	it	eq
 800123c:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 800123e:	f001 fcb6 	bl	8002bae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001242:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001244:	466e      	mov	r6, sp
 8001246:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800124a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800124c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001250:	e886 0003 	stmia.w	r6, {r0, r1}
 8001254:	4625      	mov	r5, r4
 8001256:	1d27      	adds	r7, r4, #4
 8001258:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800125c:	f855 0b10 	ldr.w	r0, [r5], #16
 8001260:	f001 fc6e 	bl	8002b40 <USB_CoreInit>
 8001264:	4606      	mov	r6, r0
 8001266:	b120      	cbz	r0, 8001272 <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001268:	2302      	movs	r3, #2
 800126a:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 800126e:	2501      	movs	r5, #1
 8001270:	e056      	b.n	8001320 <HAL_PCD_Init+0x114>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001272:	4601      	mov	r1, r0
 8001274:	6820      	ldr	r0, [r4, #0]
 8001276:	f001 fca0 	bl	8002bba <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800127a:	4630      	mov	r0, r6
 800127c:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001280:	261c      	movs	r6, #28
 8001282:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001286:	4601      	mov	r1, r0
 8001288:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800128a:	4596      	cmp	lr, r2
 800128c:	f100 0001 	add.w	r0, r0, #1
 8001290:	d81c      	bhi.n	80012cc <HAL_PCD_Init+0xc0>
 8001292:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001294:	261c      	movs	r6, #28
 8001296:	4619      	mov	r1, r3
 8001298:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800129a:	4586      	cmp	lr, r0
 800129c:	f103 0301 	add.w	r3, r3, #1
 80012a0:	d822      	bhi.n	80012e8 <HAL_PCD_Init+0xdc>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a4:	466e      	mov	r6, sp
 80012a6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80012a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012aa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80012ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012b0:	e886 0003 	stmia.w	r6, {r0, r1}
 80012b4:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80012b8:	6820      	ldr	r0, [r4, #0]
 80012ba:	f001 fcbf 	bl	8002c3c <USB_DevInit>
 80012be:	2301      	movs	r3, #1
 80012c0:	4605      	mov	r5, r0
 80012c2:	b300      	cbz	r0, 8001306 <HAL_PCD_Init+0xfa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012c4:	2202      	movs	r2, #2
 80012c6:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 80012ca:	e7d0      	b.n	800126e <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 80012cc:	fb06 4302 	mla	r3, r6, r2, r4
 80012d0:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 80012d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012d8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012dc:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 80012e0:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012e2:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 80012e4:	6519      	str	r1, [r3, #80]	; 0x50
 80012e6:	e7cf      	b.n	8001288 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 80012e8:	fb06 4200 	mla	r2, r6, r0, r4
 80012ec:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 80012f0:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012f4:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012f8:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012fc:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001300:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 8001304:	e7c8      	b.n	8001298 <HAL_PCD_Init+0x8c>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8001306:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800130a:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800130e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001310:	2b01      	cmp	r3, #1
 8001312:	d102      	bne.n	800131a <HAL_PCD_Init+0x10e>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001314:	4620      	mov	r0, r4
 8001316:	f000 f806 	bl	8001326 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800131a:	6820      	ldr	r0, [r4, #0]
 800131c:	f001 fd36 	bl	8002d8c <USB_DevDisconnect>

  return HAL_OK;
}
 8001320:	4628      	mov	r0, r5
 8001322:	b00b      	add	sp, #44	; 0x2c
 8001324:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001326 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001326:	6802      	ldr	r2, [r0, #0]
{
 8001328:	4603      	mov	r3, r0

  hpcd->lpm_active = 1U;
 800132a:	2101      	movs	r1, #1
 800132c:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001330:	2000      	movs	r0, #0
 8001332:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001336:	6993      	ldr	r3, [r2, #24]
 8001338:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800133c:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800133e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001344:	f043 0303 	orr.w	r3, r3, #3
 8001348:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 800134a:	4770      	bx	lr

0800134c <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800134c:	4a02      	ldr	r2, [pc, #8]	; (8001358 <HAL_PWR_EnableBkUpAccess+0xc>)
 800134e:	6813      	ldr	r3, [r2, #0]
 8001350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	4770      	bx	lr
 8001358:	40007000 	.word	0x40007000

0800135c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800135c:	4b02      	ldr	r3, [pc, #8]	; (8001368 <HAL_PWREx_GetVoltageRange+0xc>)
 800135e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001360:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40007000 	.word	0x40007000

0800136c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800136c:	4b17      	ldr	r3, [pc, #92]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800136e:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001370:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001374:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001378:	d11c      	bne.n	80013b4 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800137a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800137e:	d015      	beq.n	80013ac <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800138a:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800138c:	4a10      	ldr	r2, [pc, #64]	; (80013d0 <HAL_PWREx_ControlVoltageScaling+0x64>)
 800138e:	6811      	ldr	r1, [r2, #0]
 8001390:	2232      	movs	r2, #50	; 0x32
 8001392:	434a      	muls	r2, r1
 8001394:	490f      	ldr	r1, [pc, #60]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8001396:	fbb2 f2f1 	udiv	r2, r2, r1
 800139a:	4619      	mov	r1, r3
 800139c:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800139e:	6958      	ldr	r0, [r3, #20]
 80013a0:	0540      	lsls	r0, r0, #21
 80013a2:	d500      	bpl.n	80013a6 <HAL_PWREx_ControlVoltageScaling+0x3a>
 80013a4:	b922      	cbnz	r2, 80013b0 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013a6:	694b      	ldr	r3, [r1, #20]
 80013a8:	055b      	lsls	r3, r3, #21
 80013aa:	d40d      	bmi.n	80013c8 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013ac:	2000      	movs	r0, #0
 80013ae:	4770      	bx	lr
        wait_loop_index--;
 80013b0:	3a01      	subs	r2, #1
 80013b2:	e7f4      	b.n	800139e <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013b4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013b8:	bf1f      	itttt	ne
 80013ba:	681a      	ldrne	r2, [r3, #0]
 80013bc:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80013c0:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 80013c4:	601a      	strne	r2, [r3, #0]
 80013c6:	e7f1      	b.n	80013ac <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 80013c8:	2003      	movs	r0, #3
}
 80013ca:	4770      	bx	lr
 80013cc:	40007000 	.word	0x40007000
 80013d0:	20000018 	.word	0x20000018
 80013d4:	000f4240 	.word	0x000f4240

080013d8 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80013d8:	4a02      	ldr	r2, [pc, #8]	; (80013e4 <HAL_PWREx_EnableVddUSB+0xc>)
 80013da:	6853      	ldr	r3, [r2, #4]
 80013dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013e0:	6053      	str	r3, [r2, #4]
 80013e2:	4770      	bx	lr
 80013e4:	40007000 	.word	0x40007000

080013e8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80013e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013ec:	9d06      	ldr	r5, [sp, #24]
 80013ee:	4604      	mov	r4, r0
 80013f0:	460f      	mov	r7, r1
 80013f2:	4616      	mov	r6, r2
 80013f4:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80013f6:	6821      	ldr	r1, [r4, #0]
 80013f8:	688a      	ldr	r2, [r1, #8]
 80013fa:	423a      	tst	r2, r7
 80013fc:	bf14      	ite	ne
 80013fe:	2201      	movne	r2, #1
 8001400:	2200      	moveq	r2, #0
 8001402:	42b2      	cmp	r2, r6
 8001404:	d102      	bne.n	800140c <QSPI_WaitFlagStateUntilTimeout+0x24>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001406:	2000      	movs	r0, #0
}
 8001408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800140c:	1c6b      	adds	r3, r5, #1
 800140e:	d0f3      	beq.n	80013f8 <QSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001410:	f7ff fb94 	bl	8000b3c <HAL_GetTick>
 8001414:	eba0 0008 	sub.w	r0, r0, r8
 8001418:	4285      	cmp	r5, r0
 800141a:	d301      	bcc.n	8001420 <QSPI_WaitFlagStateUntilTimeout+0x38>
 800141c:	2d00      	cmp	r5, #0
 800141e:	d1ea      	bne.n	80013f6 <QSPI_WaitFlagStateUntilTimeout+0xe>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001420:	2304      	movs	r3, #4
 8001422:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001426:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800142e:	2001      	movs	r0, #1
 8001430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001434 <HAL_QSPI_Init>:
{
 8001434:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001436:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001438:	f7ff fb80 	bl	8000b3c <HAL_GetTick>
 800143c:	4605      	mov	r5, r0
  if(hqspi == NULL)
 800143e:	2c00      	cmp	r4, #0
 8001440:	d049      	beq.n	80014d6 <HAL_QSPI_Init+0xa2>
  __HAL_LOCK(hqspi);
 8001442:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001446:	2b01      	cmp	r3, #1
 8001448:	d047      	beq.n	80014da <HAL_QSPI_Init+0xa6>
 800144a:	2301      	movs	r3, #1
 800144c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001450:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001454:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8001458:	b93a      	cbnz	r2, 800146a <HAL_QSPI_Init+0x36>
    hqspi->Lock = HAL_UNLOCKED;
 800145a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_QSPI_MspInit(hqspi);
 800145e:	4620      	mov	r0, r4
 8001460:	f003 fcda 	bl	8004e18 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8001464:	f241 3388 	movw	r3, #5000	; 0x1388
 8001468:	6423      	str	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800146a:	6820      	ldr	r0, [r4, #0]
 800146c:	68a1      	ldr	r1, [r4, #8]
 800146e:	6802      	ldr	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001470:	6c23      	ldr	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001472:	3901      	subs	r1, #1
 8001474:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001478:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800147c:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800147e:	2120      	movs	r1, #32
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	2200      	movs	r2, #0
 8001484:	462b      	mov	r3, r5
 8001486:	4620      	mov	r0, r4
 8001488:	f7ff ffae 	bl	80013e8 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800148c:	b9f0      	cbnz	r0, 80014cc <HAL_QSPI_Init+0x98>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800148e:	6822      	ldr	r2, [r4, #0]
 8001490:	6865      	ldr	r5, [r4, #4]
 8001492:	6811      	ldr	r1, [r2, #0]
 8001494:	68e3      	ldr	r3, [r4, #12]
 8001496:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800149a:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800149e:	f021 0110 	bic.w	r1, r1, #16
 80014a2:	430b      	orrs	r3, r1
 80014a4:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80014a6:	69a1      	ldr	r1, [r4, #24]
 80014a8:	6963      	ldr	r3, [r4, #20]
 80014aa:	6855      	ldr	r5, [r2, #4]
 80014ac:	430b      	orrs	r3, r1
 80014ae:	6921      	ldr	r1, [r4, #16]
 80014b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80014b4:	490a      	ldr	r1, [pc, #40]	; (80014e0 <HAL_QSPI_Init+0xac>)
 80014b6:	4029      	ands	r1, r5
 80014b8:	430b      	orrs	r3, r1
 80014ba:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 80014bc:	6813      	ldr	r3, [r2, #0]
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 80014c4:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80014c6:	63e0      	str	r0, [r4, #60]	; 0x3c
    hqspi->State = HAL_QSPI_STATE_READY;
 80014c8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 80014cc:	2300      	movs	r3, #0
 80014ce:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 80014d2:	b003      	add	sp, #12
 80014d4:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80014d6:	2001      	movs	r0, #1
 80014d8:	e7fb      	b.n	80014d2 <HAL_QSPI_Init+0x9e>
  __HAL_LOCK(hqspi);
 80014da:	2002      	movs	r0, #2
 80014dc:	e7f9      	b.n	80014d2 <HAL_QSPI_Init+0x9e>
 80014de:	bf00      	nop
 80014e0:	ffe0f8fe 	.word	0xffe0f8fe

080014e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80014e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80014e6:	4d1e      	ldr	r5, [pc, #120]	; (8001560 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80014e8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80014ea:	00da      	lsls	r2, r3, #3
{
 80014ec:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80014ee:	d518      	bpl.n	8001522 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80014f0:	f7ff ff34 	bl	800135c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014f4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80014f8:	d123      	bne.n	8001542 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80014fa:	2c80      	cmp	r4, #128	; 0x80
 80014fc:	d929      	bls.n	8001552 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80014fe:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001500:	bf8c      	ite	hi
 8001502:	2002      	movhi	r0, #2
 8001504:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001506:	4a17      	ldr	r2, [pc, #92]	; (8001564 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001508:	6813      	ldr	r3, [r2, #0]
 800150a:	f023 0307 	bic.w	r3, r3, #7
 800150e:	4303      	orrs	r3, r0
 8001510:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001512:	6813      	ldr	r3, [r2, #0]
 8001514:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001518:	1a18      	subs	r0, r3, r0
 800151a:	bf18      	it	ne
 800151c:	2001      	movne	r0, #1
 800151e:	b003      	add	sp, #12
 8001520:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001528:	65ab      	str	r3, [r5, #88]	; 0x58
 800152a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800152c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001530:	9301      	str	r3, [sp, #4]
 8001532:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001534:	f7ff ff12 	bl	800135c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001538:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800153a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800153e:	65ab      	str	r3, [r5, #88]	; 0x58
 8001540:	e7d8      	b.n	80014f4 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8001542:	2c80      	cmp	r4, #128	; 0x80
 8001544:	d807      	bhi.n	8001556 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8001546:	d008      	beq.n	800155a <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001548:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 800154c:	4258      	negs	r0, r3
 800154e:	4158      	adcs	r0, r3
 8001550:	e7d9      	b.n	8001506 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001552:	2000      	movs	r0, #0
 8001554:	e7d7      	b.n	8001506 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001556:	2003      	movs	r0, #3
 8001558:	e7d5      	b.n	8001506 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 800155a:	2002      	movs	r0, #2
 800155c:	e7d3      	b.n	8001506 <RCC_SetFlashLatencyFromMSIRange+0x22>
 800155e:	bf00      	nop
 8001560:	40021000 	.word	0x40021000
 8001564:	40022000 	.word	0x40022000

08001568 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001568:	4b22      	ldr	r3, [pc, #136]	; (80015f4 <HAL_RCC_GetSysClockFreq+0x8c>)
 800156a:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800156c:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800156e:	f012 020c 	ands.w	r2, r2, #12
 8001572:	d005      	beq.n	8001580 <HAL_RCC_GetSysClockFreq+0x18>
 8001574:	2a0c      	cmp	r2, #12
 8001576:	d115      	bne.n	80015a4 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001578:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800157c:	2901      	cmp	r1, #1
 800157e:	d118      	bne.n	80015b2 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001580:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001582:	481d      	ldr	r0, [pc, #116]	; (80015f8 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001584:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001586:	bf55      	itete	pl
 8001588:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800158c:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800158e:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001592:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8001596:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800159a:	b34a      	cbz	r2, 80015f0 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800159c:	2a0c      	cmp	r2, #12
 800159e:	d009      	beq.n	80015b4 <HAL_RCC_GetSysClockFreq+0x4c>
 80015a0:	2000      	movs	r0, #0
  return sysclockfreq;
 80015a2:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80015a4:	2a04      	cmp	r2, #4
 80015a6:	d022      	beq.n	80015ee <HAL_RCC_GetSysClockFreq+0x86>
 80015a8:	2a08      	cmp	r2, #8
 80015aa:	4814      	ldr	r0, [pc, #80]	; (80015fc <HAL_RCC_GetSysClockFreq+0x94>)
 80015ac:	bf18      	it	ne
 80015ae:	2000      	movne	r0, #0
 80015b0:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80015b2:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80015b4:	68da      	ldr	r2, [r3, #12]
 80015b6:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 80015ba:	2a02      	cmp	r2, #2
 80015bc:	d015      	beq.n	80015ea <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 80015be:	490f      	ldr	r1, [pc, #60]	; (80015fc <HAL_RCC_GetSysClockFreq+0x94>)
 80015c0:	2a03      	cmp	r2, #3
 80015c2:	bf08      	it	eq
 80015c4:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015c6:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80015c8:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80015d0:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015d4:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80015d8:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80015da:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015dc:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80015de:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80015e0:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 80015e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80015e8:	4770      	bx	lr
      pllvco = HSI_VALUE;
 80015ea:	4805      	ldr	r0, [pc, #20]	; (8001600 <HAL_RCC_GetSysClockFreq+0x98>)
 80015ec:	e7eb      	b.n	80015c6 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 80015ee:	4804      	ldr	r0, [pc, #16]	; (8001600 <HAL_RCC_GetSysClockFreq+0x98>)
}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40021000 	.word	0x40021000
 80015f8:	080058e4 	.word	0x080058e4
 80015fc:	007a1200 	.word	0x007a1200
 8001600:	00f42400 	.word	0x00f42400

08001604 <HAL_RCC_OscConfig>:
{
 8001604:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001608:	4605      	mov	r5, r0
 800160a:	b908      	cbnz	r0, 8001610 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800160c:	2001      	movs	r0, #1
 800160e:	e047      	b.n	80016a0 <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001610:	4ca6      	ldr	r4, [pc, #664]	; (80018ac <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001612:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001614:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001616:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001618:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800161a:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800161e:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001622:	d573      	bpl.n	800170c <HAL_RCC_OscConfig+0x108>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001624:	b11e      	cbz	r6, 800162e <HAL_RCC_OscConfig+0x2a>
 8001626:	2e0c      	cmp	r6, #12
 8001628:	d152      	bne.n	80016d0 <HAL_RCC_OscConfig+0xcc>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800162a:	2f01      	cmp	r7, #1
 800162c:	d150      	bne.n	80016d0 <HAL_RCC_OscConfig+0xcc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800162e:	6823      	ldr	r3, [r4, #0]
 8001630:	0798      	lsls	r0, r3, #30
 8001632:	d502      	bpl.n	800163a <HAL_RCC_OscConfig+0x36>
 8001634:	69ab      	ldr	r3, [r5, #24]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0e8      	beq.n	800160c <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800163a:	6823      	ldr	r3, [r4, #0]
 800163c:	6a28      	ldr	r0, [r5, #32]
 800163e:	0719      	lsls	r1, r3, #28
 8001640:	bf56      	itet	pl
 8001642:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001646:	6823      	ldrmi	r3, [r4, #0]
 8001648:	091b      	lsrpl	r3, r3, #4
 800164a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800164e:	4283      	cmp	r3, r0
 8001650:	d229      	bcs.n	80016a6 <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001652:	f7ff ff47 	bl	80014e4 <RCC_SetFlashLatencyFromMSIRange>
 8001656:	2800      	cmp	r0, #0
 8001658:	d1d8      	bne.n	800160c <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800165a:	6823      	ldr	r3, [r4, #0]
 800165c:	f043 0308 	orr.w	r3, r3, #8
 8001660:	6023      	str	r3, [r4, #0]
 8001662:	6823      	ldr	r3, [r4, #0]
 8001664:	6a2a      	ldr	r2, [r5, #32]
 8001666:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800166a:	4313      	orrs	r3, r2
 800166c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800166e:	6863      	ldr	r3, [r4, #4]
 8001670:	69ea      	ldr	r2, [r5, #28]
 8001672:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001676:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800167a:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800167c:	f7ff ff74 	bl	8001568 <HAL_RCC_GetSysClockFreq>
 8001680:	68a3      	ldr	r3, [r4, #8]
 8001682:	4a8b      	ldr	r2, [pc, #556]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 8001684:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001688:	5cd3      	ldrb	r3, [r2, r3]
 800168a:	f003 031f 	and.w	r3, r3, #31
 800168e:	40d8      	lsrs	r0, r3
 8001690:	4b88      	ldr	r3, [pc, #544]	; (80018b4 <HAL_RCC_OscConfig+0x2b0>)
 8001692:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8001694:	4b88      	ldr	r3, [pc, #544]	; (80018b8 <HAL_RCC_OscConfig+0x2b4>)
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	f7ff fa0e 	bl	8000ab8 <HAL_InitTick>
        if(status != HAL_OK)
 800169c:	2800      	cmp	r0, #0
 800169e:	d035      	beq.n	800170c <HAL_RCC_OscConfig+0x108>
}
 80016a0:	b003      	add	sp, #12
 80016a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016a6:	6823      	ldr	r3, [r4, #0]
 80016a8:	f043 0308 	orr.w	r3, r3, #8
 80016ac:	6023      	str	r3, [r4, #0]
 80016ae:	6823      	ldr	r3, [r4, #0]
 80016b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016b4:	4303      	orrs	r3, r0
 80016b6:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016b8:	6863      	ldr	r3, [r4, #4]
 80016ba:	69ea      	ldr	r2, [r5, #28]
 80016bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80016c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016c4:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016c6:	f7ff ff0d 	bl	80014e4 <RCC_SetFlashLatencyFromMSIRange>
 80016ca:	2800      	cmp	r0, #0
 80016cc:	d0d6      	beq.n	800167c <HAL_RCC_OscConfig+0x78>
 80016ce:	e79d      	b.n	800160c <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016d0:	69ab      	ldr	r3, [r5, #24]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d036      	beq.n	8001744 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_MSI_ENABLE();
 80016d6:	6823      	ldr	r3, [r4, #0]
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80016de:	f7ff fa2d 	bl	8000b3c <HAL_GetTick>
 80016e2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016e4:	6823      	ldr	r3, [r4, #0]
 80016e6:	079a      	lsls	r2, r3, #30
 80016e8:	d524      	bpl.n	8001734 <HAL_RCC_OscConfig+0x130>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ea:	6823      	ldr	r3, [r4, #0]
 80016ec:	f043 0308 	orr.w	r3, r3, #8
 80016f0:	6023      	str	r3, [r4, #0]
 80016f2:	6823      	ldr	r3, [r4, #0]
 80016f4:	6a2a      	ldr	r2, [r5, #32]
 80016f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016fa:	4313      	orrs	r3, r2
 80016fc:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016fe:	6863      	ldr	r3, [r4, #4]
 8001700:	69ea      	ldr	r2, [r5, #28]
 8001702:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001706:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800170a:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800170c:	682b      	ldr	r3, [r5, #0]
 800170e:	07d8      	lsls	r0, r3, #31
 8001710:	d429      	bmi.n	8001766 <HAL_RCC_OscConfig+0x162>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001712:	682b      	ldr	r3, [r5, #0]
 8001714:	0799      	lsls	r1, r3, #30
 8001716:	d467      	bmi.n	80017e8 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001718:	682b      	ldr	r3, [r5, #0]
 800171a:	0718      	lsls	r0, r3, #28
 800171c:	f100 809c 	bmi.w	8001858 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001720:	682b      	ldr	r3, [r5, #0]
 8001722:	0759      	lsls	r1, r3, #29
 8001724:	f100 80ca 	bmi.w	80018bc <HAL_RCC_OscConfig+0x2b8>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001728:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800172a:	2800      	cmp	r0, #0
 800172c:	f040 8133 	bne.w	8001996 <HAL_RCC_OscConfig+0x392>
  return HAL_OK;
 8001730:	2000      	movs	r0, #0
 8001732:	e7b5      	b.n	80016a0 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001734:	f7ff fa02 	bl	8000b3c <HAL_GetTick>
 8001738:	eba0 0008 	sub.w	r0, r0, r8
 800173c:	2802      	cmp	r0, #2
 800173e:	d9d1      	bls.n	80016e4 <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
 8001740:	2003      	movs	r0, #3
 8001742:	e7ad      	b.n	80016a0 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 8001744:	6823      	ldr	r3, [r4, #0]
 8001746:	f023 0301 	bic.w	r3, r3, #1
 800174a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800174c:	f7ff f9f6 	bl	8000b3c <HAL_GetTick>
 8001750:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001752:	6823      	ldr	r3, [r4, #0]
 8001754:	079b      	lsls	r3, r3, #30
 8001756:	d5d9      	bpl.n	800170c <HAL_RCC_OscConfig+0x108>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001758:	f7ff f9f0 	bl	8000b3c <HAL_GetTick>
 800175c:	eba0 0008 	sub.w	r0, r0, r8
 8001760:	2802      	cmp	r0, #2
 8001762:	d9f6      	bls.n	8001752 <HAL_RCC_OscConfig+0x14e>
 8001764:	e7ec      	b.n	8001740 <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001766:	2e08      	cmp	r6, #8
 8001768:	d003      	beq.n	8001772 <HAL_RCC_OscConfig+0x16e>
 800176a:	2e0c      	cmp	r6, #12
 800176c:	d108      	bne.n	8001780 <HAL_RCC_OscConfig+0x17c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800176e:	2f03      	cmp	r7, #3
 8001770:	d106      	bne.n	8001780 <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001772:	6823      	ldr	r3, [r4, #0]
 8001774:	039a      	lsls	r2, r3, #14
 8001776:	d5cc      	bpl.n	8001712 <HAL_RCC_OscConfig+0x10e>
 8001778:	686b      	ldr	r3, [r5, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1c9      	bne.n	8001712 <HAL_RCC_OscConfig+0x10e>
 800177e:	e745      	b.n	800160c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001780:	686b      	ldr	r3, [r5, #4]
 8001782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001786:	d110      	bne.n	80017aa <HAL_RCC_OscConfig+0x1a6>
 8001788:	6823      	ldr	r3, [r4, #0]
 800178a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001790:	f7ff f9d4 	bl	8000b3c <HAL_GetTick>
 8001794:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001796:	6823      	ldr	r3, [r4, #0]
 8001798:	039b      	lsls	r3, r3, #14
 800179a:	d4ba      	bmi.n	8001712 <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800179c:	f7ff f9ce 	bl	8000b3c <HAL_GetTick>
 80017a0:	eba0 0008 	sub.w	r0, r0, r8
 80017a4:	2864      	cmp	r0, #100	; 0x64
 80017a6:	d9f6      	bls.n	8001796 <HAL_RCC_OscConfig+0x192>
 80017a8:	e7ca      	b.n	8001740 <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017ae:	d104      	bne.n	80017ba <HAL_RCC_OscConfig+0x1b6>
 80017b0:	6823      	ldr	r3, [r4, #0]
 80017b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b6:	6023      	str	r3, [r4, #0]
 80017b8:	e7e6      	b.n	8001788 <HAL_RCC_OscConfig+0x184>
 80017ba:	6822      	ldr	r2, [r4, #0]
 80017bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80017c0:	6022      	str	r2, [r4, #0]
 80017c2:	6822      	ldr	r2, [r4, #0]
 80017c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017c8:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1e0      	bne.n	8001790 <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 80017ce:	f7ff f9b5 	bl	8000b3c <HAL_GetTick>
 80017d2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017d4:	6823      	ldr	r3, [r4, #0]
 80017d6:	0398      	lsls	r0, r3, #14
 80017d8:	d59b      	bpl.n	8001712 <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017da:	f7ff f9af 	bl	8000b3c <HAL_GetTick>
 80017de:	eba0 0008 	sub.w	r0, r0, r8
 80017e2:	2864      	cmp	r0, #100	; 0x64
 80017e4:	d9f6      	bls.n	80017d4 <HAL_RCC_OscConfig+0x1d0>
 80017e6:	e7ab      	b.n	8001740 <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017e8:	2e04      	cmp	r6, #4
 80017ea:	d003      	beq.n	80017f4 <HAL_RCC_OscConfig+0x1f0>
 80017ec:	2e0c      	cmp	r6, #12
 80017ee:	d110      	bne.n	8001812 <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017f0:	2f02      	cmp	r7, #2
 80017f2:	d10e      	bne.n	8001812 <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017f4:	6823      	ldr	r3, [r4, #0]
 80017f6:	0559      	lsls	r1, r3, #21
 80017f8:	d503      	bpl.n	8001802 <HAL_RCC_OscConfig+0x1fe>
 80017fa:	68eb      	ldr	r3, [r5, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f43f af05 	beq.w	800160c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001802:	6863      	ldr	r3, [r4, #4]
 8001804:	692a      	ldr	r2, [r5, #16]
 8001806:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800180a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800180e:	6063      	str	r3, [r4, #4]
 8001810:	e782      	b.n	8001718 <HAL_RCC_OscConfig+0x114>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001812:	68eb      	ldr	r3, [r5, #12]
 8001814:	b17b      	cbz	r3, 8001836 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 8001816:	6823      	ldr	r3, [r4, #0]
 8001818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800181e:	f7ff f98d 	bl	8000b3c <HAL_GetTick>
 8001822:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001824:	6823      	ldr	r3, [r4, #0]
 8001826:	055a      	lsls	r2, r3, #21
 8001828:	d4eb      	bmi.n	8001802 <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800182a:	f7ff f987 	bl	8000b3c <HAL_GetTick>
 800182e:	1bc0      	subs	r0, r0, r7
 8001830:	2802      	cmp	r0, #2
 8001832:	d9f7      	bls.n	8001824 <HAL_RCC_OscConfig+0x220>
 8001834:	e784      	b.n	8001740 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_DISABLE();
 8001836:	6823      	ldr	r3, [r4, #0]
 8001838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800183c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800183e:	f7ff f97d 	bl	8000b3c <HAL_GetTick>
 8001842:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001844:	6823      	ldr	r3, [r4, #0]
 8001846:	055b      	lsls	r3, r3, #21
 8001848:	f57f af66 	bpl.w	8001718 <HAL_RCC_OscConfig+0x114>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800184c:	f7ff f976 	bl	8000b3c <HAL_GetTick>
 8001850:	1bc0      	subs	r0, r0, r7
 8001852:	2802      	cmp	r0, #2
 8001854:	d9f6      	bls.n	8001844 <HAL_RCC_OscConfig+0x240>
 8001856:	e773      	b.n	8001740 <HAL_RCC_OscConfig+0x13c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001858:	696b      	ldr	r3, [r5, #20]
 800185a:	b19b      	cbz	r3, 8001884 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 800185c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001868:	f7ff f968 	bl	8000b3c <HAL_GetTick>
 800186c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800186e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001872:	079a      	lsls	r2, r3, #30
 8001874:	f53f af54 	bmi.w	8001720 <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001878:	f7ff f960 	bl	8000b3c <HAL_GetTick>
 800187c:	1bc0      	subs	r0, r0, r7
 800187e:	2802      	cmp	r0, #2
 8001880:	d9f5      	bls.n	800186e <HAL_RCC_OscConfig+0x26a>
 8001882:	e75d      	b.n	8001740 <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_LSI_DISABLE();
 8001884:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001888:	f023 0301 	bic.w	r3, r3, #1
 800188c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001890:	f7ff f954 	bl	8000b3c <HAL_GetTick>
 8001894:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001896:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800189a:	079b      	lsls	r3, r3, #30
 800189c:	f57f af40 	bpl.w	8001720 <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a0:	f7ff f94c 	bl	8000b3c <HAL_GetTick>
 80018a4:	1bc0      	subs	r0, r0, r7
 80018a6:	2802      	cmp	r0, #2
 80018a8:	d9f5      	bls.n	8001896 <HAL_RCC_OscConfig+0x292>
 80018aa:	e749      	b.n	8001740 <HAL_RCC_OscConfig+0x13c>
 80018ac:	40021000 	.word	0x40021000
 80018b0:	080058c9 	.word	0x080058c9
 80018b4:	20000018 	.word	0x20000018
 80018b8:	20000010 	.word	0x20000010
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80018be:	00d8      	lsls	r0, r3, #3
 80018c0:	d429      	bmi.n	8001916 <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_PWR_CLK_ENABLE();
 80018c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80018c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80018ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80018cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d0:	9301      	str	r3, [sp, #4]
 80018d2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80018d4:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d8:	4f79      	ldr	r7, [pc, #484]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	05d9      	lsls	r1, r3, #23
 80018de:	d51d      	bpl.n	800191c <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e0:	68ab      	ldr	r3, [r5, #8]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d12b      	bne.n	800193e <HAL_RCC_OscConfig+0x33a>
 80018e6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80018f2:	f7ff f923 	bl	8000b3c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f6:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80018fa:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018fc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001900:	079b      	lsls	r3, r3, #30
 8001902:	d542      	bpl.n	800198a <HAL_RCC_OscConfig+0x386>
    if(pwrclkchanged == SET)
 8001904:	f1b8 0f00 	cmp.w	r8, #0
 8001908:	f43f af0e 	beq.w	8001728 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_PWR_CLK_DISABLE();
 800190c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800190e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001912:	65a3      	str	r3, [r4, #88]	; 0x58
 8001914:	e708      	b.n	8001728 <HAL_RCC_OscConfig+0x124>
    FlagStatus       pwrclkchanged = RESET;
 8001916:	f04f 0800 	mov.w	r8, #0
 800191a:	e7dd      	b.n	80018d8 <HAL_RCC_OscConfig+0x2d4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001922:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001924:	f7ff f90a 	bl	8000b3c <HAL_GetTick>
 8001928:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	05da      	lsls	r2, r3, #23
 800192e:	d4d7      	bmi.n	80018e0 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001930:	f7ff f904 	bl	8000b3c <HAL_GetTick>
 8001934:	eba0 0009 	sub.w	r0, r0, r9
 8001938:	2802      	cmp	r0, #2
 800193a:	d9f6      	bls.n	800192a <HAL_RCC_OscConfig+0x326>
 800193c:	e700      	b.n	8001740 <HAL_RCC_OscConfig+0x13c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800193e:	2b05      	cmp	r3, #5
 8001940:	d106      	bne.n	8001950 <HAL_RCC_OscConfig+0x34c>
 8001942:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001946:	f043 0304 	orr.w	r3, r3, #4
 800194a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800194e:	e7ca      	b.n	80018e6 <HAL_RCC_OscConfig+0x2e2>
 8001950:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001954:	f022 0201 	bic.w	r2, r2, #1
 8001958:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800195c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001960:	f022 0204 	bic.w	r2, r2, #4
 8001964:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1c2      	bne.n	80018f2 <HAL_RCC_OscConfig+0x2ee>
      tickstart = HAL_GetTick();
 800196c:	f7ff f8e6 	bl	8000b3c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001970:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001974:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001976:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800197a:	0798      	lsls	r0, r3, #30
 800197c:	d5c2      	bpl.n	8001904 <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800197e:	f7ff f8dd 	bl	8000b3c <HAL_GetTick>
 8001982:	1bc0      	subs	r0, r0, r7
 8001984:	4548      	cmp	r0, r9
 8001986:	d9f6      	bls.n	8001976 <HAL_RCC_OscConfig+0x372>
 8001988:	e6da      	b.n	8001740 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198a:	f7ff f8d7 	bl	8000b3c <HAL_GetTick>
 800198e:	1bc0      	subs	r0, r0, r7
 8001990:	4548      	cmp	r0, r9
 8001992:	d9b3      	bls.n	80018fc <HAL_RCC_OscConfig+0x2f8>
 8001994:	e6d4      	b.n	8001740 <HAL_RCC_OscConfig+0x13c>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001996:	2e0c      	cmp	r6, #12
 8001998:	d05c      	beq.n	8001a54 <HAL_RCC_OscConfig+0x450>
        __HAL_RCC_PLL_DISABLE();
 800199a:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800199c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800199e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019a2:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019a4:	d13b      	bne.n	8001a1e <HAL_RCC_OscConfig+0x41a>
        tickstart = HAL_GetTick();
 80019a6:	f7ff f8c9 	bl	8000b3c <HAL_GetTick>
 80019aa:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ac:	6823      	ldr	r3, [r4, #0]
 80019ae:	0199      	lsls	r1, r3, #6
 80019b0:	d42f      	bmi.n	8001a12 <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019b2:	68e2      	ldr	r2, [r4, #12]
 80019b4:	4b43      	ldr	r3, [pc, #268]	; (8001ac4 <HAL_RCC_OscConfig+0x4c0>)
 80019b6:	4013      	ands	r3, r2
 80019b8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80019ba:	4313      	orrs	r3, r2
 80019bc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80019be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80019c2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80019c4:	3a01      	subs	r2, #1
 80019c6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80019ca:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80019cc:	0912      	lsrs	r2, r2, #4
 80019ce:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80019d2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80019d4:	0852      	lsrs	r2, r2, #1
 80019d6:	3a01      	subs	r2, #1
 80019d8:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80019dc:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80019de:	0852      	lsrs	r2, r2, #1
 80019e0:	3a01      	subs	r2, #1
 80019e2:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80019e6:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ee:	6023      	str	r3, [r4, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019f0:	68e3      	ldr	r3, [r4, #12]
 80019f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019f6:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80019f8:	f7ff f8a0 	bl	8000b3c <HAL_GetTick>
 80019fc:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fe:	6823      	ldr	r3, [r4, #0]
 8001a00:	019a      	lsls	r2, r3, #6
 8001a02:	f53f ae95 	bmi.w	8001730 <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a06:	f7ff f899 	bl	8000b3c <HAL_GetTick>
 8001a0a:	1b40      	subs	r0, r0, r5
 8001a0c:	2802      	cmp	r0, #2
 8001a0e:	d9f6      	bls.n	80019fe <HAL_RCC_OscConfig+0x3fa>
 8001a10:	e696      	b.n	8001740 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a12:	f7ff f893 	bl	8000b3c <HAL_GetTick>
 8001a16:	1b80      	subs	r0, r0, r6
 8001a18:	2802      	cmp	r0, #2
 8001a1a:	d9c7      	bls.n	80019ac <HAL_RCC_OscConfig+0x3a8>
 8001a1c:	e690      	b.n	8001740 <HAL_RCC_OscConfig+0x13c>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001a1e:	6823      	ldr	r3, [r4, #0]
 8001a20:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a24:	bf02      	ittt	eq
 8001a26:	68e3      	ldreq	r3, [r4, #12]
 8001a28:	f023 0303 	biceq.w	r3, r3, #3
 8001a2c:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a2e:	68e3      	ldr	r3, [r4, #12]
 8001a30:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a38:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001a3a:	f7ff f87f 	bl	8000b3c <HAL_GetTick>
 8001a3e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a40:	6823      	ldr	r3, [r4, #0]
 8001a42:	019b      	lsls	r3, r3, #6
 8001a44:	f57f ae74 	bpl.w	8001730 <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a48:	f7ff f878 	bl	8000b3c <HAL_GetTick>
 8001a4c:	1b40      	subs	r0, r0, r5
 8001a4e:	2802      	cmp	r0, #2
 8001a50:	d9f6      	bls.n	8001a40 <HAL_RCC_OscConfig+0x43c>
 8001a52:	e675      	b.n	8001740 <HAL_RCC_OscConfig+0x13c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a54:	2801      	cmp	r0, #1
 8001a56:	f43f ae23 	beq.w	80016a0 <HAL_RCC_OscConfig+0x9c>
        pll_config = RCC->PLLCFGR;
 8001a5a:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001a5e:	f003 0103 	and.w	r1, r3, #3
 8001a62:	4291      	cmp	r1, r2
 8001a64:	f47f add2 	bne.w	800160c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a68:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001a6a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a6e:	3901      	subs	r1, #1
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a70:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001a74:	f47f adca 	bne.w	800160c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a78:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8001a7a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a7e:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001a82:	f47f adc3 	bne.w	800160c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a86:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001a88:	3a07      	subs	r2, #7
 8001a8a:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8001a8e:	bf18      	it	ne
 8001a90:	2201      	movne	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a92:	4291      	cmp	r1, r2
 8001a94:	f47f adba 	bne.w	800160c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a98:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001a9a:	0852      	lsrs	r2, r2, #1
 8001a9c:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8001aa0:	3a01      	subs	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001aa2:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001aa6:	f47f adb1 	bne.w	800160c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001aaa:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001aac:	0852      	lsrs	r2, r2, #1
 8001aae:	3a01      	subs	r2, #1
 8001ab0:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ab4:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8001ab8:	bf14      	ite	ne
 8001aba:	2001      	movne	r0, #1
 8001abc:	2000      	moveq	r0, #0
 8001abe:	e5ef      	b.n	80016a0 <HAL_RCC_OscConfig+0x9c>
 8001ac0:	40007000 	.word	0x40007000
 8001ac4:	f99d808c 	.word	0xf99d808c

08001ac8 <HAL_RCC_ClockConfig>:
{
 8001ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001acc:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8001ace:	4604      	mov	r4, r0
 8001ad0:	b910      	cbnz	r0, 8001ad8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad8:	4a41      	ldr	r2, [pc, #260]	; (8001be0 <HAL_RCC_ClockConfig+0x118>)
 8001ada:	6813      	ldr	r3, [r2, #0]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	428b      	cmp	r3, r1
 8001ae2:	d32a      	bcc.n	8001b3a <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ae4:	6823      	ldr	r3, [r4, #0]
 8001ae6:	07d9      	lsls	r1, r3, #31
 8001ae8:	d432      	bmi.n	8001b50 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aea:	6821      	ldr	r1, [r4, #0]
 8001aec:	078a      	lsls	r2, r1, #30
 8001aee:	d45c      	bmi.n	8001baa <HAL_RCC_ClockConfig+0xe2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001af0:	4a3b      	ldr	r2, [pc, #236]	; (8001be0 <HAL_RCC_ClockConfig+0x118>)
 8001af2:	6813      	ldr	r3, [r2, #0]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	429e      	cmp	r6, r3
 8001afa:	d35e      	bcc.n	8001bba <HAL_RCC_ClockConfig+0xf2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001afc:	f011 0f04 	tst.w	r1, #4
 8001b00:	4d38      	ldr	r5, [pc, #224]	; (8001be4 <HAL_RCC_ClockConfig+0x11c>)
 8001b02:	d165      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b04:	070b      	lsls	r3, r1, #28
 8001b06:	d506      	bpl.n	8001b16 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b08:	68ab      	ldr	r3, [r5, #8]
 8001b0a:	6922      	ldr	r2, [r4, #16]
 8001b0c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001b10:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001b14:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b16:	f7ff fd27 	bl	8001568 <HAL_RCC_GetSysClockFreq>
 8001b1a:	68ab      	ldr	r3, [r5, #8]
 8001b1c:	4a32      	ldr	r2, [pc, #200]	; (8001be8 <HAL_RCC_ClockConfig+0x120>)
 8001b1e:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8001b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b26:	5cd3      	ldrb	r3, [r2, r3]
 8001b28:	f003 031f 	and.w	r3, r3, #31
 8001b2c:	40d8      	lsrs	r0, r3
 8001b2e:	4b2f      	ldr	r3, [pc, #188]	; (8001bec <HAL_RCC_ClockConfig+0x124>)
 8001b30:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8001b32:	4b2f      	ldr	r3, [pc, #188]	; (8001bf0 <HAL_RCC_ClockConfig+0x128>)
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	f7fe bfbf 	b.w	8000ab8 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3a:	6813      	ldr	r3, [r2, #0]
 8001b3c:	f023 0307 	bic.w	r3, r3, #7
 8001b40:	430b      	orrs	r3, r1
 8001b42:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b44:	6813      	ldr	r3, [r2, #0]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	4299      	cmp	r1, r3
 8001b4c:	d1c1      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xa>
 8001b4e:	e7c9      	b.n	8001ae4 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b50:	6862      	ldr	r2, [r4, #4]
 8001b52:	4d24      	ldr	r5, [pc, #144]	; (8001be4 <HAL_RCC_ClockConfig+0x11c>)
 8001b54:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b56:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b58:	d11b      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b5a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b5e:	d0b8      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b60:	68ab      	ldr	r3, [r5, #8]
 8001b62:	f023 0303 	bic.w	r3, r3, #3
 8001b66:	4313      	orrs	r3, r2
 8001b68:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8001b6a:	f7fe ffe7 	bl	8000b3c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001b72:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b74:	68ab      	ldr	r3, [r5, #8]
 8001b76:	6862      	ldr	r2, [r4, #4]
 8001b78:	f003 030c 	and.w	r3, r3, #12
 8001b7c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001b80:	d0b3      	beq.n	8001aea <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b82:	f7fe ffdb 	bl	8000b3c <HAL_GetTick>
 8001b86:	1bc0      	subs	r0, r0, r7
 8001b88:	4540      	cmp	r0, r8
 8001b8a:	d9f3      	bls.n	8001b74 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 8001b8c:	2003      	movs	r0, #3
}
 8001b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b92:	2a02      	cmp	r2, #2
 8001b94:	d102      	bne.n	8001b9c <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b96:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001b9a:	e7e0      	b.n	8001b5e <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b9c:	b912      	cbnz	r2, 8001ba4 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b9e:	f013 0f02 	tst.w	r3, #2
 8001ba2:	e7dc      	b.n	8001b5e <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ba4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001ba8:	e7d9      	b.n	8001b5e <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001baa:	4a0e      	ldr	r2, [pc, #56]	; (8001be4 <HAL_RCC_ClockConfig+0x11c>)
 8001bac:	68a0      	ldr	r0, [r4, #8]
 8001bae:	6893      	ldr	r3, [r2, #8]
 8001bb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bb4:	4303      	orrs	r3, r0
 8001bb6:	6093      	str	r3, [r2, #8]
 8001bb8:	e79a      	b.n	8001af0 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bba:	6813      	ldr	r3, [r2, #0]
 8001bbc:	f023 0307 	bic.w	r3, r3, #7
 8001bc0:	4333      	orrs	r3, r6
 8001bc2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc4:	6813      	ldr	r3, [r2, #0]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	429e      	cmp	r6, r3
 8001bcc:	d181      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xa>
 8001bce:	e795      	b.n	8001afc <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd0:	68ab      	ldr	r3, [r5, #8]
 8001bd2:	68e2      	ldr	r2, [r4, #12]
 8001bd4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	60ab      	str	r3, [r5, #8]
 8001bdc:	e792      	b.n	8001b04 <HAL_RCC_ClockConfig+0x3c>
 8001bde:	bf00      	nop
 8001be0:	40022000 	.word	0x40022000
 8001be4:	40021000 	.word	0x40021000
 8001be8:	080058c9 	.word	0x080058c9
 8001bec:	20000018 	.word	0x20000018
 8001bf0:	20000010 	.word	0x20000010

08001bf4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001bf6:	4a06      	ldr	r2, [pc, #24]	; (8001c10 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001bfe:	5cd3      	ldrb	r3, [r2, r3]
 8001c00:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c02:	6810      	ldr	r0, [r2, #0]
 8001c04:	f003 031f 	and.w	r3, r3, #31
}
 8001c08:	40d8      	lsrs	r0, r3
 8001c0a:	4770      	bx	lr
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	080058d9 	.word	0x080058d9
 8001c14:	20000018 	.word	0x20000018

08001c18 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001c1a:	4a06      	ldr	r2, [pc, #24]	; (8001c34 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001c22:	5cd3      	ldrb	r3, [r2, r3]
 8001c24:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c26:	6810      	ldr	r0, [r2, #0]
 8001c28:	f003 031f 	and.w	r3, r3, #31
}
 8001c2c:	40d8      	lsrs	r0, r3
 8001c2e:	4770      	bx	lr
 8001c30:	40021000 	.word	0x40021000
 8001c34:	080058d9 	.word	0x080058d9
 8001c38:	20000018 	.word	0x20000018

08001c3c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001c3e:	4b45      	ldr	r3, [pc, #276]	; (8001d54 <RCCEx_PLLSAI1_Config+0x118>)
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	f012 0f03 	tst.w	r2, #3
{
 8001c46:	4605      	mov	r5, r0
 8001c48:	460e      	mov	r6, r1
 8001c4a:	461c      	mov	r4, r3
 8001c4c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001c4e:	d02a      	beq.n	8001ca6 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	f002 0203 	and.w	r2, r2, #3
 8001c56:	4282      	cmp	r2, r0
 8001c58:	d13c      	bne.n	8001cd4 <RCCEx_PLLSAI1_Config+0x98>
       ||
 8001c5a:	2a00      	cmp	r2, #0
 8001c5c:	d03a      	beq.n	8001cd4 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001c5e:	68db      	ldr	r3, [r3, #12]
       ||
 8001c60:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001c62:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001c66:	3301      	adds	r3, #1
       ||
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d133      	bne.n	8001cd4 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001c6c:	6823      	ldr	r3, [r4, #0]
 8001c6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001c72:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c74:	f7fe ff62 	bl	8000b3c <HAL_GetTick>
 8001c78:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001c7a:	6823      	ldr	r3, [r4, #0]
 8001c7c:	011a      	lsls	r2, r3, #4
 8001c7e:	d432      	bmi.n	8001ce6 <RCCEx_PLLSAI1_Config+0xaa>
 8001c80:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001c82:	2e00      	cmp	r6, #0
 8001c84:	d036      	beq.n	8001cf4 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001c86:	2e01      	cmp	r6, #1
 8001c88:	d150      	bne.n	8001d2c <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001c8a:	6922      	ldr	r2, [r4, #16]
 8001c8c:	6928      	ldr	r0, [r5, #16]
 8001c8e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001c92:	0840      	lsrs	r0, r0, #1
 8001c94:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001c98:	3801      	subs	r0, #1
 8001c9a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8001c9e:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001ca2:	6122      	str	r2, [r4, #16]
 8001ca4:	e032      	b.n	8001d0c <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8001ca6:	2802      	cmp	r0, #2
 8001ca8:	d010      	beq.n	8001ccc <RCCEx_PLLSAI1_Config+0x90>
 8001caa:	2803      	cmp	r0, #3
 8001cac:	d014      	beq.n	8001cd8 <RCCEx_PLLSAI1_Config+0x9c>
 8001cae:	2801      	cmp	r0, #1
 8001cb0:	d110      	bne.n	8001cd4 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	079f      	lsls	r7, r3, #30
 8001cb6:	d538      	bpl.n	8001d2a <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001cb8:	68e3      	ldr	r3, [r4, #12]
 8001cba:	686a      	ldr	r2, [r5, #4]
 8001cbc:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001cc0:	3a01      	subs	r2, #1
 8001cc2:	4318      	orrs	r0, r3
 8001cc4:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001cc8:	60e0      	str	r0, [r4, #12]
 8001cca:	e7cf      	b.n	8001c6c <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001cd2:	d1f1      	bne.n	8001cb8 <RCCEx_PLLSAI1_Config+0x7c>
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	0391      	lsls	r1, r2, #14
 8001cdc:	d4ec      	bmi.n	8001cb8 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001ce4:	e7f5      	b.n	8001cd2 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001ce6:	f7fe ff29 	bl	8000b3c <HAL_GetTick>
 8001cea:	1bc0      	subs	r0, r0, r7
 8001cec:	2802      	cmp	r0, #2
 8001cee:	d9c4      	bls.n	8001c7a <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8001cf0:	2003      	movs	r0, #3
 8001cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001cf4:	6921      	ldr	r1, [r4, #16]
 8001cf6:	68eb      	ldr	r3, [r5, #12]
 8001cf8:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8001cfc:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001d00:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8001d0a:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001d0c:	6823      	ldr	r3, [r4, #0]
 8001d0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d12:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d14:	f7fe ff12 	bl	8000b3c <HAL_GetTick>
 8001d18:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001d1a:	6823      	ldr	r3, [r4, #0]
 8001d1c:	011b      	lsls	r3, r3, #4
 8001d1e:	d513      	bpl.n	8001d48 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001d20:	6923      	ldr	r3, [r4, #16]
 8001d22:	69aa      	ldr	r2, [r5, #24]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	6123      	str	r3, [r4, #16]
 8001d28:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001d2c:	6923      	ldr	r3, [r4, #16]
 8001d2e:	6968      	ldr	r0, [r5, #20]
 8001d30:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001d34:	0840      	lsrs	r0, r0, #1
 8001d36:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001d3a:	3801      	subs	r0, #1
 8001d3c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8001d40:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001d44:	6123      	str	r3, [r4, #16]
 8001d46:	e7e1      	b.n	8001d0c <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001d48:	f7fe fef8 	bl	8000b3c <HAL_GetTick>
 8001d4c:	1b80      	subs	r0, r0, r6
 8001d4e:	2802      	cmp	r0, #2
 8001d50:	d9e3      	bls.n	8001d1a <RCCEx_PLLSAI1_Config+0xde>
 8001d52:	e7cd      	b.n	8001cf0 <RCCEx_PLLSAI1_Config+0xb4>
 8001d54:	40021000 	.word	0x40021000

08001d58 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8001d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001d5a:	4b3d      	ldr	r3, [pc, #244]	; (8001e50 <RCCEx_PLLSAI2_Config+0xf8>)
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	f012 0f03 	tst.w	r2, #3
{
 8001d62:	4605      	mov	r5, r0
 8001d64:	460e      	mov	r6, r1
 8001d66:	461c      	mov	r4, r3
 8001d68:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001d6a:	d028      	beq.n	8001dbe <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	f002 0203 	and.w	r2, r2, #3
 8001d72:	4282      	cmp	r2, r0
 8001d74:	d13a      	bne.n	8001dec <RCCEx_PLLSAI2_Config+0x94>
       ||
 8001d76:	2a00      	cmp	r2, #0
 8001d78:	d038      	beq.n	8001dec <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001d7a:	68db      	ldr	r3, [r3, #12]
       ||
 8001d7c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001d7e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001d82:	3301      	adds	r3, #1
       ||
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d131      	bne.n	8001dec <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8001d88:	6823      	ldr	r3, [r4, #0]
 8001d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d90:	f7fe fed4 	bl	8000b3c <HAL_GetTick>
 8001d94:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001d96:	6823      	ldr	r3, [r4, #0]
 8001d98:	009a      	lsls	r2, r3, #2
 8001d9a:	d430      	bmi.n	8001dfe <RCCEx_PLLSAI2_Config+0xa6>
 8001d9c:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001d9e:	2e00      	cmp	r6, #0
 8001da0:	d034      	beq.n	8001e0c <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001da2:	6963      	ldr	r3, [r4, #20]
 8001da4:	6929      	ldr	r1, [r5, #16]
 8001da6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001daa:	0849      	lsrs	r1, r1, #1
 8001dac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001db0:	3901      	subs	r1, #1
 8001db2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001db6:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8001dba:	6163      	str	r3, [r4, #20]
 8001dbc:	e032      	b.n	8001e24 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 8001dbe:	2802      	cmp	r0, #2
 8001dc0:	d010      	beq.n	8001de4 <RCCEx_PLLSAI2_Config+0x8c>
 8001dc2:	2803      	cmp	r0, #3
 8001dc4:	d014      	beq.n	8001df0 <RCCEx_PLLSAI2_Config+0x98>
 8001dc6:	2801      	cmp	r0, #1
 8001dc8:	d110      	bne.n	8001dec <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	079f      	lsls	r7, r3, #30
 8001dce:	d538      	bpl.n	8001e42 <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001dd0:	68e3      	ldr	r3, [r4, #12]
 8001dd2:	686a      	ldr	r2, [r5, #4]
 8001dd4:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001dd8:	3a01      	subs	r2, #1
 8001dda:	4318      	orrs	r0, r3
 8001ddc:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001de0:	60e0      	str	r0, [r4, #12]
 8001de2:	e7d1      	b.n	8001d88 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001dea:	d1f1      	bne.n	8001dd0 <RCCEx_PLLSAI2_Config+0x78>
 8001dec:	2001      	movs	r0, #1
 8001dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	0391      	lsls	r1, r2, #14
 8001df4:	d4ec      	bmi.n	8001dd0 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001dfc:	e7f5      	b.n	8001dea <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001dfe:	f7fe fe9d 	bl	8000b3c <HAL_GetTick>
 8001e02:	1bc0      	subs	r0, r0, r7
 8001e04:	2802      	cmp	r0, #2
 8001e06:	d9c6      	bls.n	8001d96 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8001e08:	2003      	movs	r0, #3
 8001e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001e0c:	6962      	ldr	r2, [r4, #20]
 8001e0e:	68eb      	ldr	r3, [r5, #12]
 8001e10:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8001e14:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001e18:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001e1c:	091b      	lsrs	r3, r3, #4
 8001e1e:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8001e22:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8001e24:	6823      	ldr	r3, [r4, #0]
 8001e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2c:	f7fe fe86 	bl	8000b3c <HAL_GetTick>
 8001e30:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8001e32:	6823      	ldr	r3, [r4, #0]
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	d505      	bpl.n	8001e44 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8001e38:	6963      	ldr	r3, [r4, #20]
 8001e3a:	696a      	ldr	r2, [r5, #20]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	6163      	str	r3, [r4, #20]
 8001e40:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001e44:	f7fe fe7a 	bl	8000b3c <HAL_GetTick>
 8001e48:	1b80      	subs	r0, r0, r6
 8001e4a:	2802      	cmp	r0, #2
 8001e4c:	d9f1      	bls.n	8001e32 <RCCEx_PLLSAI2_Config+0xda>
 8001e4e:	e7db      	b.n	8001e08 <RCCEx_PLLSAI2_Config+0xb0>
 8001e50:	40021000 	.word	0x40021000

08001e54 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001e54:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e58:	6806      	ldr	r6, [r0, #0]
 8001e5a:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8001e5e:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e60:	d024      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001e62:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8001e64:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8001e68:	d02c      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8001e6a:	d802      	bhi.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001e6c:	b1c1      	cbz	r1, 8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8001e6e:	2601      	movs	r6, #1
 8001e70:	e01c      	b.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001e72:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001e76:	d00d      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001e78:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001e7c:	d1f7      	bne.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e7e:	4a4d      	ldr	r2, [pc, #308]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e80:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001e82:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e86:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001e8a:	430b      	orrs	r3, r1
 8001e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001e90:	2600      	movs	r6, #0
 8001e92:	e00b      	b.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e94:	4a47      	ldr	r2, [pc, #284]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e96:	68d3      	ldr	r3, [r2, #12]
 8001e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9c:	60d3      	str	r3, [r2, #12]
      break;
 8001e9e:	e7ee      	b.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ea0:	3004      	adds	r0, #4
 8001ea2:	f7ff fecb 	bl	8001c3c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ea6:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001ea8:	2800      	cmp	r0, #0
 8001eaa:	d0e8      	beq.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001eac:	6823      	ldr	r3, [r4, #0]
 8001eae:	04d8      	lsls	r0, r3, #19
 8001eb0:	d506      	bpl.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001eb2:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001eb4:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8001eb8:	d074      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8001eba:	d808      	bhi.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001ebc:	b1a9      	cbz	r1, 8001eea <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 8001ebe:	2601      	movs	r6, #1
 8001ec0:	4635      	mov	r5, r6
 8001ec2:	e021      	b.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	3020      	adds	r0, #32
 8001ec8:	f7ff ff46 	bl	8001d58 <RCCEx_PLLSAI2_Config>
 8001ecc:	e7eb      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001ece:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8001ed2:	d004      	beq.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8001ed4:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8001ed8:	d1f1      	bne.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8001eda:	4635      	mov	r5, r6
 8001edc:	e009      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ede:	4a35      	ldr	r2, [pc, #212]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee0:	68d3      	ldr	r3, [r2, #12]
 8001ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee6:	60d3      	str	r3, [r2, #12]
 8001ee8:	e7f7      	b.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001eea:	1d20      	adds	r0, r4, #4
 8001eec:	f7ff fea6 	bl	8001c3c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ef0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001ef2:	2d00      	cmp	r5, #0
 8001ef4:	d15c      	bne.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ef6:	4a2f      	ldr	r2, [pc, #188]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ef8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001efa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001efe:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001f02:	430b      	orrs	r3, r1
 8001f04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f08:	6823      	ldr	r3, [r4, #0]
 8001f0a:	0399      	lsls	r1, r3, #14
 8001f0c:	f140 814f 	bpl.w	80021ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f10:	4f28      	ldr	r7, [pc, #160]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f14:	00da      	lsls	r2, r3, #3
 8001f16:	f140 8176 	bpl.w	8002206 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8001f1a:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f1e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8001f22:	f8d9 3000 	ldr.w	r3, [r9]
 8001f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2a:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8001f2e:	f7fe fe05 	bl	8000b3c <HAL_GetTick>
 8001f32:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f34:	f8d9 3000 	ldr.w	r3, [r9]
 8001f38:	05db      	lsls	r3, r3, #23
 8001f3a:	d53f      	bpl.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8001f3c:	2d00      	cmp	r5, #0
 8001f3e:	d144      	bne.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f44:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001f48:	d015      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x122>
 8001f4a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d011      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f56:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001f5a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f5e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f62:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f6a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f6e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8001f72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f76:	07d8      	lsls	r0, r3, #31
 8001f78:	d509      	bpl.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8001f7a:	f7fe fddf 	bl	8000b3c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001f82:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f88:	0799      	lsls	r1, r3, #30
 8001f8a:	f140 8109 	bpl.w	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f92:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001fa0:	4635      	mov	r5, r6
 8001fa2:	e012      	b.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	f104 0020 	add.w	r0, r4, #32
 8001faa:	f7ff fed5 	bl	8001d58 <RCCEx_PLLSAI2_Config>
 8001fae:	e79f      	b.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8001fb0:	462e      	mov	r6, r5
 8001fb2:	e7a9      	b.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fbc:	f7fe fdbe 	bl	8000b3c <HAL_GetTick>
 8001fc0:	eba0 000a 	sub.w	r0, r0, sl
 8001fc4:	2802      	cmp	r0, #2
 8001fc6:	d9b5      	bls.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8001fc8:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8001fca:	f1b8 0f00 	cmp.w	r8, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fd8:	6823      	ldr	r3, [r4, #0]
 8001fda:	07da      	lsls	r2, r3, #31
 8001fdc:	d508      	bpl.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fde:	4990      	ldr	r1, [pc, #576]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001fe0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001fe2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001fe6:	f022 0203 	bic.w	r2, r2, #3
 8001fea:	4302      	orrs	r2, r0
 8001fec:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ff0:	079f      	lsls	r7, r3, #30
 8001ff2:	d508      	bpl.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ff4:	498a      	ldr	r1, [pc, #552]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001ff6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001ff8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001ffc:	f022 020c 	bic.w	r2, r2, #12
 8002000:	4302      	orrs	r2, r0
 8002002:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002006:	075e      	lsls	r6, r3, #29
 8002008:	d508      	bpl.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800200a:	4985      	ldr	r1, [pc, #532]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800200c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800200e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002012:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002016:	4302      	orrs	r2, r0
 8002018:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800201c:	0718      	lsls	r0, r3, #28
 800201e:	d508      	bpl.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002020:	497f      	ldr	r1, [pc, #508]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002022:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002024:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002028:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800202c:	4302      	orrs	r2, r0
 800202e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002032:	06d9      	lsls	r1, r3, #27
 8002034:	d508      	bpl.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002036:	497a      	ldr	r1, [pc, #488]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002038:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800203a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800203e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002042:	4302      	orrs	r2, r0
 8002044:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002048:	069a      	lsls	r2, r3, #26
 800204a:	d508      	bpl.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800204c:	4974      	ldr	r1, [pc, #464]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800204e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002050:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002054:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002058:	4302      	orrs	r2, r0
 800205a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800205e:	059f      	lsls	r7, r3, #22
 8002060:	d508      	bpl.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002062:	496f      	ldr	r1, [pc, #444]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002064:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002066:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800206a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800206e:	4302      	orrs	r2, r0
 8002070:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002074:	055e      	lsls	r6, r3, #21
 8002076:	d508      	bpl.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002078:	4969      	ldr	r1, [pc, #420]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800207a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800207c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002080:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002084:	4302      	orrs	r2, r0
 8002086:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800208a:	0658      	lsls	r0, r3, #25
 800208c:	d508      	bpl.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800208e:	4964      	ldr	r1, [pc, #400]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002090:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002092:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002096:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800209a:	4302      	orrs	r2, r0
 800209c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020a0:	0619      	lsls	r1, r3, #24
 80020a2:	d508      	bpl.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020a4:	495e      	ldr	r1, [pc, #376]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80020a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80020a8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80020ac:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80020b0:	4302      	orrs	r2, r0
 80020b2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020b6:	05da      	lsls	r2, r3, #23
 80020b8:	d508      	bpl.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020ba:	4959      	ldr	r1, [pc, #356]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80020bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020be:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80020c2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80020c6:	4302      	orrs	r2, r0
 80020c8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020cc:	049b      	lsls	r3, r3, #18
 80020ce:	d50f      	bpl.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020d0:	4a53      	ldr	r2, [pc, #332]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80020d2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80020d4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80020d8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80020dc:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020de:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020e6:	d164      	bne.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020e8:	68d3      	ldr	r3, [r2, #12]
 80020ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020ee:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80020f0:	6823      	ldr	r3, [r4, #0]
 80020f2:	031f      	lsls	r7, r3, #12
 80020f4:	d50f      	bpl.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020f6:	4a4a      	ldr	r2, [pc, #296]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80020f8:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80020fa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80020fe:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002102:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002104:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800210c:	d15c      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800210e:	68d3      	ldr	r3, [r2, #12]
 8002110:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002114:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002116:	6823      	ldr	r3, [r4, #0]
 8002118:	035e      	lsls	r6, r3, #13
 800211a:	d50f      	bpl.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800211c:	4a40      	ldr	r2, [pc, #256]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800211e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002120:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002124:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002128:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800212a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800212e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002132:	d154      	bne.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002134:	68d3      	ldr	r3, [r2, #12]
 8002136:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800213a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800213c:	6823      	ldr	r3, [r4, #0]
 800213e:	0458      	lsls	r0, r3, #17
 8002140:	d512      	bpl.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002142:	4937      	ldr	r1, [pc, #220]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002144:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8002146:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800214a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800214e:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002150:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002158:	d14c      	bne.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800215a:	2102      	movs	r1, #2
 800215c:	1d20      	adds	r0, r4, #4
 800215e:	f7ff fd6d 	bl	8001c3c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002162:	2800      	cmp	r0, #0
 8002164:	bf18      	it	ne
 8002166:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002168:	6822      	ldr	r2, [r4, #0]
 800216a:	0411      	lsls	r1, r2, #16
 800216c:	d508      	bpl.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800216e:	492c      	ldr	r1, [pc, #176]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002170:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002172:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002176:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800217a:	4303      	orrs	r3, r0
 800217c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002180:	03d3      	lsls	r3, r2, #15
 8002182:	d509      	bpl.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002184:	4a26      	ldr	r2, [pc, #152]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002186:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800218a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800218e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002192:	430b      	orrs	r3, r1
 8002194:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002198:	4628      	mov	r0, r5
 800219a:	b002      	add	sp, #8
 800219c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a0:	f7fe fccc 	bl	8000b3c <HAL_GetTick>
 80021a4:	1b40      	subs	r0, r0, r5
 80021a6:	4548      	cmp	r0, r9
 80021a8:	f67f aeec 	bls.w	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80021ac:	e70c      	b.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80021ae:	4635      	mov	r5, r6
 80021b0:	e712      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021b2:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80021b6:	d19b      	bne.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021b8:	2101      	movs	r1, #1
 80021ba:	1d20      	adds	r0, r4, #4
 80021bc:	f7ff fd3e 	bl	8001c3c <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80021c0:	2800      	cmp	r0, #0
 80021c2:	bf18      	it	ne
 80021c4:	4605      	movne	r5, r0
 80021c6:	e793      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80021c8:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80021cc:	d1a3      	bne.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021ce:	2101      	movs	r1, #1
 80021d0:	1d20      	adds	r0, r4, #4
 80021d2:	f7ff fd33 	bl	8001c3c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80021d6:	2800      	cmp	r0, #0
 80021d8:	bf18      	it	ne
 80021da:	4605      	movne	r5, r0
 80021dc:	e79b      	b.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80021de:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80021e2:	d1ab      	bne.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021e4:	2101      	movs	r1, #1
 80021e6:	1d20      	adds	r0, r4, #4
 80021e8:	f7ff fd28 	bl	8001c3c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80021ec:	2800      	cmp	r0, #0
 80021ee:	bf18      	it	ne
 80021f0:	4605      	movne	r5, r0
 80021f2:	e7a3      	b.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80021f4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80021f8:	d1b6      	bne.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80021fa:	2102      	movs	r1, #2
 80021fc:	f104 0020 	add.w	r0, r4, #32
 8002200:	f7ff fdaa 	bl	8001d58 <RCCEx_PLLSAI2_Config>
 8002204:	e7ad      	b.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002206:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220c:	65bb      	str	r3, [r7, #88]	; 0x58
 800220e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002214:	9301      	str	r3, [sp, #4]
 8002216:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002218:	f04f 0801 	mov.w	r8, #1
 800221c:	e67f      	b.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0xca>
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000

08002224 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002224:	4a02      	ldr	r2, [pc, #8]	; (8002230 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8002226:	6813      	ldr	r3, [r2, #0]
 8002228:	f043 0304 	orr.w	r3, r3, #4
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	4770      	bx	lr
 8002230:	40021000 	.word	0x40021000

08002234 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002234:	6803      	ldr	r3, [r0, #0]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800223c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800223e:	6842      	ldr	r2, [r0, #4]
 8002240:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002244:	d10a      	bne.n	800225c <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 8002246:	6882      	ldr	r2, [r0, #8]
 8002248:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800224c:	d002      	beq.n	8002254 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800224e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002252:	d103      	bne.n	800225c <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800225a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800225c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800225e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002262:	d107      	bne.n	8002274 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002272:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002274:	2301      	movs	r3, #1
 8002276:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800227a:	2300      	movs	r3, #0
 800227c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8002280:	2003      	movs	r0, #3
 8002282:	4770      	bx	lr

08002284 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002284:	b570      	push	{r4, r5, r6, lr}
 8002286:	4604      	mov	r4, r0
 8002288:	460d      	mov	r5, r1
 800228a:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800228c:	6823      	ldr	r3, [r4, #0]
 800228e:	6898      	ldr	r0, [r3, #8]
 8002290:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002294:	d100      	bne.n	8002298 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x14>
}
 8002296:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002298:	1c6a      	adds	r2, r5, #1
 800229a:	d0f8      	beq.n	800228e <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800229c:	f7fe fc4e 	bl	8000b3c <HAL_GetTick>
 80022a0:	1b80      	subs	r0, r0, r6
 80022a2:	4285      	cmp	r5, r0
 80022a4:	d8f2      	bhi.n	800228c <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 80022a6:	4620      	mov	r0, r4
}
 80022a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80022ac:	f7ff bfc2 	b.w	8002234 <SPI_WaitFifoStateUntilTimeout.part.1>

080022b0 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80022b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b2:	4605      	mov	r5, r0
 80022b4:	460c      	mov	r4, r1
 80022b6:	4616      	mov	r6, r2
 80022b8:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 80022ba:	6829      	ldr	r1, [r5, #0]
 80022bc:	6888      	ldr	r0, [r1, #8]
 80022be:	4020      	ands	r0, r4
 80022c0:	d100      	bne.n	80022c4 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x14>
}
 80022c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80022c4:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80022c8:	bf08      	it	eq
 80022ca:	7b0b      	ldrbeq	r3, [r1, #12]
    if (Timeout != HAL_MAX_DELAY)
 80022cc:	1c73      	adds	r3, r6, #1
 80022ce:	d0f5      	beq.n	80022bc <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80022d0:	f7fe fc34 	bl	8000b3c <HAL_GetTick>
 80022d4:	1bc0      	subs	r0, r0, r7
 80022d6:	4286      	cmp	r6, r0
 80022d8:	d8ef      	bhi.n	80022ba <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 80022da:	4628      	mov	r0, r5
}
 80022dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80022e0:	f7ff bfa8 	b.w	8002234 <SPI_WaitFifoStateUntilTimeout.part.1>

080022e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80022e4:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80022e6:	4613      	mov	r3, r2
{
 80022e8:	460d      	mov	r5, r1
 80022ea:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80022ec:	460a      	mov	r2, r1
 80022ee:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 80022f2:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80022f4:	f7ff ffdc 	bl	80022b0 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 80022f8:	b128      	cbz	r0, 8002306 <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022fa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80022fc:	f043 0320 	orr.w	r3, r3, #32
 8002300:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8002302:	2003      	movs	r0, #3
 8002304:	e00f      	b.n	8002326 <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002306:	4632      	mov	r2, r6
 8002308:	4629      	mov	r1, r5
 800230a:	4620      	mov	r0, r4
 800230c:	f7ff ffba 	bl	8002284 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8002310:	2800      	cmp	r0, #0
 8002312:	d1f2      	bne.n	80022fa <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002314:	4633      	mov	r3, r6
 8002316:	462a      	mov	r2, r5
 8002318:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800231c:	4620      	mov	r0, r4
 800231e:	f7ff ffc7 	bl	80022b0 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8002322:	2800      	cmp	r0, #0
 8002324:	d1e9      	bne.n	80022fa <SPI_EndRxTxTransaction+0x16>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8002326:	bd70      	pop	{r4, r5, r6, pc}

08002328 <HAL_SPI_MspInit>:
 8002328:	4770      	bx	lr

0800232a <HAL_SPI_Init>:
{
 800232a:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 800232c:	4604      	mov	r4, r0
 800232e:	2800      	cmp	r0, #0
 8002330:	d04a      	beq.n	80023c8 <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002332:	2300      	movs	r3, #0
 8002334:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002336:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800233a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800233e:	b91b      	cbnz	r3, 8002348 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8002340:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8002344:	f7ff fff0 	bl	8002328 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002348:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800234a:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800234c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002350:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002352:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8002354:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002358:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800235c:	600b      	str	r3, [r1, #0]
 800235e:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002362:	d92e      	bls.n	80023c2 <HAL_SPI_Init+0x98>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002364:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002366:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800236a:	bf18      	it	ne
 800236c:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800236e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002370:	b92b      	cbnz	r3, 800237e <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002372:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002376:	bf8c      	ite	hi
 8002378:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800237a:	2301      	movls	r3, #1
 800237c:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800237e:	68a6      	ldr	r6, [r4, #8]
 8002380:	6863      	ldr	r3, [r4, #4]
 8002382:	69a5      	ldr	r5, [r4, #24]
 8002384:	4333      	orrs	r3, r6
 8002386:	6926      	ldr	r6, [r4, #16]
 8002388:	4333      	orrs	r3, r6
 800238a:	6966      	ldr	r6, [r4, #20]
 800238c:	4333      	orrs	r3, r6
 800238e:	69e6      	ldr	r6, [r4, #28]
 8002390:	4333      	orrs	r3, r6
 8002392:	6a26      	ldr	r6, [r4, #32]
 8002394:	4333      	orrs	r3, r6
 8002396:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002398:	4333      	orrs	r3, r6
 800239a:	f405 7600 	and.w	r6, r5, #512	; 0x200
 800239e:	4333      	orrs	r3, r6
 80023a0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80023a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023a4:	431a      	orrs	r2, r3
 80023a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80023a8:	0c2d      	lsrs	r5, r5, #16
 80023aa:	431a      	orrs	r2, r3
 80023ac:	f005 0504 	and.w	r5, r5, #4
 80023b0:	432a      	orrs	r2, r5
 80023b2:	4302      	orrs	r2, r0
  hspi->State     = HAL_SPI_STATE_READY;
 80023b4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023b6:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80023b8:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023ba:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80023bc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 80023c0:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80023c2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80023c6:	e7d0      	b.n	800236a <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 80023c8:	2001      	movs	r0, #1
}
 80023ca:	bd70      	pop	{r4, r5, r6, pc}

080023cc <HAL_SPI_TransmitReceive>:
{
 80023cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023d0:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80023d2:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 80023d6:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 80023d8:	2b01      	cmp	r3, #1
{
 80023da:	4604      	mov	r4, r0
 80023dc:	460d      	mov	r5, r1
 80023de:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 80023e0:	f000 8115 	beq.w	800260e <HAL_SPI_TransmitReceive+0x242>
 80023e4:	2301      	movs	r3, #1
 80023e6:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80023ea:	f7fe fba7 	bl	8000b3c <HAL_GetTick>
  tmp_state           = hspi->State;
 80023ee:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 80023f2:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 80023f4:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80023f6:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80023f8:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80023fa:	d00a      	beq.n	8002412 <HAL_SPI_TransmitReceive+0x46>
 80023fc:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8002400:	f040 8103 	bne.w	800260a <HAL_SPI_TransmitReceive+0x23e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002404:	68a0      	ldr	r0, [r4, #8]
 8002406:	2800      	cmp	r0, #0
 8002408:	f040 80ff 	bne.w	800260a <HAL_SPI_TransmitReceive+0x23e>
 800240c:	2b04      	cmp	r3, #4
 800240e:	f040 80fc 	bne.w	800260a <HAL_SPI_TransmitReceive+0x23e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002412:	2d00      	cmp	r5, #0
 8002414:	d049      	beq.n	80024aa <HAL_SPI_TransmitReceive+0xde>
 8002416:	f1b9 0f00 	cmp.w	r9, #0
 800241a:	d046      	beq.n	80024aa <HAL_SPI_TransmitReceive+0xde>
 800241c:	2e00      	cmp	r6, #0
 800241e:	d044      	beq.n	80024aa <HAL_SPI_TransmitReceive+0xde>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002420:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002424:	68e2      	ldr	r2, [r4, #12]
 8002426:	6820      	ldr	r0, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002428:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800242c:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800242e:	bf1c      	itt	ne
 8002430:	2305      	movne	r3, #5
 8002432:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002436:	2300      	movs	r3, #0
 8002438:	6623      	str	r3, [r4, #96]	; 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800243a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  hspi->RxXferCount = Size;
 800243e:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 8002442:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002444:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002446:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxXferSize  = Size;
 8002448:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800244c:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800244e:	87a6      	strh	r6, [r4, #60]	; 0x3c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002450:	6843      	ldr	r3, [r0, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002452:	d801      	bhi.n	8002458 <HAL_SPI_TransmitReceive+0x8c>
 8002454:	2e01      	cmp	r6, #1
 8002456:	d92a      	bls.n	80024ae <HAL_SPI_TransmitReceive+0xe2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002458:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800245c:	6043      	str	r3, [r0, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800245e:	6803      	ldr	r3, [r0, #0]
 8002460:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8002462:	bf5e      	ittt	pl
 8002464:	6803      	ldrpl	r3, [r0, #0]
 8002466:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800246a:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800246c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 8002470:	d956      	bls.n	8002520 <HAL_SPI_TransmitReceive+0x154>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002472:	b109      	cbz	r1, 8002478 <HAL_SPI_TransmitReceive+0xac>
 8002474:	2e01      	cmp	r6, #1
 8002476:	d107      	bne.n	8002488 <HAL_SPI_TransmitReceive+0xbc>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002478:	f835 3b02 	ldrh.w	r3, [r5], #2
 800247c:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 800247e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002480:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8002482:	3b01      	subs	r3, #1
 8002484:	b29b      	uxth	r3, r3
 8002486:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002488:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800248a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800248c:	b29b      	uxth	r3, r3
 800248e:	b98b      	cbnz	r3, 80024b4 <HAL_SPI_TransmitReceive+0xe8>
 8002490:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002494:	b29b      	uxth	r3, r3
 8002496:	b96b      	cbnz	r3, 80024b4 <HAL_SPI_TransmitReceive+0xe8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002498:	4642      	mov	r2, r8
 800249a:	4639      	mov	r1, r7
 800249c:	4620      	mov	r0, r4
 800249e:	f7ff ff21 	bl	80022e4 <SPI_EndRxTxTransaction>
 80024a2:	2800      	cmp	r0, #0
 80024a4:	d034      	beq.n	8002510 <HAL_SPI_TransmitReceive+0x144>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024a6:	2320      	movs	r3, #32
 80024a8:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 80024aa:	2001      	movs	r0, #1
 80024ac:	e030      	b.n	8002510 <HAL_SPI_TransmitReceive+0x144>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80024ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024b2:	e7d3      	b.n	800245c <HAL_SPI_TransmitReceive+0x90>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024b4:	6822      	ldr	r2, [r4, #0]
 80024b6:	6893      	ldr	r3, [r2, #8]
 80024b8:	0799      	lsls	r1, r3, #30
 80024ba:	d50d      	bpl.n	80024d8 <HAL_SPI_TransmitReceive+0x10c>
 80024bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024be:	b29b      	uxth	r3, r3
 80024c0:	b153      	cbz	r3, 80024d8 <HAL_SPI_TransmitReceive+0x10c>
 80024c2:	b14d      	cbz	r5, 80024d8 <HAL_SPI_TransmitReceive+0x10c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024c6:	f833 1b02 	ldrh.w	r1, [r3], #2
 80024ca:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024cc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80024ce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80024d6:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024d8:	6893      	ldr	r3, [r2, #8]
 80024da:	07db      	lsls	r3, r3, #31
 80024dc:	d50f      	bpl.n	80024fe <HAL_SPI_TransmitReceive+0x132>
 80024de:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	b15b      	cbz	r3, 80024fe <HAL_SPI_TransmitReceive+0x132>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024e8:	68d2      	ldr	r2, [r2, #12]
 80024ea:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024ee:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80024f0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80024f4:	3b01      	subs	r3, #1
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 80024fc:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80024fe:	f7fe fb1d 	bl	8000b3c <HAL_GetTick>
 8002502:	eba0 0008 	sub.w	r0, r0, r8
 8002506:	4287      	cmp	r7, r0
 8002508:	d8bf      	bhi.n	800248a <HAL_SPI_TransmitReceive+0xbe>
 800250a:	1c7e      	adds	r6, r7, #1
 800250c:	d0bd      	beq.n	800248a <HAL_SPI_TransmitReceive+0xbe>
        errorcode = HAL_TIMEOUT;
 800250e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002510:	2301      	movs	r3, #1
 8002512:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002516:	2300      	movs	r3, #0
 8002518:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 800251c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002520:	b109      	cbz	r1, 8002526 <HAL_SPI_TransmitReceive+0x15a>
 8002522:	2e01      	cmp	r6, #1
 8002524:	d10b      	bne.n	800253e <HAL_SPI_TransmitReceive+0x172>
      if (hspi->TxXferCount > 1U)
 8002526:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002528:	b29b      	uxth	r3, r3
 800252a:	2b01      	cmp	r3, #1
 800252c:	d951      	bls.n	80025d2 <HAL_SPI_TransmitReceive+0x206>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800252e:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002532:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount -= 2U;
 8002534:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002536:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002538:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 800253a:	b29b      	uxth	r3, r3
 800253c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800253e:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002540:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002542:	b29b      	uxth	r3, r3
 8002544:	b923      	cbnz	r3, 8002550 <HAL_SPI_TransmitReceive+0x184>
 8002546:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800254a:	b29b      	uxth	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0a3      	beq.n	8002498 <HAL_SPI_TransmitReceive+0xcc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002550:	6822      	ldr	r2, [r4, #0]
 8002552:	6893      	ldr	r3, [r2, #8]
 8002554:	0798      	lsls	r0, r3, #30
 8002556:	d511      	bpl.n	800257c <HAL_SPI_TransmitReceive+0x1b0>
 8002558:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800255a:	b29b      	uxth	r3, r3
 800255c:	b173      	cbz	r3, 800257c <HAL_SPI_TransmitReceive+0x1b0>
 800255e:	b16d      	cbz	r5, 800257c <HAL_SPI_TransmitReceive+0x1b0>
        if (hspi->TxXferCount > 1U)
 8002560:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002562:	b29b      	uxth	r3, r3
 8002564:	2b01      	cmp	r3, #1
 8002566:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002568:	d93b      	bls.n	80025e2 <HAL_SPI_TransmitReceive+0x216>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800256a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800256e:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002570:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002572:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002574:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8002576:	b29b      	uxth	r3, r3
 8002578:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800257a:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800257c:	6822      	ldr	r2, [r4, #0]
 800257e:	6893      	ldr	r3, [r2, #8]
 8002580:	07d9      	lsls	r1, r3, #31
 8002582:	d51d      	bpl.n	80025c0 <HAL_SPI_TransmitReceive+0x1f4>
 8002584:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002588:	b29b      	uxth	r3, r3
 800258a:	b1cb      	cbz	r3, 80025c0 <HAL_SPI_TransmitReceive+0x1f4>
        if (hspi->RxXferCount > 1U)
 800258c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b01      	cmp	r3, #1
 8002594:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002596:	d92c      	bls.n	80025f2 <HAL_SPI_TransmitReceive+0x226>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002598:	68d1      	ldr	r1, [r2, #12]
 800259a:	f823 1b02 	strh.w	r1, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800259e:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80025a0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80025a4:	3b02      	subs	r3, #2
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80025ac:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d803      	bhi.n	80025be <HAL_SPI_TransmitReceive+0x1f2>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80025b6:	6853      	ldr	r3, [r2, #4]
 80025b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025bc:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 80025be:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80025c0:	f7fe fabc 	bl	8000b3c <HAL_GetTick>
 80025c4:	eba0 0008 	sub.w	r0, r0, r8
 80025c8:	4287      	cmp	r7, r0
 80025ca:	d8b9      	bhi.n	8002540 <HAL_SPI_TransmitReceive+0x174>
 80025cc:	1c7b      	adds	r3, r7, #1
 80025ce:	d0b7      	beq.n	8002540 <HAL_SPI_TransmitReceive+0x174>
 80025d0:	e79d      	b.n	800250e <HAL_SPI_TransmitReceive+0x142>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80025d2:	782b      	ldrb	r3, [r5, #0]
 80025d4:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr++;
 80025d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025d8:	3301      	adds	r3, #1
 80025da:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80025dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80025de:	3b01      	subs	r3, #1
 80025e0:	e7ab      	b.n	800253a <HAL_SPI_TransmitReceive+0x16e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80025e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025e8:	3301      	adds	r3, #1
 80025ea:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80025ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80025ee:	3b01      	subs	r3, #1
 80025f0:	e7c1      	b.n	8002576 <HAL_SPI_TransmitReceive+0x1aa>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80025f2:	7b12      	ldrb	r2, [r2, #12]
 80025f4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80025f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025f8:	3301      	adds	r3, #1
 80025fa:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80025fc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002600:	3b01      	subs	r3, #1
 8002602:	b29b      	uxth	r3, r3
 8002604:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8002608:	e7d9      	b.n	80025be <HAL_SPI_TransmitReceive+0x1f2>
    errorcode = HAL_BUSY;
 800260a:	2002      	movs	r0, #2
 800260c:	e780      	b.n	8002510 <HAL_SPI_TransmitReceive+0x144>
  __HAL_LOCK(hspi);
 800260e:	2002      	movs	r0, #2
}
 8002610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002614 <HAL_SPI_GetState>:
  return hspi->State;
 8002614:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 8002618:	4770      	bx	lr
	...

0800261c <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800261c:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800261e:	69c1      	ldr	r1, [r0, #28]
{
 8002620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002622:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002624:	6883      	ldr	r3, [r0, #8]
 8002626:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002628:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800262a:	4303      	orrs	r3, r0
 800262c:	6960      	ldr	r0, [r4, #20]
 800262e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002630:	48ba      	ldr	r0, [pc, #744]	; (800291c <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002632:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002634:	4028      	ands	r0, r5
 8002636:	4303      	orrs	r3, r0
 8002638:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800263a:	6853      	ldr	r3, [r2, #4]
 800263c:	68e0      	ldr	r0, [r4, #12]
 800263e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002642:	4303      	orrs	r3, r0
 8002644:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002646:	4bb6      	ldr	r3, [pc, #728]	; (8002920 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002648:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800264a:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 800264c:	bf1c      	itt	ne
 800264e:	6a23      	ldrne	r3, [r4, #32]
 8002650:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002652:	6893      	ldr	r3, [r2, #8]
 8002654:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002658:	4303      	orrs	r3, r0
 800265a:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800265c:	4bb1      	ldr	r3, [pc, #708]	; (8002924 <UART_SetConfig+0x308>)
 800265e:	429a      	cmp	r2, r3
 8002660:	d119      	bne.n	8002696 <UART_SetConfig+0x7a>
 8002662:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002666:	4ab0      	ldr	r2, [pc, #704]	; (8002928 <UART_SetConfig+0x30c>)
 8002668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266c:	f003 0303 	and.w	r3, r3, #3
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002670:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002674:	5cd3      	ldrb	r3, [r2, r3]
 8002676:	f040 8138 	bne.w	80028ea <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 800267a:	2b08      	cmp	r3, #8
 800267c:	f200 808f 	bhi.w	800279e <UART_SetConfig+0x182>
 8002680:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002684:	00ca011a 	.word	0x00ca011a
 8002688:	008d00f9 	.word	0x008d00f9
 800268c:	008d0114 	.word	0x008d0114
 8002690:	008d008d 	.word	0x008d008d
 8002694:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002696:	4ba5      	ldr	r3, [pc, #660]	; (800292c <UART_SetConfig+0x310>)
 8002698:	429a      	cmp	r2, r3
 800269a:	d107      	bne.n	80026ac <UART_SetConfig+0x90>
 800269c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80026a0:	4aa3      	ldr	r2, [pc, #652]	; (8002930 <UART_SetConfig+0x314>)
 80026a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a6:	f003 030c 	and.w	r3, r3, #12
 80026aa:	e7e1      	b.n	8002670 <UART_SetConfig+0x54>
 80026ac:	4ba1      	ldr	r3, [pc, #644]	; (8002934 <UART_SetConfig+0x318>)
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d123      	bne.n	80026fa <UART_SetConfig+0xde>
 80026b2:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80026b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80026be:	2b10      	cmp	r3, #16
 80026c0:	f000 80f1 	beq.w	80028a6 <UART_SetConfig+0x28a>
 80026c4:	d80b      	bhi.n	80026de <UART_SetConfig+0xc2>
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 80f3 	beq.w	80028b2 <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026cc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80026d0:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80026d4:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026d8:	f000 80f8 	beq.w	80028cc <UART_SetConfig+0x2b0>
 80026dc:	e0a8      	b.n	8002830 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026de:	2b20      	cmp	r3, #32
 80026e0:	f000 80c6 	beq.w	8002870 <UART_SetConfig+0x254>
 80026e4:	2b30      	cmp	r3, #48	; 0x30
 80026e6:	d1f1      	bne.n	80026cc <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026e8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80026ec:	f040 80b8 	bne.w	8002860 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80026f0:	6860      	ldr	r0, [r4, #4]
 80026f2:	0843      	lsrs	r3, r0, #1
 80026f4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80026f8:	e0c3      	b.n	8002882 <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026fa:	4b8f      	ldr	r3, [pc, #572]	; (8002938 <UART_SetConfig+0x31c>)
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d11e      	bne.n	800273e <UART_SetConfig+0x122>
 8002700:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8002704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002708:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800270c:	2b40      	cmp	r3, #64	; 0x40
 800270e:	f000 80bb 	beq.w	8002888 <UART_SetConfig+0x26c>
 8002712:	d80a      	bhi.n	800272a <UART_SetConfig+0x10e>
 8002714:	b97b      	cbnz	r3, 8002736 <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002716:	4b82      	ldr	r3, [pc, #520]	; (8002920 <UART_SetConfig+0x304>)
 8002718:	429a      	cmp	r2, r3
 800271a:	f040 80ca 	bne.w	80028b2 <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800271e:	f7ff fa69 	bl	8001bf4 <HAL_RCC_GetPCLK1Freq>
        break;
 8002722:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8002724:	bbb0      	cbnz	r0, 8002794 <UART_SetConfig+0x178>
 8002726:	4602      	mov	r2, r0
 8002728:	e03a      	b.n	80027a0 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800272a:	2b80      	cmp	r3, #128	; 0x80
 800272c:	f000 809d 	beq.w	800286a <UART_SetConfig+0x24e>
 8002730:	2bc0      	cmp	r3, #192	; 0xc0
 8002732:	f000 80b0 	beq.w	8002896 <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002736:	4b7a      	ldr	r3, [pc, #488]	; (8002920 <UART_SetConfig+0x304>)
 8002738:	429a      	cmp	r2, r3
 800273a:	d1c7      	bne.n	80026cc <UART_SetConfig+0xb0>
 800273c:	e02f      	b.n	800279e <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800273e:	4b7f      	ldr	r3, [pc, #508]	; (800293c <UART_SetConfig+0x320>)
 8002740:	429a      	cmp	r2, r3
 8002742:	d111      	bne.n	8002768 <UART_SetConfig+0x14c>
 8002744:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8002748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002754:	f000 8098 	beq.w	8002888 <UART_SetConfig+0x26c>
 8002758:	d9dc      	bls.n	8002714 <UART_SetConfig+0xf8>
 800275a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800275e:	f000 8084 	beq.w	800286a <UART_SetConfig+0x24e>
 8002762:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002766:	e7e4      	b.n	8002732 <UART_SetConfig+0x116>
 8002768:	4b6d      	ldr	r3, [pc, #436]	; (8002920 <UART_SetConfig+0x304>)
 800276a:	429a      	cmp	r2, r3
 800276c:	d1ae      	bne.n	80026cc <UART_SetConfig+0xb0>
 800276e:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8002772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002776:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800277a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800277e:	f000 8083 	beq.w	8002888 <UART_SetConfig+0x26c>
 8002782:	d9c7      	bls.n	8002714 <UART_SetConfig+0xf8>
 8002784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002788:	d06f      	beq.n	800286a <UART_SetConfig+0x24e>
 800278a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800278e:	e7d0      	b.n	8002732 <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002790:	486b      	ldr	r0, [pc, #428]	; (8002940 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8002792:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002794:	6862      	ldr	r2, [r4, #4]
 8002796:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800279a:	4281      	cmp	r1, r0
 800279c:	d905      	bls.n	80027aa <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 800279e:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80027a4:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 80027a6:	4610      	mov	r0, r2
 80027a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80027aa:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80027ae:	d8f6      	bhi.n	800279e <UART_SetConfig+0x182>
        switch (clocksource)
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	d82e      	bhi.n	8002812 <UART_SetConfig+0x1f6>
 80027b4:	e8df f003 	tbb	[pc, r3]
 80027b8:	2d1c2d05 	.word	0x2d1c2d05
 80027bc:	2d2d2d24 	.word	0x2d2d2d24
 80027c0:	27          	.byte	0x27
 80027c1:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80027c2:	f7ff fa17 	bl	8001bf4 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80027c6:	6862      	ldr	r2, [r4, #4]
 80027c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027cc:	0856      	lsrs	r6, r2, #1
 80027ce:	2700      	movs	r7, #0
 80027d0:	fbe1 6700 	umlal	r6, r7, r1, r0
 80027d4:	2300      	movs	r3, #0
 80027d6:	4630      	mov	r0, r6
 80027d8:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80027da:	f7fd fefd 	bl	80005d8 <__aeabi_uldivmod>
            break;
 80027de:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80027e0:	4b58      	ldr	r3, [pc, #352]	; (8002944 <UART_SetConfig+0x328>)
 80027e2:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80027e6:	4299      	cmp	r1, r3
 80027e8:	d8d9      	bhi.n	800279e <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 80027ea:	6823      	ldr	r3, [r4, #0]
 80027ec:	60d8      	str	r0, [r3, #12]
 80027ee:	e7d7      	b.n	80027a0 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80027f0:	4855      	ldr	r0, [pc, #340]	; (8002948 <UART_SetConfig+0x32c>)
 80027f2:	0855      	lsrs	r5, r2, #1
 80027f4:	2300      	movs	r3, #0
 80027f6:	2100      	movs	r1, #0
 80027f8:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80027fa:	f141 0100 	adc.w	r1, r1, #0
 80027fe:	e7ec      	b.n	80027da <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002800:	f7fe feb2 	bl	8001568 <HAL_RCC_GetSysClockFreq>
 8002804:	e7df      	b.n	80027c6 <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002806:	0850      	lsrs	r0, r2, #1
 8002808:	2100      	movs	r1, #0
 800280a:	2300      	movs	r3, #0
 800280c:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8002810:	e7f3      	b.n	80027fa <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8002812:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002814:	2000      	movs	r0, #0
 8002816:	e7e3      	b.n	80027e0 <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002818:	f7ff f9fe 	bl	8001c18 <HAL_RCC_GetPCLK2Freq>
 800281c:	e04e      	b.n	80028bc <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800281e:	f7ff f9e9 	bl	8001bf4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002822:	6862      	ldr	r2, [r4, #4]
 8002824:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002828:	fbb3 f3f2 	udiv	r3, r3, r2
 800282c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800282e:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002830:	f1a3 0010 	sub.w	r0, r3, #16
 8002834:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002838:	4288      	cmp	r0, r1
 800283a:	d8b0      	bhi.n	800279e <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 800283c:	6821      	ldr	r1, [r4, #0]
 800283e:	60cb      	str	r3, [r1, #12]
 8002840:	e7ae      	b.n	80027a0 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002842:	f7ff f9e9 	bl	8001c18 <HAL_RCC_GetPCLK2Freq>
 8002846:	e7ec      	b.n	8002822 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002848:	6860      	ldr	r0, [r4, #4]
 800284a:	0843      	lsrs	r3, r0, #1
 800284c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002850:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002854:	fbb3 f3f0 	udiv	r3, r3, r0
 8002858:	e7e8      	b.n	800282c <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800285a:	f7fe fe85 	bl	8001568 <HAL_RCC_GetSysClockFreq>
 800285e:	e7e0      	b.n	8002822 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002860:	6860      	ldr	r0, [r4, #4]
 8002862:	0843      	lsrs	r3, r0, #1
 8002864:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002868:	e7f4      	b.n	8002854 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 800286a:	4b2d      	ldr	r3, [pc, #180]	; (8002920 <UART_SetConfig+0x304>)
 800286c:	429a      	cmp	r2, r3
 800286e:	d08f      	beq.n	8002790 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002870:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002874:	d1e8      	bne.n	8002848 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002876:	6860      	ldr	r0, [r4, #4]
 8002878:	0843      	lsrs	r3, r0, #1
 800287a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800287e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002882:	fbb3 f3f0 	udiv	r3, r3, r0
 8002886:	e01f      	b.n	80028c8 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002888:	4b25      	ldr	r3, [pc, #148]	; (8002920 <UART_SetConfig+0x304>)
 800288a:	429a      	cmp	r2, r3
 800288c:	d10b      	bne.n	80028a6 <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800288e:	f7fe fe6b 	bl	8001568 <HAL_RCC_GetSysClockFreq>
        break;
 8002892:	2304      	movs	r3, #4
 8002894:	e746      	b.n	8002724 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002896:	4b22      	ldr	r3, [pc, #136]	; (8002920 <UART_SetConfig+0x304>)
 8002898:	429a      	cmp	r2, r3
 800289a:	f47f af25 	bne.w	80026e8 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800289e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 80028a2:	2308      	movs	r3, #8
 80028a4:	e776      	b.n	8002794 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028a6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80028aa:	d1d6      	bne.n	800285a <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80028ac:	f7fe fe5c 	bl	8001568 <HAL_RCC_GetSysClockFreq>
 80028b0:	e004      	b.n	80028bc <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028b2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80028b6:	d1b2      	bne.n	800281e <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80028b8:	f7ff f99c 	bl	8001bf4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80028bc:	6861      	ldr	r1, [r4, #4]
 80028be:	084a      	lsrs	r2, r1, #1
 80028c0:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80028c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80028c8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80028ca:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028cc:	f1a3 0010 	sub.w	r0, r3, #16
 80028d0:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80028d4:	4288      	cmp	r0, r1
 80028d6:	f63f af62 	bhi.w	800279e <UART_SetConfig+0x182>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028da:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 80028de:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028e0:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 80028e4:	430b      	orrs	r3, r1
 80028e6:	60c3      	str	r3, [r0, #12]
 80028e8:	e75a      	b.n	80027a0 <UART_SetConfig+0x184>
    switch (clocksource)
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	f63f af57 	bhi.w	800279e <UART_SetConfig+0x182>
 80028f0:	a201      	add	r2, pc, #4	; (adr r2, 80028f8 <UART_SetConfig+0x2dc>)
 80028f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f6:	bf00      	nop
 80028f8:	0800281f 	.word	0x0800281f
 80028fc:	08002843 	.word	0x08002843
 8002900:	08002849 	.word	0x08002849
 8002904:	0800279f 	.word	0x0800279f
 8002908:	0800285b 	.word	0x0800285b
 800290c:	0800279f 	.word	0x0800279f
 8002910:	0800279f 	.word	0x0800279f
 8002914:	0800279f 	.word	0x0800279f
 8002918:	08002861 	.word	0x08002861
 800291c:	efff69f3 	.word	0xefff69f3
 8002920:	40008000 	.word	0x40008000
 8002924:	40013800 	.word	0x40013800
 8002928:	080058b0 	.word	0x080058b0
 800292c:	40004400 	.word	0x40004400
 8002930:	080058b4 	.word	0x080058b4
 8002934:	40004800 	.word	0x40004800
 8002938:	40004c00 	.word	0x40004c00
 800293c:	40005000 	.word	0x40005000
 8002940:	00f42400 	.word	0x00f42400
 8002944:	000ffcff 	.word	0x000ffcff
 8002948:	f4240000 	.word	0xf4240000

0800294c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800294c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800294e:	07da      	lsls	r2, r3, #31
{
 8002950:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002952:	d506      	bpl.n	8002962 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002954:	6801      	ldr	r1, [r0, #0]
 8002956:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002958:	684a      	ldr	r2, [r1, #4]
 800295a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800295e:	4322      	orrs	r2, r4
 8002960:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002962:	079c      	lsls	r4, r3, #30
 8002964:	d506      	bpl.n	8002974 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002966:	6801      	ldr	r1, [r0, #0]
 8002968:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800296a:	684a      	ldr	r2, [r1, #4]
 800296c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002970:	4322      	orrs	r2, r4
 8002972:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002974:	0759      	lsls	r1, r3, #29
 8002976:	d506      	bpl.n	8002986 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002978:	6801      	ldr	r1, [r0, #0]
 800297a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800297c:	684a      	ldr	r2, [r1, #4]
 800297e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002982:	4322      	orrs	r2, r4
 8002984:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002986:	071a      	lsls	r2, r3, #28
 8002988:	d506      	bpl.n	8002998 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800298a:	6801      	ldr	r1, [r0, #0]
 800298c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800298e:	684a      	ldr	r2, [r1, #4]
 8002990:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002994:	4322      	orrs	r2, r4
 8002996:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002998:	06dc      	lsls	r4, r3, #27
 800299a:	d506      	bpl.n	80029aa <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800299c:	6801      	ldr	r1, [r0, #0]
 800299e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80029a0:	688a      	ldr	r2, [r1, #8]
 80029a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029a6:	4322      	orrs	r2, r4
 80029a8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80029aa:	0699      	lsls	r1, r3, #26
 80029ac:	d506      	bpl.n	80029bc <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80029ae:	6801      	ldr	r1, [r0, #0]
 80029b0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80029b2:	688a      	ldr	r2, [r1, #8]
 80029b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029b8:	4322      	orrs	r2, r4
 80029ba:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80029bc:	065a      	lsls	r2, r3, #25
 80029be:	d50f      	bpl.n	80029e0 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80029c0:	6801      	ldr	r1, [r0, #0]
 80029c2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80029c4:	684a      	ldr	r2, [r1, #4]
 80029c6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80029ca:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80029cc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80029d0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80029d2:	d105      	bne.n	80029e0 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80029d4:	684a      	ldr	r2, [r1, #4]
 80029d6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80029d8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80029dc:	4322      	orrs	r2, r4
 80029de:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80029e0:	061b      	lsls	r3, r3, #24
 80029e2:	d506      	bpl.n	80029f2 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80029e4:	6802      	ldr	r2, [r0, #0]
 80029e6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80029e8:	6853      	ldr	r3, [r2, #4]
 80029ea:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80029ee:	430b      	orrs	r3, r1
 80029f0:	6053      	str	r3, [r2, #4]
 80029f2:	bd10      	pop	{r4, pc}

080029f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029f8:	9d06      	ldr	r5, [sp, #24]
 80029fa:	4604      	mov	r4, r0
 80029fc:	460f      	mov	r7, r1
 80029fe:	4616      	mov	r6, r2
 8002a00:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a02:	6821      	ldr	r1, [r4, #0]
 8002a04:	69ca      	ldr	r2, [r1, #28]
 8002a06:	ea37 0302 	bics.w	r3, r7, r2
 8002a0a:	bf0c      	ite	eq
 8002a0c:	2201      	moveq	r2, #1
 8002a0e:	2200      	movne	r2, #0
 8002a10:	42b2      	cmp	r2, r6
 8002a12:	d002      	beq.n	8002a1a <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002a14:	2000      	movs	r0, #0
}
 8002a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002a1a:	1c6b      	adds	r3, r5, #1
 8002a1c:	d0f2      	beq.n	8002a04 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a1e:	f7fe f88d 	bl	8000b3c <HAL_GetTick>
 8002a22:	eba0 0008 	sub.w	r0, r0, r8
 8002a26:	4285      	cmp	r5, r0
 8002a28:	d301      	bcc.n	8002a2e <UART_WaitOnFlagUntilTimeout+0x3a>
 8002a2a:	2d00      	cmp	r5, #0
 8002a2c:	d1e9      	bne.n	8002a02 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a2e:	6823      	ldr	r3, [r4, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a36:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	f022 0201 	bic.w	r2, r2, #1
 8002a3e:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002a40:	2320      	movs	r3, #32
 8002a42:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002a44:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8002a46:	2300      	movs	r3, #0
 8002a48:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8002a4c:	2003      	movs	r0, #3
 8002a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002a52 <UART_CheckIdleState>:
{
 8002a52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002a54:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a56:	2600      	movs	r6, #0
 8002a58:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002a5a:	f7fe f86f 	bl	8000b3c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a5e:	6823      	ldr	r3, [r4, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002a64:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a66:	d415      	bmi.n	8002a94 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a68:	6823      	ldr	r3, [r4, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	075b      	lsls	r3, r3, #29
 8002a6e:	d50a      	bpl.n	8002a86 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	2200      	movs	r2, #0
 8002a78:	462b      	mov	r3, r5
 8002a7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002a7e:	4620      	mov	r0, r4
 8002a80:	f7ff ffb8 	bl	80029f4 <UART_WaitOnFlagUntilTimeout>
 8002a84:	b990      	cbnz	r0, 8002aac <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8002a86:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002a88:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002a8a:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8002a8c:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8002a90:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 8002a92:	e00c      	b.n	8002aae <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	4632      	mov	r2, r6
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	f7ff ffa6 	bl	80029f4 <UART_WaitOnFlagUntilTimeout>
 8002aa8:	2800      	cmp	r0, #0
 8002aaa:	d0dd      	beq.n	8002a68 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002aac:	2003      	movs	r0, #3
}
 8002aae:	b002      	add	sp, #8
 8002ab0:	bd70      	pop	{r4, r5, r6, pc}

08002ab2 <HAL_UART_Init>:
{
 8002ab2:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002ab4:	4604      	mov	r4, r0
 8002ab6:	b340      	cbz	r0, 8002b0a <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002ab8:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002aba:	b91b      	cbnz	r3, 8002ac4 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8002abc:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002ac0:	f002 f9e0 	bl	8004e84 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002ac4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002ac6:	2324      	movs	r3, #36	; 0x24
 8002ac8:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002aca:	6813      	ldr	r3, [r2, #0]
 8002acc:	f023 0301 	bic.w	r3, r3, #1
 8002ad0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ad2:	4620      	mov	r0, r4
 8002ad4:	f7ff fda2 	bl	800261c <UART_SetConfig>
 8002ad8:	2801      	cmp	r0, #1
 8002ada:	d016      	beq.n	8002b0a <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002adc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ade:	b113      	cbz	r3, 8002ae6 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8002ae0:	4620      	mov	r0, r4
 8002ae2:	f7ff ff33 	bl	800294c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ae6:	6823      	ldr	r3, [r4, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002aee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002af6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002afe:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002b00:	601a      	str	r2, [r3, #0]
}
 8002b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002b06:	f7ff bfa4 	b.w	8002a52 <UART_CheckIdleState>
}
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	bd10      	pop	{r4, pc}
	...

08002b10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002b10:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002b12:	3b01      	subs	r3, #1
 8002b14:	d101      	bne.n	8002b1a <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8002b16:	2003      	movs	r0, #3
 8002b18:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002b1a:	6902      	ldr	r2, [r0, #16]
 8002b1c:	2a00      	cmp	r2, #0
 8002b1e:	daf8      	bge.n	8002b12 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002b20:	6903      	ldr	r3, [r0, #16]
 8002b22:	4a06      	ldr	r2, [pc, #24]	; (8002b3c <USB_CoreReset+0x2c>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8002b2a:	3a01      	subs	r2, #1
 8002b2c:	d0f3      	beq.n	8002b16 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002b2e:	6903      	ldr	r3, [r0, #16]
 8002b30:	f013 0301 	ands.w	r3, r3, #1
 8002b34:	d1f9      	bne.n	8002b2a <USB_CoreReset+0x1a>

  return HAL_OK;
 8002b36:	4618      	mov	r0, r3
}
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	00030d41 	.word	0x00030d41

08002b40 <USB_CoreInit>:
{
 8002b40:	b084      	sub	sp, #16
 8002b42:	b538      	push	{r3, r4, r5, lr}
 8002b44:	ad05      	add	r5, sp, #20
 8002b46:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b4c:	2b01      	cmp	r3, #1
{
 8002b4e:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002b50:	d119      	bne.n	8002b86 <USB_CoreInit+0x46>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b52:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b58:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002b5a:	68c3      	ldr	r3, [r0, #12]
 8002b5c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b64:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002b66:	68c3      	ldr	r3, [r0, #12]
 8002b68:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002b6c:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8002b6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002b70:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002b72:	bf02      	ittt	eq
 8002b74:	68c3      	ldreq	r3, [r0, #12]
 8002b76:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8002b7a:	60c3      	streq	r3, [r0, #12]
}
 8002b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b80:	b004      	add	sp, #16
    ret = USB_CoreReset(USBx);
 8002b82:	f7ff bfc5 	b.w	8002b10 <USB_CoreReset>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002b86:	68c3      	ldr	r3, [r0, #12]
 8002b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b8c:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8002b8e:	f7ff ffbf 	bl	8002b10 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8002b92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002b94:	b93b      	cbnz	r3, 8002ba6 <USB_CoreInit+0x66>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b9c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8002b9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ba2:	b004      	add	sp, #16
 8002ba4:	4770      	bx	lr
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ba6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bac:	e7f6      	b.n	8002b9c <USB_CoreInit+0x5c>

08002bae <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002bae:	6883      	ldr	r3, [r0, #8]
 8002bb0:	f023 0301 	bic.w	r3, r3, #1
 8002bb4:	6083      	str	r3, [r0, #8]
}
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	4770      	bx	lr

08002bba <USB_SetCurrentMode>:
{
 8002bba:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002bbc:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002bbe:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002bc0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002bc4:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002bc6:	d108      	bne.n	8002bda <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002bc8:	68c3      	ldr	r3, [r0, #12]
 8002bca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002bce:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8002bd0:	2032      	movs	r0, #50	; 0x32
 8002bd2:	f7fd ffb9 	bl	8000b48 <HAL_Delay>
  return HAL_OK;
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8002bda:	b919      	cbnz	r1, 8002be4 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002bdc:	68c3      	ldr	r3, [r0, #12]
 8002bde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002be2:	e7f4      	b.n	8002bce <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8002be4:	2001      	movs	r0, #1
}
 8002be6:	bd08      	pop	{r3, pc}

08002be8 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002be8:	0189      	lsls	r1, r1, #6
 8002bea:	f041 0120 	orr.w	r1, r1, #32
 8002bee:	4a06      	ldr	r2, [pc, #24]	; (8002c08 <USB_FlushTxFifo+0x20>)
 8002bf0:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8002bf2:	3a01      	subs	r2, #1
 8002bf4:	d005      	beq.n	8002c02 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002bf6:	6903      	ldr	r3, [r0, #16]
 8002bf8:	f013 0320 	ands.w	r3, r3, #32
 8002bfc:	d1f9      	bne.n	8002bf2 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8002bfe:	4618      	mov	r0, r3
 8002c00:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002c02:	2003      	movs	r0, #3
}
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	00030d41 	.word	0x00030d41

08002c0c <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002c0c:	2310      	movs	r3, #16
 8002c0e:	4a06      	ldr	r2, [pc, #24]	; (8002c28 <USB_FlushRxFifo+0x1c>)
 8002c10:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8002c12:	3a01      	subs	r2, #1
 8002c14:	d005      	beq.n	8002c22 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002c16:	6903      	ldr	r3, [r0, #16]
 8002c18:	f013 0310 	ands.w	r3, r3, #16
 8002c1c:	d1f9      	bne.n	8002c12 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8002c1e:	4618      	mov	r0, r3
 8002c20:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002c22:	2003      	movs	r0, #3
}
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	00030d41 	.word	0x00030d41

08002c2c <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002c2c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002c30:	4319      	orrs	r1, r3
 8002c32:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8002c36:	2000      	movs	r0, #0
 8002c38:	4770      	bx	lr
	...

08002c3c <USB_DevInit>:
{
 8002c3c:	b084      	sub	sp, #16
 8002c3e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c42:	4604      	mov	r4, r0
 8002c44:	a809      	add	r0, sp, #36	; 0x24
 8002c46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8002c4e:	460f      	mov	r7, r1
    USBx->DIEPTXF[i] = 0U;
 8002c50:	4619      	mov	r1, r3
 8002c52:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002c56:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8002c5e:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8002c60:	d1f7      	bne.n	8002c52 <USB_DevInit+0x16>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002c62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 8002c64:	2e00      	cmp	r6, #0
 8002c66:	d162      	bne.n	8002d2e <USB_DevInit+0xf2>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002c68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c6c:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002c6e:	6823      	ldr	r3, [r4, #0]
 8002c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c74:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002c76:	6823      	ldr	r3, [r4, #0]
 8002c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c7c:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002c84:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002c88:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002c8c:	2103      	movs	r1, #3
 8002c8e:	4620      	mov	r0, r4
 8002c90:	f7ff ffcc 	bl	8002c2c <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002c94:	2110      	movs	r1, #16
 8002c96:	4620      	mov	r0, r4
 8002c98:	f7ff ffa6 	bl	8002be8 <USB_FlushTxFifo>
 8002c9c:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002c9e:	4620      	mov	r0, r4
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002ca0:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002ca4:	f7ff ffb2 	bl	8002c0c <USB_FlushRxFifo>
 8002ca8:	2800      	cmp	r0, #0
 8002caa:	d144      	bne.n	8002d36 <USB_DevInit+0xfa>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002cac:	1c08      	adds	r0, r1, #0
 8002cae:	bf18      	it	ne
 8002cb0:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	612b      	str	r3, [r5, #16]
 8002cb6:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DOEPMSK = 0U;
 8002cba:	616b      	str	r3, [r5, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 8002cbc:	4619      	mov	r1, r3
  USBx_DEVICE->DAINTMSK = 0U;
 8002cbe:	61eb      	str	r3, [r5, #28]
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002cc0:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002cc4:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002cc8:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ccc:	42bb      	cmp	r3, r7
 8002cce:	d134      	bne.n	8002d3a <USB_DevInit+0xfe>
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002cd6:	460f      	mov	r7, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002cd8:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002cdc:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002ce0:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ce4:	428b      	cmp	r3, r1
 8002ce6:	d13b      	bne.n	8002d60 <USB_DevInit+0x124>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002ce8:	692b      	ldr	r3, [r5, #16]
 8002cea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cee:	612b      	str	r3, [r5, #16]
  USBx->GINTMSK = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002cf4:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8002cf8:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002cfa:	69a3      	ldr	r3, [r4, #24]
 8002cfc:	f043 0310 	orr.w	r3, r3, #16
 8002d00:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002d02:	69a2      	ldr	r2, [r4, #24]
 8002d04:	4b20      	ldr	r3, [pc, #128]	; (8002d88 <USB_DevInit+0x14c>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8002d0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002d0c:	b11b      	cbz	r3, 8002d16 <USB_DevInit+0xda>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002d0e:	69a3      	ldr	r3, [r4, #24]
 8002d10:	f043 0308 	orr.w	r3, r3, #8
 8002d14:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8002d16:	2e01      	cmp	r6, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002d18:	bf01      	itttt	eq
 8002d1a:	69a3      	ldreq	r3, [r4, #24]
 8002d1c:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8002d20:	f043 0304 	orreq.w	r3, r3, #4
 8002d24:	61a3      	streq	r3, [r4, #24]
}
 8002d26:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d2a:	b004      	add	sp, #16
 8002d2c:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002d2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d32:	63a3      	str	r3, [r4, #56]	; 0x38
 8002d34:	e7a3      	b.n	8002c7e <USB_DevInit+0x42>
 8002d36:	2001      	movs	r0, #1
 8002d38:	e7bb      	b.n	8002cb2 <USB_DevInit+0x76>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002d3a:	f8d2 9000 	ldr.w	r9, [r2]
 8002d3e:	f1b9 0f00 	cmp.w	r9, #0
 8002d42:	da0b      	bge.n	8002d5c <USB_DevInit+0x120>
      if (i == 0U)
 8002d44:	b93b      	cbnz	r3, 8002d56 <USB_DevInit+0x11a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002d46:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002d4a:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d4c:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002d4e:	f8c2 8008 	str.w	r8, [r2, #8]
 8002d52:	3220      	adds	r2, #32
 8002d54:	e7ba      	b.n	8002ccc <USB_DevInit+0x90>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002d56:	f8c2 e000 	str.w	lr, [r2]
 8002d5a:	e7f6      	b.n	8002d4a <USB_DevInit+0x10e>
      USBx_INEP(i)->DIEPCTL = 0U;
 8002d5c:	6011      	str	r1, [r2, #0]
 8002d5e:	e7f4      	b.n	8002d4a <USB_DevInit+0x10e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002d60:	f8d2 9000 	ldr.w	r9, [r2]
 8002d64:	f1b9 0f00 	cmp.w	r9, #0
 8002d68:	da0b      	bge.n	8002d82 <USB_DevInit+0x146>
      if (i == 0U)
 8002d6a:	b939      	cbnz	r1, 8002d7c <USB_DevInit+0x140>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002d6c:	f8c2 c000 	str.w	ip, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002d70:	6117      	str	r7, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d72:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002d74:	f8c2 8008 	str.w	r8, [r2, #8]
 8002d78:	3220      	adds	r2, #32
 8002d7a:	e7b3      	b.n	8002ce4 <USB_DevInit+0xa8>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002d7c:	f8c2 e000 	str.w	lr, [r2]
 8002d80:	e7f6      	b.n	8002d70 <USB_DevInit+0x134>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002d82:	6017      	str	r7, [r2, #0]
 8002d84:	e7f4      	b.n	8002d70 <USB_DevInit+0x134>
 8002d86:	bf00      	nop
 8002d88:	803c3800 	.word	0x803c3800

08002d8c <USB_DevDisconnect>:
{
 8002d8c:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002d8e:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002d92:	f043 0302 	orr.w	r3, r3, #2
 8002d96:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8002d9a:	2003      	movs	r0, #3
 8002d9c:	f7fd fed4 	bl	8000b48 <HAL_Delay>
}
 8002da0:	2000      	movs	r0, #0
 8002da2:	bd08      	pop	{r3, pc}

08002da4 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8002da4:	b570      	push	{r4, r5, r6, lr}
 8002da6:	b08a      	sub	sp, #40	; 0x28
 
  cp.role = role;
  cp.privacy_enabled = privacy_enabled;
  cp.device_name_char_len = device_name_char_len;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8002da8:	2400      	movs	r4, #0
  cp.role = role;
 8002daa:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.privacy_enabled = privacy_enabled;
 8002dae:	f88d 1005 	strb.w	r1, [sp, #5]
  cp.device_name_char_len = device_name_char_len;
 8002db2:	f88d 2006 	strb.w	r2, [sp, #6]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8002db6:	4621      	mov	r1, r4
 8002db8:	2218      	movs	r2, #24
 8002dba:	a804      	add	r0, sp, #16
{
 8002dbc:	461e      	mov	r6, r3
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8002dbe:	9402      	str	r4, [sp, #8]
 8002dc0:	f8cd 400b 	str.w	r4, [sp, #11]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8002dc4:	f002 f9b3 	bl	800512e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8002dc8:	233f      	movs	r3, #63	; 0x3f
 8002dca:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 8002dce:	238a      	movs	r3, #138	; 0x8a
 8002dd0:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 8002dd4:	ab01      	add	r3, sp, #4
 8002dd6:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 8002dd8:	2303      	movs	r3, #3
 8002dda:	9307      	str	r3, [sp, #28]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8002ddc:	ad02      	add	r5, sp, #8
  rq.rparam = &resp;
  rq.rlen = GAP_INIT_RP_SIZE;
 8002dde:	2307      	movs	r3, #7
  
  if (hci_send_req(&rq, FALSE) < 0)
 8002de0:	4621      	mov	r1, r4
 8002de2:	a804      	add	r0, sp, #16
  rq.rparam = &resp;
 8002de4:	9508      	str	r5, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 8002de6:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 8002de8:	f000 fb94 	bl	8003514 <hci_send_req>
 8002dec:	42a0      	cmp	r0, r4
 8002dee:	db15      	blt.n	8002e1c <aci_gap_init_IDB05A1+0x78>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 8002df0:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002df4:	b980      	cbnz	r0, 8002e18 <aci_gap_init_IDB05A1+0x74>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 8002df6:	9a02      	ldr	r2, [sp, #8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8002df8:	f89d 300b 	ldrb.w	r3, [sp, #11]
  *service_handle = btohs(resp.service_handle);
 8002dfc:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8002e00:	8032      	strh	r2, [r6, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8002e02:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8002e06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002e0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002e0c:	8013      	strh	r3, [r2, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8002e0e:	9b03      	ldr	r3, [sp, #12]
 8002e10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002e12:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8002e16:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 8002e18:	b00a      	add	sp, #40	; 0x28
 8002e1a:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 8002e1c:	20ff      	movs	r0, #255	; 0xff
 8002e1e:	e7fb      	b.n	8002e18 <aci_gap_init_IDB05A1+0x74>

08002e20 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8002e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e24:	b08a      	sub	sp, #40	; 0x28
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8002e26:	2400      	movs	r4, #0
  cp.role = role;
 8002e28:	f88d 0004 	strb.w	r0, [sp, #4]
{
 8002e2c:	4688      	mov	r8, r1
 8002e2e:	4616      	mov	r6, r2
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8002e30:	4621      	mov	r1, r4
 8002e32:	2218      	movs	r2, #24
 8002e34:	a804      	add	r0, sp, #16
{
 8002e36:	461d      	mov	r5, r3
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8002e38:	9402      	str	r4, [sp, #8]
 8002e3a:	f8cd 400b 	str.w	r4, [sp, #11]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8002e3e:	f002 f976 	bl	800512e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8002e42:	233f      	movs	r3, #63	; 0x3f
 8002e44:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 8002e48:	238a      	movs	r3, #138	; 0x8a
 8002e4a:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 8002e4e:	ab01      	add	r3, sp, #4
 8002e50:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 8002e52:	2301      	movs	r3, #1
 8002e54:	9307      	str	r3, [sp, #28]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8002e56:	af02      	add	r7, sp, #8
  rq.rparam = &resp;
  rq.rlen = GAP_INIT_RP_SIZE;
 8002e58:	2307      	movs	r3, #7
  
  if (hci_send_req(&rq, FALSE) < 0)
 8002e5a:	4621      	mov	r1, r4
 8002e5c:	a804      	add	r0, sp, #16
  rq.rparam = &resp;
 8002e5e:	9708      	str	r7, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 8002e60:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 8002e62:	f000 fb57 	bl	8003514 <hci_send_req>
 8002e66:	42a0      	cmp	r0, r4
 8002e68:	db15      	blt.n	8002e96 <aci_gap_init_IDB04A1+0x76>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 8002e6a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002e6e:	b978      	cbnz	r0, 8002e90 <aci_gap_init_IDB04A1+0x70>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 8002e70:	9a02      	ldr	r2, [sp, #8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8002e72:	f89d 300c 	ldrb.w	r3, [sp, #12]
  *service_handle = btohs(resp.service_handle);
 8002e76:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8002e7a:	f8a8 2000 	strh.w	r2, [r8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8002e7e:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8002e82:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002e86:	8032      	strh	r2, [r6, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8002e88:	9a03      	ldr	r2, [sp, #12]
 8002e8a:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8002e8e:	802a      	strh	r2, [r5, #0]
  
  return 0;
}
 8002e90:	b00a      	add	sp, #40	; 0x28
 8002e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 8002e96:	20ff      	movs	r0, #255	; 0xff
 8002e98:	e7fa      	b.n	8002e90 <aci_gap_init_IDB04A1+0x70>

08002e9a <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8002e9a:	b570      	push	{r4, r5, r6, lr}
 8002e9c:	b092      	sub	sp, #72	; 0x48
 8002e9e:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8002ea2:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8002ea6:	192e      	adds	r6, r5, r4
 8002ea8:	2e1a      	cmp	r6, #26
 8002eaa:	dc4f      	bgt.n	8002f4c <aci_gap_set_discoverable+0xb2>
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvType;
 8002eac:	f88d 0020 	strb.w	r0, [sp, #32]
  indx++;
  
  AdvIntervMin = htobs(AdvIntervMin);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8002eb0:	f8ad 1021 	strh.w	r1, [sp, #33]	; 0x21
  indx +=  2;
    
  AdvIntervMax = htobs(AdvIntervMax);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8002eb4:	f8ad 2023 	strh.w	r2, [sp, #35]	; 0x23
  indx +=  2;
    
  buffer[indx] = OwnAddrType;
 8002eb8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  indx++;
    
  buffer[indx] = LocalNameLen;
  indx++;
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8002ebc:	462a      	mov	r2, r5
  buffer[indx] = AdvFilterPolicy;
 8002ebe:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8002ec2:	9918      	ldr	r1, [sp, #96]	; 0x60
  buffer[indx] = AdvFilterPolicy;
 8002ec4:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8002ec8:	a80a      	add	r0, sp, #40	; 0x28
  buffer[indx] = LocalNameLen;
 8002eca:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8002ece:	f002 f923 	bl	8005118 <memcpy>
  indx +=  LocalNameLen;
 8002ed2:	f105 0308 	add.w	r3, r5, #8
  
  buffer[indx] = ServiceUUIDLen;
 8002ed6:	aa12      	add	r2, sp, #72	; 0x48
 8002ed8:	fa52 f383 	uxtab	r3, r2, r3
  indx++;
 8002edc:	3509      	adds	r5, #9
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8002ede:	ae08      	add	r6, sp, #32
  indx++;
 8002ee0:	b2ed      	uxtb	r5, r5
  buffer[indx] = ServiceUUIDLen;
 8002ee2:	f803 4c28 	strb.w	r4, [r3, #-40]

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8002ee6:	4622      	mov	r2, r4
 8002ee8:	991a      	ldr	r1, [sp, #104]	; 0x68
 8002eea:	1970      	adds	r0, r6, r5
  indx +=  ServiceUUIDLen;  
 8002eec:	442c      	add	r4, r5
  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8002eee:	f002 f913 	bl	8005118 <memcpy>
  indx +=  ServiceUUIDLen;  
 8002ef2:	b2e4      	uxtb	r4, r4

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8002ef4:	ab12      	add	r3, sp, #72	; 0x48
 8002ef6:	4423      	add	r3, r4
 8002ef8:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8002efc:	f823 2c28 	strh.w	r2, [r3, #-40]
  indx +=  2;
 8002f00:	1ca3      	adds	r3, r4, #2
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8002f02:	aa12      	add	r2, sp, #72	; 0x48
 8002f04:	fa52 f383 	uxtab	r3, r2, r3
 8002f08:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 8002f0c:	f823 2c28 	strh.w	r2, [r3, #-40]
  indx +=  2;    

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8002f10:	2100      	movs	r1, #0
 8002f12:	2218      	movs	r2, #24
 8002f14:	a802      	add	r0, sp, #8
 8002f16:	f002 f90a 	bl	800512e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8002f1a:	233f      	movs	r3, #63	; 0x3f
 8002f1c:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8002f20:	2383      	movs	r3, #131	; 0x83
 8002f22:	f8ad 300a 	strh.w	r3, [sp, #10]
  indx +=  2;    
 8002f26:	3404      	adds	r4, #4
  rq.cparam = (void *)buffer;
  rq.clen = indx;
  rq.rparam = &status;
 8002f28:	f10d 0307 	add.w	r3, sp, #7
 8002f2c:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 8002f2e:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 8002f30:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 8002f32:	2100      	movs	r1, #0
 8002f34:	a802      	add	r0, sp, #8
  rq.cparam = (void *)buffer;
 8002f36:	9604      	str	r6, [sp, #16]
  rq.clen = indx;
 8002f38:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 8002f3a:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8002f3c:	f000 faea 	bl	8003514 <hci_send_req>
 8002f40:	2800      	cmp	r0, #0
 8002f42:	db05      	blt.n	8002f50 <aci_gap_set_discoverable+0xb6>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8002f44:	f89d 0007 	ldrb.w	r0, [sp, #7]
    return status;
  }

  return 0;
}
 8002f48:	b012      	add	sp, #72	; 0x48
 8002f4a:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8002f4c:	2042      	movs	r0, #66	; 0x42
 8002f4e:	e7fb      	b.n	8002f48 <aci_gap_set_discoverable+0xae>
    return BLE_STATUS_TIMEOUT;
 8002f50:	20ff      	movs	r0, #255	; 0xff
 8002f52:	e7f9      	b.n	8002f48 <aci_gap_set_discoverable+0xae>

08002f54 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8002f54:	b510      	push	{r4, lr}
 8002f56:	b08e      	sub	sp, #56	; 0x38
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8002f58:	f88d 001c 	strb.w	r0, [sp, #28]
  cp.oob_enable = oob_enable;
 8002f5c:	f88d 101d 	strb.w	r1, [sp, #29]
  BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8002f60:	f102 0010 	add.w	r0, r2, #16
 8002f64:	f10d 011e 	add.w	r1, sp, #30
 8002f68:	f852 4b04 	ldr.w	r4, [r2], #4
 8002f6c:	f841 4b04 	str.w	r4, [r1], #4
 8002f70:	4282      	cmp	r2, r0
 8002f72:	d1f9      	bne.n	8002f68 <aci_gap_set_auth_requirement+0x14>
  cp.min_encryption_key_size = min_encryption_key_size;
 8002f74:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  cp.max_encryption_key_size = max_encryption_key_size;
 8002f78:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8002f7c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  cp.use_fixed_pin = use_fixed_pin;
 8002f80:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8002f84:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  cp.fixed_pin = htobl(fixed_pin);
 8002f88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002f8a:	f8cd 3031 	str.w	r3, [sp, #49]	; 0x31
  cp.bonding_mode = bonding_mode;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8002f8e:	2218      	movs	r2, #24
  cp.bonding_mode = bonding_mode;
 8002f90:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8002f94:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8002f98:	2100      	movs	r1, #0
 8002f9a:	a801      	add	r0, sp, #4
 8002f9c:	f002 f8c7 	bl	800512e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8002fa0:	233f      	movs	r3, #63	; 0x3f
 8002fa2:	f8ad 3004 	strh.w	r3, [sp, #4]
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8002fa6:	2386      	movs	r3, #134	; 0x86
 8002fa8:	f8ad 3006 	strh.w	r3, [sp, #6]
  rq.cparam = &cp;
 8002fac:	ab07      	add	r3, sp, #28
 8002fae:	9303      	str	r3, [sp, #12]
  rq.clen = sizeof(cp);
 8002fb0:	231a      	movs	r3, #26
 8002fb2:	9304      	str	r3, [sp, #16]
  rq.rparam = &status;
 8002fb4:	f10d 0303 	add.w	r3, sp, #3
 8002fb8:	9305      	str	r3, [sp, #20]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 8002fba:	2100      	movs	r1, #0
  rq.rlen = 1;
 8002fbc:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8002fbe:	a801      	add	r0, sp, #4
  rq.rlen = 1;
 8002fc0:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 8002fc2:	f000 faa7 	bl	8003514 <hci_send_req>
 8002fc6:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8002fc8:	bfac      	ite	ge
 8002fca:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 8002fce:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
    
  return 0;
}
 8002fd0:	b00e      	add	sp, #56	; 0x38
 8002fd2:	bd10      	pop	{r4, pc}

08002fd4 <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 8002fd4:	b530      	push	{r4, r5, lr}
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
    
  if (AdvLen > (sizeof(buffer)-1))
 8002fd6:	281f      	cmp	r0, #31
{
 8002fd8:	b091      	sub	sp, #68	; 0x44
 8002fda:	4604      	mov	r4, r0
  if (AdvLen > (sizeof(buffer)-1))
 8002fdc:	d825      	bhi.n	800302a <aci_gap_update_adv_data+0x56>
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvLen;
 8002fde:	ad10      	add	r5, sp, #64	; 0x40
  indx++;
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 8002fe0:	4602      	mov	r2, r0
  buffer[indx] = AdvLen;
 8002fe2:	f805 0d20 	strb.w	r0, [r5, #-32]!
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 8002fe6:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 8002fea:	f002 f895 	bl	8005118 <memcpy>
  indx +=  AdvLen;
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8002fee:	2218      	movs	r2, #24
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	a802      	add	r0, sp, #8
 8002ff4:	f002 f89b 	bl	800512e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8002ff8:	233f      	movs	r3, #63	; 0x3f
 8002ffa:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 8002ffe:	238e      	movs	r3, #142	; 0x8e
 8003000:	f8ad 300a 	strh.w	r3, [sp, #10]
  indx +=  AdvLen;
 8003004:	3401      	adds	r4, #1
  rq.cparam = (void *)buffer;
  rq.clen = indx;
  rq.rparam = &status;
 8003006:	f10d 0307 	add.w	r3, sp, #7
 800300a:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 800300c:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 800300e:	2301      	movs	r3, #1
    
  if (hci_send_req(&rq, FALSE) < 0)
 8003010:	2100      	movs	r1, #0
 8003012:	a802      	add	r0, sp, #8
  rq.cparam = (void *)buffer;
 8003014:	9504      	str	r5, [sp, #16]
  rq.clen = indx;
 8003016:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 8003018:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800301a:	f000 fa7b 	bl	8003514 <hci_send_req>
 800301e:	2800      	cmp	r0, #0
 8003020:	db05      	blt.n	800302e <aci_gap_update_adv_data+0x5a>
    return BLE_STATUS_TIMEOUT;
    
  return status;
 8003022:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8003026:	b011      	add	sp, #68	; 0x44
 8003028:	bd30      	pop	{r4, r5, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800302a:	2042      	movs	r0, #66	; 0x42
 800302c:	e7fb      	b.n	8003026 <aci_gap_update_adv_data+0x52>
    return BLE_STATUS_TIMEOUT;
 800302e:	20ff      	movs	r0, #255	; 0xff
 8003030:	e7f9      	b.n	8003026 <aci_gap_update_adv_data+0x52>

08003032 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8003032:	b500      	push	{lr}
 8003034:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003036:	2218      	movs	r2, #24
 8003038:	2100      	movs	r1, #0
 800303a:	a802      	add	r0, sp, #8
 800303c:	f002 f877 	bl	800512e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003040:	233f      	movs	r3, #63	; 0x3f
 8003042:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_INIT;
 8003046:	f240 1301 	movw	r3, #257	; 0x101
 800304a:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 800304e:	f10d 0307 	add.w	r3, sp, #7
 8003052:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 8003054:	2100      	movs	r1, #0
  rq.rlen = 1;
 8003056:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8003058:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800305a:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800305c:	f000 fa5a 	bl	8003514 <hci_send_req>
 8003060:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 8003062:	bfac      	ite	ge
 8003064:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8003068:	20ff      	movlt	r0, #255	; 0xff
}
 800306a:	b009      	add	sp, #36	; 0x24
 800306c:	f85d fb04 	ldr.w	pc, [sp], #4

08003070 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8003070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003072:	b08d      	sub	sp, #52	; 0x34
    
  if(service_uuid_type == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 8003074:	2801      	cmp	r0, #1
  buffer[indx] = service_uuid_type;
 8003076:	ae0c      	add	r6, sp, #48	; 0x30
    uuid_len = 16;
 8003078:	bf0c      	ite	eq
 800307a:	2402      	moveq	r4, #2
 800307c:	2410      	movne	r4, #16
  buffer[indx] = service_uuid_type;
 800307e:	f806 0d2c 	strb.w	r0, [r6, #-44]!
{
 8003082:	4617      	mov	r7, r2
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8003084:	f10d 0005 	add.w	r0, sp, #5
 8003088:	4622      	mov	r2, r4
{
 800308a:	461d      	mov	r5, r3
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800308c:	f002 f844 	bl	8005118 <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = service_type;
 8003090:	ab0c      	add	r3, sp, #48	; 0x30
 8003092:	4423      	add	r3, r4
 8003094:	f803 7c2b 	strb.w	r7, [r3, #-43]
  indx++;
    
  buffer[indx] = max_attr_records;
 8003098:	ab0c      	add	r3, sp, #48	; 0x30
 800309a:	191a      	adds	r2, r3, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GATT_ADD_SERV;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 800309c:	3403      	adds	r4, #3
  buffer[indx] = max_attr_records;
 800309e:	f802 5c2a 	strb.w	r5, [r2, #-42]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80030a2:	2500      	movs	r5, #0
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80030a4:	2218      	movs	r2, #24
 80030a6:	4629      	mov	r1, r5
 80030a8:	eb0d 0002 	add.w	r0, sp, r2
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80030ac:	f8ad 5000 	strh.w	r5, [sp]
 80030b0:	f88d 5002 	strb.w	r5, [sp, #2]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80030b4:	f002 f83b 	bl	800512e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80030b8:	233f      	movs	r3, #63	; 0x3f
 80030ba:	f8ad 3018 	strh.w	r3, [sp, #24]
  rq.ocf = OCF_GATT_ADD_SERV;
 80030be:	f44f 7381 	mov.w	r3, #258	; 0x102
 80030c2:	f8ad 301a 	strh.w	r3, [sp, #26]
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_SERV_RP_SIZE;

  if (hci_send_req(&rq, FALSE) < 0)
 80030c6:	4629      	mov	r1, r5
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80030c8:	2303      	movs	r3, #3
  if (hci_send_req(&rq, FALSE) < 0)
 80030ca:	a806      	add	r0, sp, #24
  rq.cparam = (void *)buffer;
 80030cc:	9608      	str	r6, [sp, #32]
  rq.clen = indx;
 80030ce:	9409      	str	r4, [sp, #36]	; 0x24
  rq.rparam = &resp;
 80030d0:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80030d4:	930b      	str	r3, [sp, #44]	; 0x2c
  if (hci_send_req(&rq, FALSE) < 0)
 80030d6:	f000 fa1d 	bl	8003514 <hci_send_req>
 80030da:	42a8      	cmp	r0, r5
 80030dc:	db09      	blt.n	80030f2 <aci_gatt_add_serv+0x82>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 80030de:	f89d 0000 	ldrb.w	r0, [sp]
 80030e2:	b920      	cbnz	r0, 80030ee <aci_gatt_add_serv+0x7e>
    return resp.status;
  }
    
  *serviceHandle = btohs(resp.handle);
 80030e4:	9b00      	ldr	r3, [sp, #0]
 80030e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80030e8:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80030ec:	8013      	strh	r3, [r2, #0]

  return 0;
}
 80030ee:	b00d      	add	sp, #52	; 0x34
 80030f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 80030f2:	20ff      	movs	r0, #255	; 0xff
 80030f4:	e7fb      	b.n	80030ee <aci_gatt_add_serv+0x7e>

080030f6 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 80030f6:	b570      	push	{r4, r5, r6, lr}
    
  if(charUuidType == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 80030f8:	2901      	cmp	r1, #1
{
 80030fa:	b08e      	sub	sp, #56	; 0x38
    uuid_len = 16;
 80030fc:	bf0c      	ite	eq
 80030fe:	2402      	moveq	r4, #2
 8003100:	2410      	movne	r4, #16
{
 8003102:	4616      	mov	r6, r2
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8003104:	f8ad 001c 	strh.w	r0, [sp, #28]
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8003108:	4622      	mov	r2, r4
  buffer[indx] = charUuidType;
 800310a:	f88d 101e 	strb.w	r1, [sp, #30]
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800310e:	f10d 001f 	add.w	r0, sp, #31
 8003112:	4631      	mov	r1, r6
{
 8003114:	461d      	mov	r5, r3
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8003116:	f001 ffff 	bl	8005118 <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = charValueLen;
 800311a:	ab0e      	add	r3, sp, #56	; 0x38
 800311c:	191a      	adds	r2, r3, r4
  indx++;
    
  buffer[indx] = charProperties;
 800311e:	4613      	mov	r3, r2
  buffer[indx] = charValueLen;
 8003120:	f802 5c19 	strb.w	r5, [r2, #-25]
  buffer[indx] = charProperties;
 8003124:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8003128:	f803 2c18 	strb.w	r2, [r3, #-24]
  indx++;
    
  buffer[indx] = secPermissions;
 800312c:	ab0e      	add	r3, sp, #56	; 0x38
 800312e:	4423      	add	r3, r4
 8003130:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8003134:	f803 2c17 	strb.w	r2, [r3, #-23]
  indx++;
    
  buffer[indx] = gattEvtMask;
 8003138:	ab0e      	add	r3, sp, #56	; 0x38
 800313a:	4423      	add	r3, r4
 800313c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8003140:	f803 2c16 	strb.w	r2, [r3, #-22]
  indx++;
    
  buffer[indx] = encryKeySize;
 8003144:	ab0e      	add	r3, sp, #56	; 0x38
 8003146:	4423      	add	r3, r4
 8003148:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800314c:	f803 2c15 	strb.w	r2, [r3, #-21]
  indx++;
    
  buffer[indx] = isVariable;
 8003150:	ab0e      	add	r3, sp, #56	; 0x38
 8003152:	4423      	add	r3, r4
  indx++;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003154:	2500      	movs	r5, #0
  buffer[indx] = isVariable;
 8003156:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 800315a:	f803 2c14 	strb.w	r2, [r3, #-20]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800315e:	4629      	mov	r1, r5
 8003160:	2218      	movs	r2, #24
 8003162:	a801      	add	r0, sp, #4
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003164:	f8ad 5000 	strh.w	r5, [sp]
 8003168:	f88d 5002 	strb.w	r5, [sp, #2]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800316c:	f001 ffdf 	bl	800512e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003170:	233f      	movs	r3, #63	; 0x3f
 8003172:	f8ad 3004 	strh.w	r3, [sp, #4]
  rq.ocf = OCF_GATT_ADD_CHAR;
 8003176:	f44f 7382 	mov.w	r3, #260	; 0x104
 800317a:	f8ad 3006 	strh.w	r3, [sp, #6]
  rq.cparam = (void *)buffer;
 800317e:	ab07      	add	r3, sp, #28
 8003180:	9303      	str	r3, [sp, #12]
  rq.clen = indx;
 8003182:	3409      	adds	r4, #9
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8003184:	2303      	movs	r3, #3

  if (hci_send_req(&rq, FALSE) < 0)
 8003186:	4629      	mov	r1, r5
 8003188:	a801      	add	r0, sp, #4
  rq.clen = indx;
 800318a:	9404      	str	r4, [sp, #16]
  rq.rparam = &resp;
 800318c:	f8cd d014 	str.w	sp, [sp, #20]
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8003190:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 8003192:	f000 f9bf 	bl	8003514 <hci_send_req>
 8003196:	42a8      	cmp	r0, r5
 8003198:	db09      	blt.n	80031ae <aci_gatt_add_char+0xb8>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 800319a:	f89d 0000 	ldrb.w	r0, [sp]
 800319e:	b920      	cbnz	r0, 80031aa <aci_gatt_add_char+0xb4>
    return resp.status;
  }
    
  *charHandle = btohs(resp.handle);
 80031a0:	9b00      	ldr	r3, [sp, #0]
 80031a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80031a4:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80031a8:	8013      	strh	r3, [r2, #0]

  return 0;
}
 80031aa:	b00e      	add	sp, #56	; 0x38
 80031ac:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 80031ae:	20ff      	movs	r0, #255	; 0xff
 80031b0:	e7fb      	b.n	80031aa <aci_gatt_add_char+0xb4>

080031b2 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 80031b2:	b510      	push	{r4, lr}
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 80031b4:	2b7a      	cmp	r3, #122	; 0x7a
{
 80031b6:	b0a8      	sub	sp, #160	; 0xa0
 80031b8:	461c      	mov	r4, r3
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 80031ba:	dc2d      	bgt.n	8003218 <aci_gatt_update_char_value+0x66>
    return BLE_STATUS_INVALID_PARAMS;

  servHandle = htobs(servHandle);
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 80031bc:	f8ad 0020 	strh.w	r0, [sp, #32]
  indx += 2;
    
  charHandle = htobs(charHandle);
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 80031c0:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  indx += 2;
    
  buffer[indx] = charValOffset;
 80031c4:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  indx++;
    
  buffer[indx] = charValueLen;
  indx++;
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 80031c8:	992a      	ldr	r1, [sp, #168]	; 0xa8
  buffer[indx] = charValueLen;
 80031ca:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 80031ce:	461a      	mov	r2, r3
 80031d0:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 80031d4:	f001 ffa0 	bl	8005118 <memcpy>
  indx +=  charValueLen;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80031d8:	2218      	movs	r2, #24
 80031da:	2100      	movs	r1, #0
 80031dc:	a802      	add	r0, sp, #8
 80031de:	f001 ffa6 	bl	800512e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80031e2:	233f      	movs	r3, #63	; 0x3f
 80031e4:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 80031e8:	f44f 7383 	mov.w	r3, #262	; 0x106
 80031ec:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = (void *)buffer;
 80031f0:	ab08      	add	r3, sp, #32
 80031f2:	9304      	str	r3, [sp, #16]
  indx +=  charValueLen;
 80031f4:	3406      	adds	r4, #6
  rq.clen = indx;
  rq.rparam = &status;
 80031f6:	f10d 0307 	add.w	r3, sp, #7
 80031fa:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 80031fc:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 80031fe:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 8003200:	2100      	movs	r1, #0
 8003202:	a802      	add	r0, sp, #8
  rq.clen = indx;
 8003204:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 8003206:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8003208:	f000 f984 	bl	8003514 <hci_send_req>
 800320c:	2800      	cmp	r0, #0
 800320e:	db05      	blt.n	800321c <aci_gatt_update_char_value+0x6a>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8003210:	f89d 0007 	ldrb.w	r0, [sp, #7]
    return status;
  }

  return 0;
}
 8003214:	b028      	add	sp, #160	; 0xa0
 8003216:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8003218:	2042      	movs	r0, #66	; 0x42
 800321a:	e7fb      	b.n	8003214 <aci_gatt_update_char_value+0x62>
    return BLE_STATUS_TIMEOUT;
 800321c:	20ff      	movs	r0, #255	; 0xff
 800321e:	e7f9      	b.n	8003214 <aci_gatt_update_char_value+0x62>

08003220 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 8003220:	b500      	push	{lr}
 8003222:	b089      	sub	sp, #36	; 0x24
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);

    BLUENRG_memset(&rq, 0, sizeof(rq));
 8003224:	2218      	movs	r2, #24
    cp.conn_handle = htobs(conn_handle);
 8003226:	f8ad 0004 	strh.w	r0, [sp, #4]
    BLUENRG_memset(&rq, 0, sizeof(rq));
 800322a:	2100      	movs	r1, #0
 800322c:	a802      	add	r0, sp, #8
 800322e:	f001 ff7e 	bl	800512e <memset>
    rq.ogf = OGF_VENDOR_CMD;
 8003232:	233f      	movs	r3, #63	; 0x3f
 8003234:	f8ad 3008 	strh.w	r3, [sp, #8]
    rq.ocf = OCF_GATT_ALLOW_READ;
 8003238:	f240 1327 	movw	r3, #295	; 0x127
 800323c:	f8ad 300a 	strh.w	r3, [sp, #10]
    rq.cparam = &cp;
 8003240:	ab01      	add	r3, sp, #4
 8003242:	9304      	str	r3, [sp, #16]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 8003244:	2302      	movs	r3, #2
 8003246:	9305      	str	r3, [sp, #20]
    rq.rparam = &status;
 8003248:	f10d 0303 	add.w	r3, sp, #3
 800324c:	9306      	str	r3, [sp, #24]
    rq.rlen = 1;

    if (hci_send_req(&rq, FALSE) < 0)
 800324e:	2100      	movs	r1, #0
    rq.rlen = 1;
 8003250:	2301      	movs	r3, #1
    if (hci_send_req(&rq, FALSE) < 0)
 8003252:	a802      	add	r0, sp, #8
    rq.rlen = 1;
 8003254:	9307      	str	r3, [sp, #28]
    if (hci_send_req(&rq, FALSE) < 0)
 8003256:	f000 f95d 	bl	8003514 <hci_send_req>
 800325a:	2800      	cmp	r0, #0
      return BLE_STATUS_TIMEOUT;

    return status;
 800325c:	bfac      	ite	ge
 800325e:	f89d 0003 	ldrbge.w	r0, [sp, #3]
      return BLE_STATUS_TIMEOUT;
 8003262:	20ff      	movlt	r0, #255	; 0xff
}
 8003264:	b009      	add	sp, #36	; 0x24
 8003266:	f85d fb04 	ldr.w	pc, [sp], #4

0800326a <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 800326a:	b510      	push	{r4, lr}
 800326c:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 800326e:	2c7e      	cmp	r4, #126	; 0x7e
{
 8003270:	b0a8      	sub	sp, #160	; 0xa0
 8003272:	4611      	mov	r1, r2
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8003274:	dc27      	bgt.n	80032c6 <aci_hal_write_config_data+0x5c>
  indx++;
    
  buffer[indx] = len;
  indx++;
        
  BLUENRG_memcpy(buffer + indx, val, len);
 8003276:	4622      	mov	r2, r4
  buffer[indx] = offset;
 8003278:	f88d 0020 	strb.w	r0, [sp, #32]
  BLUENRG_memcpy(buffer + indx, val, len);
 800327c:	f10d 0022 	add.w	r0, sp, #34	; 0x22
  buffer[indx] = len;
 8003280:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  BLUENRG_memcpy(buffer + indx, val, len);
 8003284:	f001 ff48 	bl	8005118 <memcpy>
  indx +=  len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003288:	2218      	movs	r2, #24
 800328a:	2100      	movs	r1, #0
 800328c:	a802      	add	r0, sp, #8
 800328e:	f001 ff4e 	bl	800512e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003292:	233f      	movs	r3, #63	; 0x3f
 8003294:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 8003298:	230c      	movs	r3, #12
 800329a:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = (void *)buffer;
 800329e:	ab08      	add	r3, sp, #32
 80032a0:	9304      	str	r3, [sp, #16]
  indx +=  len;
 80032a2:	3402      	adds	r4, #2
  rq.clen = indx;
  rq.rparam = &status;
 80032a4:	f10d 0307 	add.w	r3, sp, #7
 80032a8:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 80032aa:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 80032ac:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 80032ae:	2100      	movs	r1, #0
 80032b0:	a802      	add	r0, sp, #8
  rq.clen = indx;
 80032b2:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 80032b4:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80032b6:	f000 f92d 	bl	8003514 <hci_send_req>
 80032ba:	2800      	cmp	r0, #0
 80032bc:	db05      	blt.n	80032ca <aci_hal_write_config_data+0x60>
    return BLE_STATUS_TIMEOUT;

  return status;
 80032be:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80032c2:	b028      	add	sp, #160	; 0xa0
 80032c4:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 80032c6:	2042      	movs	r0, #66	; 0x42
 80032c8:	e7fb      	b.n	80032c2 <aci_hal_write_config_data+0x58>
    return BLE_STATUS_TIMEOUT;
 80032ca:	20ff      	movs	r0, #255	; 0xff
 80032cc:	e7f9      	b.n	80032c2 <aci_hal_write_config_data+0x58>

080032ce <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 80032ce:	b500      	push	{lr}
 80032d0:	b089      	sub	sp, #36	; 0x24
  uint8_t status;
    
  cp.en_high_power = en_high_power;
  cp.pa_level = pa_level;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80032d2:	2218      	movs	r2, #24
  cp.en_high_power = en_high_power;
 80032d4:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.pa_level = pa_level;
 80032d8:	f88d 1005 	strb.w	r1, [sp, #5]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80032dc:	a802      	add	r0, sp, #8
 80032de:	2100      	movs	r1, #0
 80032e0:	f001 ff25 	bl	800512e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80032e4:	233f      	movs	r3, #63	; 0x3f
 80032e6:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 80032ea:	230f      	movs	r3, #15
 80032ec:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &cp;
 80032f0:	ab01      	add	r3, sp, #4
 80032f2:	9304      	str	r3, [sp, #16]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 80032f4:	2302      	movs	r3, #2
 80032f6:	9305      	str	r3, [sp, #20]
  rq.rparam = &status;
 80032f8:	f10d 0303 	add.w	r3, sp, #3
 80032fc:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 80032fe:	2100      	movs	r1, #0
  rq.rlen = 1;
 8003300:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8003302:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8003304:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8003306:	f000 f905 	bl	8003514 <hci_send_req>
 800330a:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 800330c:	bfac      	ite	ge
 800330e:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 8003312:	20ff      	movlt	r0, #255	; 0xff
}
 8003314:	b009      	add	sp, #36	; 0x24
 8003316:	f85d fb04 	ldr.w	pc, [sp], #4

0800331a <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800331a:	b530      	push	{r4, r5, lr}
 800331c:	b085      	sub	sp, #20
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800331e:	f10d 030e 	add.w	r3, sp, #14
 8003322:	9300      	str	r3, [sp, #0]
{
 8003324:	4605      	mov	r5, r0
 8003326:	460c      	mov	r4, r1
  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8003328:	ab03      	add	r3, sp, #12
 800332a:	f10d 0209 	add.w	r2, sp, #9
 800332e:	f10d 010a 	add.w	r1, sp, #10
 8003332:	a802      	add	r0, sp, #8
 8003334:	f000 f82f 	bl	8003396 <hci_le_read_local_version>
 8003338:	b2c0      	uxtb	r0, r0
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800333a:	b968      	cbnz	r0, 8003358 <getBlueNRGVersion+0x3e>
    *hwVersion = hci_revision >> 8;
 800333c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8003340:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    *hwVersion = hci_revision >> 8;
 8003344:	0a0b      	lsrs	r3, r1, #8
 8003346:	702b      	strb	r3, [r5, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8003348:	f002 030f 	and.w	r3, r2, #15
 800334c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8003350:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8003354:	4313      	orrs	r3, r2
 8003356:	8023      	strh	r3, [r4, #0]
  }
  return status;
}
 8003358:	b005      	add	sp, #20
 800335a:	bd30      	pop	{r4, r5, pc}

0800335c <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800335c:	b500      	push	{lr}
 800335e:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003360:	2218      	movs	r2, #24
 8003362:	2100      	movs	r1, #0
 8003364:	a802      	add	r0, sp, #8
 8003366:	f001 fee2 	bl	800512e <memset>
  rq.ogf = OGF_HOST_CTL;
 800336a:	2303      	movs	r3, #3
 800336c:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_RESET;
 8003370:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 8003374:	f10d 0307 	add.w	r3, sp, #7
 8003378:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 800337a:	2100      	movs	r1, #0
  rq.rlen = 1;
 800337c:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800337e:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8003380:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8003382:	f000 f8c7 	bl	8003514 <hci_send_req>
 8003386:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  
  return status;  
 8003388:	bfac      	ite	ge
 800338a:	f89d 0007 	ldrbge.w	r0, [sp, #7]
 800338e:	20ff      	movlt	r0, #255	; 0xff
}
 8003390:	b009      	add	sp, #36	; 0x24
 8003392:	f85d fb04 	ldr.w	pc, [sp], #4

08003396 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8003396:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800339a:	2400      	movs	r4, #0
{
 800339c:	b08b      	sub	sp, #44	; 0x2c
 800339e:	4681      	mov	r9, r0
 80033a0:	4688      	mov	r8, r1
 80033a2:	4617      	mov	r7, r2
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80033a4:	4621      	mov	r1, r4
 80033a6:	2218      	movs	r2, #24
 80033a8:	a804      	add	r0, sp, #16
{
 80033aa:	461e      	mov	r6, r3
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80033ac:	9401      	str	r4, [sp, #4]
 80033ae:	9402      	str	r4, [sp, #8]
 80033b0:	f88d 400c 	strb.w	r4, [sp, #12]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80033b4:	f001 febb 	bl	800512e <memset>
  rq.ogf = OGF_INFO_PARAM;
 80033b8:	2304      	movs	r3, #4
 80033ba:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 80033be:	2301      	movs	r3, #1
 80033c0:	f8ad 3012 	strh.w	r3, [sp, #18]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80033c4:	ad01      	add	r5, sp, #4
  rq.cparam = NULL;
  rq.clen = 0;
  rq.rparam = &resp;
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 80033c6:	2309      	movs	r3, #9
  
  if (hci_send_req(&rq, FALSE) < 0)
 80033c8:	4621      	mov	r1, r4
 80033ca:	a804      	add	r0, sp, #16
  rq.rparam = &resp;
 80033cc:	9508      	str	r5, [sp, #32]
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 80033ce:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 80033d0:	f000 f8a0 	bl	8003514 <hci_send_req>
 80033d4:	42a0      	cmp	r0, r4
 80033d6:	db1c      	blt.n	8003412 <hci_le_read_local_version+0x7c>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 80033d8:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80033dc:	b9b0      	cbnz	r0, 800340c <hci_le_read_local_version+0x76>
    return resp.status;
  }
  
  
  *hci_version = resp.hci_version;
 80033de:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80033e2:	f889 3000 	strb.w	r3, [r9]
  *hci_revision =  btohs(resp.hci_revision);
 80033e6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80033ea:	f8a8 3000 	strh.w	r3, [r8]
  *lmp_pal_version = resp.lmp_pal_version;
 80033ee:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80033f2:	703b      	strb	r3, [r7, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 80033f4:	9a02      	ldr	r2, [sp, #8]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 80033f6:	f89d 300b 	ldrb.w	r3, [sp, #11]
  *manufacturer_name = btohs(resp.manufacturer_name);
 80033fa:	f3c2 220f 	ubfx	r2, r2, #8, #16
 80033fe:	8032      	strh	r2, [r6, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8003400:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8003404:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003408:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800340a:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 800340c:	b00b      	add	sp, #44	; 0x2c
 800340e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return BLE_STATUS_TIMEOUT;
 8003412:	20ff      	movs	r0, #255	; 0xff
 8003414:	e7fa      	b.n	800340c <hci_le_read_local_version+0x76>

08003416 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8003416:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003418:	b091      	sub	sp, #68	; 0x44
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800341a:	ad08      	add	r5, sp, #32
 800341c:	2420      	movs	r4, #32
{
 800341e:	4606      	mov	r6, r0
 8003420:	460f      	mov	r7, r1
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8003422:	4622      	mov	r2, r4
 8003424:	2100      	movs	r1, #0
 8003426:	4628      	mov	r0, r5
 8003428:	f001 fe81 	bl	800512e <memset>
  scan_resp_cp.length = length;
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800342c:	2e1f      	cmp	r6, #31
 800342e:	4632      	mov	r2, r6
 8003430:	4639      	mov	r1, r7
 8003432:	bf28      	it	cs
 8003434:	221f      	movcs	r2, #31
 8003436:	f10d 0021 	add.w	r0, sp, #33	; 0x21
  scan_resp_cp.length = length;
 800343a:	f88d 6020 	strb.w	r6, [sp, #32]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800343e:	f001 fe6b 	bl	8005118 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003442:	2218      	movs	r2, #24
 8003444:	2100      	movs	r1, #0
 8003446:	a802      	add	r0, sp, #8
 8003448:	f001 fe71 	bl	800512e <memset>
  rq.ogf = OGF_LE_CTL;
 800344c:	2308      	movs	r3, #8
 800344e:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8003452:	2309      	movs	r3, #9
 8003454:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &scan_resp_cp;
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
  rq.rparam = &status;
 8003458:	f10d 0307 	add.w	r3, sp, #7
 800345c:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 800345e:	2100      	movs	r1, #0
  rq.rlen = 1;
 8003460:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8003462:	a802      	add	r0, sp, #8
  rq.cparam = &scan_resp_cp;
 8003464:	9504      	str	r5, [sp, #16]
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8003466:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 8003468:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800346a:	f000 f853 	bl	8003514 <hci_send_req>
 800346e:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  
  return status;
 8003470:	bfac      	ite	ge
 8003472:	f89d 0007 	ldrbge.w	r0, [sp, #7]
 8003476:	20ff      	movlt	r0, #255	; 0xff
}
 8003478:	b011      	add	sp, #68	; 0x44
 800347a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800347c <move_list.constprop.0>:
  *
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
 800347c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
  {
    list_remove_tail(src_list, &tmp_node);
    list_insert_head(dest_list, tmp_node);
 800347e:	4d08      	ldr	r5, [pc, #32]	; (80034a0 <move_list.constprop.0+0x24>)
static void move_list(tListNode * dest_list, tListNode * src_list)
 8003480:	4604      	mov	r4, r0
  while (!list_is_empty(src_list))
 8003482:	4620      	mov	r0, r4
 8003484:	f000 f959 	bl	800373a <list_is_empty>
 8003488:	b108      	cbz	r0, 800348e <move_list.constprop.0+0x12>
  }
}
 800348a:	b003      	add	sp, #12
 800348c:	bd30      	pop	{r4, r5, pc}
    list_remove_tail(src_list, &tmp_node);
 800348e:	a901      	add	r1, sp, #4
 8003490:	4620      	mov	r0, r4
 8003492:	f000 f991 	bl	80037b8 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8003496:	9901      	ldr	r1, [sp, #4]
 8003498:	4628      	mov	r0, r5
 800349a:	f000 f958 	bl	800374e <list_insert_head>
 800349e:	e7f0      	b.n	8003482 <move_list.constprop.0+0x6>
 80034a0:	20000a50 	.word	0x20000a50

080034a4 <hci_init>:
}

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80034a4:	b570      	push	{r4, r5, r6, lr}
  uint8_t index;
  
  if(UserEvtRx != NULL)
 80034a6:	b108      	cbz	r0, 80034ac <hci_init+0x8>
  {
    hciContext.UserEvtRx = UserEvtRx;
 80034a8:	4b0f      	ldr	r3, [pc, #60]	; (80034e8 <hci_init+0x44>)
 80034aa:	61d8      	str	r0, [r3, #28]
  }
  
  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 80034ac:	f001 f932 	bl	8004714 <hci_tl_lowlevel_init>
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 80034b0:	480e      	ldr	r0, [pc, #56]	; (80034ec <hci_init+0x48>)
  list_init_head(&hciReadPktRxQueue);
  
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 80034b2:	4e0f      	ldr	r6, [pc, #60]	; (80034f0 <hci_init+0x4c>)
 80034b4:	4d0d      	ldr	r5, [pc, #52]	; (80034ec <hci_init+0x48>)
  list_init_head(&hciReadPktPool);
 80034b6:	f000 f93d 	bl	8003734 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 80034ba:	480e      	ldr	r0, [pc, #56]	; (80034f4 <hci_init+0x50>)
 80034bc:	f000 f93a 	bl	8003734 <list_init_head>
 80034c0:	2400      	movs	r4, #0
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 80034c2:	1931      	adds	r1, r6, r4
 80034c4:	4628      	mov	r0, r5
 80034c6:	348c      	adds	r4, #140	; 0x8c
 80034c8:	f000 f94d 	bl	8003766 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80034cc:	f5b4 7f2f 	cmp.w	r4, #700	; 0x2bc
 80034d0:	d1f7      	bne.n	80034c2 <hci_init+0x1e>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 80034d2:	4c05      	ldr	r4, [pc, #20]	; (80034e8 <hci_init+0x44>)
 80034d4:	6822      	ldr	r2, [r4, #0]
 80034d6:	b10a      	cbz	r2, 80034dc <hci_init+0x38>
 80034d8:	2000      	movs	r0, #0
 80034da:	4790      	blx	r2
  if (hciContext.io.Reset) hciContext.io.Reset();
 80034dc:	68a3      	ldr	r3, [r4, #8]
 80034de:	b113      	cbz	r3, 80034e6 <hci_init+0x42>
}
 80034e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (hciContext.io.Reset) hciContext.io.Reset();
 80034e4:	4718      	bx	r3
 80034e6:	bd70      	pop	{r4, r5, r6, pc}
 80034e8:	20000560 	.word	0x20000560
 80034ec:	20000a48 	.word	0x20000a48
 80034f0:	20000580 	.word	0x20000580
 80034f4:	20000a50 	.word	0x20000a50

080034f8 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 80034f8:	4b05      	ldr	r3, [pc, #20]	; (8003510 <hci_register_io_bus+0x18>)
 80034fa:	6802      	ldr	r2, [r0, #0]
 80034fc:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 80034fe:	68c2      	ldr	r2, [r0, #12]
 8003500:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 8003502:	6902      	ldr	r2, [r0, #16]
 8003504:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 8003506:	6982      	ldr	r2, [r0, #24]
 8003508:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;    
 800350a:	6882      	ldr	r2, [r0, #8]
 800350c:	609a      	str	r2, [r3, #8]
 800350e:	4770      	bx	lr
 8003510:	20000560 	.word	0x20000560

08003514 <hci_send_req>:
}

int hci_send_req(struct hci_request* r, BOOL async)
{
 8003514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003518:	b0a5      	sub	sp, #148	; 0x94
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800351a:	8846      	ldrh	r6, [r0, #2]
 800351c:	f8b0 8000 	ldrh.w	r8, [r0]
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8003520:	4f59      	ldr	r7, [pc, #356]	; (8003688 <hci_send_req+0x174>)
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8003522:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8003690 <hci_send_req+0x17c>
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8003526:	2300      	movs	r3, #0
{
 8003528:	4604      	mov	r4, r0
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800352a:	a802      	add	r0, sp, #8
{
 800352c:	460d      	mov	r5, r1
  tHciDataPacket * hciReadPacket = NULL;
 800352e:	9301      	str	r3, [sp, #4]
  list_init_head(&hciTempQueue);
 8003530:	f000 f900 	bl	8003734 <list_init_head>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8003534:	4638      	mov	r0, r7
 8003536:	f000 f951 	bl	80037dc <list_get_size>
 800353a:	2801      	cmp	r0, #1
 800353c:	dd53      	ble.n	80035e6 <hci_send_req+0xd2>
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800353e:	8863      	ldrh	r3, [r4, #2]
 8003540:	8822      	ldrh	r2, [r4, #0]

  free_event_list();
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8003542:	7b27      	ldrb	r7, [r4, #12]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8003544:	68a1      	ldr	r1, [r4, #8]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8003546:	f88d 7013 	strb.w	r7, [sp, #19]
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800354a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800354e:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
  payload[0] = HCI_COMMAND_PKT;
 8003552:	2201      	movs	r2, #1
 8003554:	f88d 2010 	strb.w	r2, [sp, #16]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8003558:	a805      	add	r0, sp, #20
 800355a:	463a      	mov	r2, r7
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800355c:	f8ad 3011 	strh.w	r3, [sp, #17]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8003560:	f001 fdda 	bl	8005118 <memcpy>
  if (hciContext.io.Send)
 8003564:	4b49      	ldr	r3, [pc, #292]	; (800368c <hci_send_req+0x178>)
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	b113      	cbz	r3, 8003570 <hci_send_req+0x5c>
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800356a:	1d39      	adds	r1, r7, #4
 800356c:	a804      	add	r0, sp, #16
 800356e:	4798      	blx	r3
  
  if (async)
 8003570:	2d00      	cmp	r5, #0
 8003572:	d178      	bne.n	8003666 <hci_send_req+0x152>
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8003574:	f3c6 0509 	ubfx	r5, r6, #0, #10
 8003578:	ea45 2588 	orr.w	r5, r5, r8, lsl #10
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800357c:	4e44      	ldr	r6, [pc, #272]	; (8003690 <hci_send_req+0x17c>)
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800357e:	4f42      	ldr	r7, [pc, #264]	; (8003688 <hci_send_req+0x174>)
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8003580:	b2ad      	uxth	r5, r5
    uint32_t tickstart = HAL_GetTick();
 8003582:	f7fd fadb 	bl	8000b3c <HAL_GetTick>
 8003586:	4680      	mov	r8, r0
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8003588:	f7fd fad8 	bl	8000b3c <HAL_GetTick>
 800358c:	eba0 0008 	sub.w	r0, r0, r8
 8003590:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003594:	d84a      	bhi.n	800362c <hci_send_req+0x118>
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8003596:	4630      	mov	r0, r6
 8003598:	f000 f8cf 	bl	800373a <list_is_empty>
 800359c:	2800      	cmp	r0, #0
 800359e:	d1f3      	bne.n	8003588 <hci_send_req+0x74>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 80035a0:	a901      	add	r1, sp, #4
 80035a2:	4630      	mov	r0, r6
 80035a4:	f000 f8f6 	bl	8003794 <list_remove_head>
    hci_hdr = (void *)hciReadPacket->dataBuff;
 80035a8:	9901      	ldr	r1, [sp, #4]
    if (hci_hdr->type == HCI_EVENT_PKT)
 80035aa:	7a0b      	ldrb	r3, [r1, #8]
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d109      	bne.n	80035c4 <hci_send_req+0xb0>
      switch (event_pckt->evt) 
 80035b0:	7a48      	ldrb	r0, [r1, #9]
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 80035b2:	f891 3088 	ldrb.w	r3, [r1, #136]	; 0x88
      switch (event_pckt->evt) 
 80035b6:	280f      	cmp	r0, #15
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 80035b8:	f1a3 0203 	sub.w	r2, r3, #3
      switch (event_pckt->evt) 
 80035bc:	d02c      	beq.n	8003618 <hci_send_req+0x104>
 80035be:	d81b      	bhi.n	80035f8 <hci_send_req+0xe4>
 80035c0:	280e      	cmp	r0, #14
 80035c2:	d052      	beq.n	800366a <hci_send_req+0x156>
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 80035c4:	4638      	mov	r0, r7
 80035c6:	f000 f8b8 	bl	800373a <list_is_empty>
 80035ca:	2800      	cmp	r0, #0
 80035cc:	d058      	beq.n	8003680 <hci_send_req+0x16c>
 80035ce:	4630      	mov	r0, r6
 80035d0:	f000 f8b3 	bl	800373a <list_is_empty>
 80035d4:	2800      	cmp	r0, #0
 80035d6:	d053      	beq.n	8003680 <hci_send_req+0x16c>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80035d8:	9901      	ldr	r1, [sp, #4]
 80035da:	4638      	mov	r0, r7
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 80035dc:	f000 f8c3 	bl	8003766 <list_insert_tail>
      hciReadPacket=NULL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	9301      	str	r3, [sp, #4]
 80035e4:	e7cd      	b.n	8003582 <hci_send_req+0x6e>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 80035e6:	a904      	add	r1, sp, #16
 80035e8:	4648      	mov	r0, r9
 80035ea:	f000 f8d3 	bl	8003794 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 80035ee:	9904      	ldr	r1, [sp, #16]
 80035f0:	4638      	mov	r0, r7
 80035f2:	f000 f8b8 	bl	8003766 <list_insert_tail>
 80035f6:	e79d      	b.n	8003534 <hci_send_req+0x20>
      switch (event_pckt->evt) 
 80035f8:	2810      	cmp	r0, #16
 80035fa:	d017      	beq.n	800362c <hci_send_req+0x118>
 80035fc:	283e      	cmp	r0, #62	; 0x3e
 80035fe:	d1e1      	bne.n	80035c4 <hci_send_req+0xb0>
        if (me->subevent != r->event)
 8003600:	7ac8      	ldrb	r0, [r1, #11]
 8003602:	6862      	ldr	r2, [r4, #4]
 8003604:	4290      	cmp	r0, r2
 8003606:	d1dd      	bne.n	80035c4 <hci_send_req+0xb0>
        len -= 1;
 8003608:	1f1a      	subs	r2, r3, #4
        r->rlen = MIN(len, r->rlen);
 800360a:	6963      	ldr	r3, [r4, #20]
 800360c:	429a      	cmp	r2, r3
 800360e:	bf28      	it	cs
 8003610:	461a      	movcs	r2, r3
 8003612:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8003614:	310c      	adds	r1, #12
 8003616:	e01c      	b.n	8003652 <hci_send_req+0x13e>
        if (cs->opcode != opcode)
 8003618:	f8b1 300d 	ldrh.w	r3, [r1, #13]
 800361c:	42ab      	cmp	r3, r5
 800361e:	d105      	bne.n	800362c <hci_send_req+0x118>
        if (r->event != EVT_CMD_STATUS) {
 8003620:	6863      	ldr	r3, [r4, #4]
 8003622:	2b0f      	cmp	r3, #15
 8003624:	d00f      	beq.n	8003646 <hci_send_req+0x132>
          if (cs->status) {
 8003626:	7acb      	ldrb	r3, [r1, #11]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0cb      	beq.n	80035c4 <hci_send_req+0xb0>
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800362c:	9901      	ldr	r1, [sp, #4]
 800362e:	b111      	cbz	r1, 8003636 <hci_send_req+0x122>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8003630:	4815      	ldr	r0, [pc, #84]	; (8003688 <hci_send_req+0x174>)
 8003632:	f000 f88c 	bl	800374e <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);  
 8003636:	a802      	add	r0, sp, #8
 8003638:	f7ff ff20 	bl	800347c <move_list.constprop.0>
  return -1;
 800363c:	f04f 30ff 	mov.w	r0, #4294967295
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
  move_list(&hciReadPktRxQueue, &hciTempQueue);
  return 0;
}
 8003640:	b025      	add	sp, #148	; 0x94
 8003642:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        r->rlen = MIN(len, r->rlen);
 8003646:	6963      	ldr	r3, [r4, #20]
 8003648:	429a      	cmp	r2, r3
 800364a:	bf28      	it	cs
 800364c:	461a      	movcs	r2, r3
 800364e:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8003650:	310b      	adds	r1, #11
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8003652:	6920      	ldr	r0, [r4, #16]
 8003654:	f001 fd60 	bl	8005118 <memcpy>
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8003658:	480b      	ldr	r0, [pc, #44]	; (8003688 <hci_send_req+0x174>)
 800365a:	9901      	ldr	r1, [sp, #4]
 800365c:	f000 f877 	bl	800374e <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8003660:	a802      	add	r0, sp, #8
 8003662:	f7ff ff0b 	bl	800347c <move_list.constprop.0>
    return 0;
 8003666:	2000      	movs	r0, #0
 8003668:	e7ea      	b.n	8003640 <hci_send_req+0x12c>
        if (cc->opcode != opcode)
 800366a:	898a      	ldrh	r2, [r1, #12]
 800366c:	42aa      	cmp	r2, r5
 800366e:	d1dd      	bne.n	800362c <hci_send_req+0x118>
        len -= EVT_CMD_COMPLETE_SIZE;
 8003670:	1f9a      	subs	r2, r3, #6
        r->rlen = MIN(len, r->rlen);
 8003672:	6963      	ldr	r3, [r4, #20]
 8003674:	429a      	cmp	r2, r3
 8003676:	bf28      	it	cs
 8003678:	461a      	movcs	r2, r3
 800367a:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800367c:	310e      	adds	r1, #14
 800367e:	e7e8      	b.n	8003652 <hci_send_req+0x13e>
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8003680:	9901      	ldr	r1, [sp, #4]
 8003682:	a802      	add	r0, sp, #8
 8003684:	e7aa      	b.n	80035dc <hci_send_req+0xc8>
 8003686:	bf00      	nop
 8003688:	20000a48 	.word	0x20000a48
 800368c:	20000560 	.word	0x20000560
 8003690:	20000a50 	.word	0x20000a50

08003694 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8003694:	b573      	push	{r0, r1, r4, r5, r6, lr}
  tHciDataPacket * hciReadPacket = NULL;
 8003696:	2300      	movs	r3, #0
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8003698:	4c0b      	ldr	r4, [pc, #44]	; (80036c8 <hci_user_evt_proc+0x34>)
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
    if (hciContext.UserEvtRx != NULL)
 800369a:	4d0c      	ldr	r5, [pc, #48]	; (80036cc <hci_user_evt_proc+0x38>)
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
    }
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800369c:	4e0c      	ldr	r6, [pc, #48]	; (80036d0 <hci_user_evt_proc+0x3c>)
  tHciDataPacket * hciReadPacket = NULL;
 800369e:	9301      	str	r3, [sp, #4]
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80036a0:	4620      	mov	r0, r4
 80036a2:	f000 f84a 	bl	800373a <list_is_empty>
 80036a6:	b108      	cbz	r0, 80036ac <hci_user_evt_proc+0x18>
  }
}
 80036a8:	b002      	add	sp, #8
 80036aa:	bd70      	pop	{r4, r5, r6, pc}
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 80036ac:	a901      	add	r1, sp, #4
 80036ae:	4620      	mov	r0, r4
 80036b0:	f000 f870 	bl	8003794 <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 80036b4:	69eb      	ldr	r3, [r5, #28]
 80036b6:	b113      	cbz	r3, 80036be <hci_user_evt_proc+0x2a>
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 80036b8:	9801      	ldr	r0, [sp, #4]
 80036ba:	3008      	adds	r0, #8
 80036bc:	4798      	blx	r3
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80036be:	9901      	ldr	r1, [sp, #4]
 80036c0:	4630      	mov	r0, r6
 80036c2:	f000 f850 	bl	8003766 <list_insert_tail>
 80036c6:	e7eb      	b.n	80036a0 <hci_user_evt_proc+0xc>
 80036c8:	20000a50 	.word	0x20000a50
 80036cc:	20000560 	.word	0x20000560
 80036d0:	20000a48 	.word	0x20000a48

080036d4 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 80036d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  tHciDataPacket * hciReadPacket = NULL;
 80036d6:	2300      	movs	r3, #0
  uint8_t data_len;
  
  int32_t ret = 0;
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 80036d8:	4813      	ldr	r0, [pc, #76]	; (8003728 <hci_notify_asynch_evt+0x54>)
  tHciDataPacket * hciReadPacket = NULL;
 80036da:	9301      	str	r3, [sp, #4]
  if (list_is_empty (&hciReadPktPool) == FALSE)
 80036dc:	f000 f82d 	bl	800373a <list_is_empty>
 80036e0:	b9d8      	cbnz	r0, 800371a <hci_notify_asynch_evt+0x46>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 80036e2:	a901      	add	r1, sp, #4
 80036e4:	4810      	ldr	r0, [pc, #64]	; (8003728 <hci_notify_asynch_evt+0x54>)
 80036e6:	f000 f855 	bl	8003794 <list_remove_head>
    
    if (hciContext.io.Receive)
 80036ea:	4b10      	ldr	r3, [pc, #64]	; (800372c <hci_notify_asynch_evt+0x58>)
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	b193      	cbz	r3, 8003716 <hci_notify_asynch_evt+0x42>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 80036f0:	9801      	ldr	r0, [sp, #4]
 80036f2:	2180      	movs	r1, #128	; 0x80
 80036f4:	3008      	adds	r0, #8
 80036f6:	4798      	blx	r3
 80036f8:	b2c5      	uxtb	r5, r0
      if (data_len > 0)
      {                    
        hciReadPacket->data_len = data_len;
 80036fa:	9901      	ldr	r1, [sp, #4]
      if (data_len > 0)
 80036fc:	b185      	cbz	r5, 8003720 <hci_notify_asynch_evt+0x4c>
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 80036fe:	7a0b      	ldrb	r3, [r1, #8]
        hciReadPacket->data_len = data_len;
 8003700:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8003704:	2b04      	cmp	r3, #4
 8003706:	d10b      	bne.n	8003720 <hci_notify_asynch_evt+0x4c>
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8003708:	7a8b      	ldrb	r3, [r1, #10]
 800370a:	1ee8      	subs	r0, r5, #3
 800370c:	4283      	cmp	r3, r0
 800370e:	d107      	bne.n	8003720 <hci_notify_asynch_evt+0x4c>
        if (verify_packet(hciReadPacket) == 0)
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8003710:	4807      	ldr	r0, [pc, #28]	; (8003730 <hci_notify_asynch_evt+0x5c>)
 8003712:	f000 f828 	bl	8003766 <list_insert_tail>
  int32_t ret = 0;
 8003716:	2000      	movs	r0, #0
 8003718:	e000      	b.n	800371c <hci_notify_asynch_evt+0x48>
      }
    }
  }
  else 
  {
    ret = 1;
 800371a:	2001      	movs	r0, #1
  }
  return ret;

}
 800371c:	b003      	add	sp, #12
 800371e:	bd30      	pop	{r4, r5, pc}
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8003720:	4801      	ldr	r0, [pc, #4]	; (8003728 <hci_notify_asynch_evt+0x54>)
 8003722:	f000 f814 	bl	800374e <list_insert_head>
 8003726:	e7f6      	b.n	8003716 <hci_notify_asynch_evt+0x42>
 8003728:	20000a48 	.word	0x20000a48
 800372c:	20000560 	.word	0x20000560
 8003730:	20000a50 	.word	0x20000a50

08003734 <list_init_head>:
/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 8003734:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;	
 8003736:	6040      	str	r0, [r0, #4]
 8003738:	4770      	bx	lr

0800373a <list_is_empty>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800373a:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800373e:	b672      	cpsid	i
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8003740:	6803      	ldr	r3, [r0, #0]
  {
    return_value = 1;
 8003742:	1a1b      	subs	r3, r3, r0
 8003744:	4258      	negs	r0, r3
 8003746:	4158      	adcs	r0, r3
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003748:	f382 8810 	msr	PRIMASK, r2
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
}
 800374c:	4770      	bx	lr

0800374e <list_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800374e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003752:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8003754:	6802      	ldr	r2, [r0, #0]
 8003756:	600a      	str	r2, [r1, #0]
  node->prev = listHead;
 8003758:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 800375a:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 800375c:	680a      	ldr	r2, [r1, #0]
 800375e:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003760:	f383 8810 	msr	PRIMASK, r3
 8003764:	4770      	bx	lr

08003766 <list_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003766:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800376a:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
  node->prev = listHead->prev;
 800376c:	6842      	ldr	r2, [r0, #4]
 800376e:	604a      	str	r2, [r1, #4]
  node->next = listHead;
 8003770:	6008      	str	r0, [r1, #0]
  listHead->prev = node;
 8003772:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 8003774:	684a      	ldr	r2, [r1, #4]
 8003776:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003778:	f383 8810 	msr	PRIMASK, r3
 800377c:	4770      	bx	lr

0800377e <list_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800377e:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003782:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8003784:	e890 000a 	ldmia.w	r0, {r1, r3}
 8003788:	6019      	str	r1, [r3, #0]
  (node->next)->prev = node->prev;
 800378a:	6801      	ldr	r1, [r0, #0]
 800378c:	604b      	str	r3, [r1, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800378e:	f382 8810 	msr	PRIMASK, r2
 8003792:	4770      	bx	lr

08003794 <list_remove_head>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8003794:	b538      	push	{r3, r4, r5, lr}
 8003796:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003798:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800379c:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800379e:	6803      	ldr	r3, [r0, #0]
 80037a0:	600b      	str	r3, [r1, #0]
  list_remove_node (listHead->next);
 80037a2:	6800      	ldr	r0, [r0, #0]
 80037a4:	f7ff ffeb 	bl	800377e <list_remove_node>
  (*node)->next = NULL;
 80037a8:	6822      	ldr	r2, [r4, #0]
 80037aa:	2300      	movs	r3, #0
 80037ac:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 80037ae:	6822      	ldr	r2, [r4, #0]
 80037b0:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b2:	f385 8810 	msr	PRIMASK, r5
 80037b6:	bd38      	pop	{r3, r4, r5, pc}

080037b8 <list_remove_tail>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 80037b8:	b538      	push	{r3, r4, r5, lr}
 80037ba:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037bc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80037c0:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 80037c2:	6843      	ldr	r3, [r0, #4]
 80037c4:	600b      	str	r3, [r1, #0]
  list_remove_node (listHead->prev);
 80037c6:	6840      	ldr	r0, [r0, #4]
 80037c8:	f7ff ffd9 	bl	800377e <list_remove_node>
  (*node)->next = NULL;
 80037cc:	6822      	ldr	r2, [r4, #0]
 80037ce:	2300      	movs	r3, #0
 80037d0:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 80037d2:	6822      	ldr	r2, [r4, #0]
 80037d4:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d6:	f385 8810 	msr	PRIMASK, r5
 80037da:	bd38      	pop	{r3, r4, r5, pc}

080037dc <list_get_size>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037dc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80037e0:	b672      	cpsid	i

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 80037e2:	6802      	ldr	r2, [r0, #0]
  int size = 0;
 80037e4:	2300      	movs	r3, #0
  while (temp != listHead)
 80037e6:	4282      	cmp	r2, r0
 80037e8:	d103      	bne.n	80037f2 <list_get_size+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ea:	f381 8810 	msr	PRIMASK, r1
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	4770      	bx	lr
    size++;
 80037f2:	3301      	adds	r3, #1
    temp = temp->next;		
 80037f4:	6812      	ldr	r2, [r2, #0]
 80037f6:	e7f6      	b.n	80037e6 <list_get_size+0xa>

080037f8 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02d:%02d:%02d.%03d", ms/(60*60*1000)%24, ms/(60*1000)%60, (ms/1000)%60, ms%1000);
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 80037f8:	b530      	push	{r4, r5, lr}
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80037fa:	2101      	movs	r1, #1
{
 80037fc:	b089      	sub	sp, #36	; 0x24
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80037fe:	2000      	movs	r0, #0
 8003800:	f7fd f8a2 	bl	8000948 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8003804:	2000      	movs	r0, #0
 8003806:	f7fd f86f 	bl	80008e8 <BSP_LED_Init>
  
  BSP_COM_Init(COM1);
 800380a:	2000      	movs	r0, #0
 800380c:	f7fd f912 	bl	8000a34 <BSP_COM_Init>
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8003810:	2000      	movs	r0, #0
 8003812:	f7fd f8e5 	bl	80009e0 <BSP_PB_GetState>
 8003816:	4b37      	ldr	r3, [pc, #220]	; (80038f4 <MX_BlueNRG_MS_Init+0xfc>)
 8003818:	b2c0      	uxtb	r0, r0
 800381a:	7018      	strb	r0, [r3, #0]
  hci_init(user_notify, NULL);
 800381c:	2100      	movs	r1, #0
 800381e:	4836      	ldr	r0, [pc, #216]	; (80038f8 <MX_BlueNRG_MS_Init+0x100>)
 8003820:	f7ff fe40 	bl	80034a4 <hci_init>
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8003824:	f10d 011e 	add.w	r1, sp, #30
 8003828:	f10d 0017 	add.w	r0, sp, #23
 800382c:	f7ff fd75 	bl	800331a <getBlueNRGVersion>
  hci_reset(); 
 8003830:	f7ff fd94 	bl	800335c <hci_reset>
  HAL_Delay(100);
 8003834:	2064      	movs	r0, #100	; 0x64
 8003836:	f7fd f987 	bl	8000b48 <HAL_Delay>
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 800383a:	f89d 4017 	ldrb.w	r4, [sp, #23]
  Set_Random_Address(bdaddr, hwVersion, fwVersion);
 800383e:	f8bd 501e 	ldrh.w	r5, [sp, #30]
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8003842:	2c30      	cmp	r4, #48	; 0x30
    bnrg_expansion_board = IDB05A1;    
 8003844:	bf82      	ittt	hi
 8003846:	4b2d      	ldrhi	r3, [pc, #180]	; (80038fc <MX_BlueNRG_MS_Init+0x104>)
 8003848:	2201      	movhi	r2, #1
 800384a:	701a      	strbhi	r2, [r3, #0]
static void Set_Random_Address(uint8_t* bdaddr, uint8_t hwVersion, uint16_t fwVersion)
{  
  uint8_t i;
  
  /* Initialize a random seed */
  srand (HAL_GetTick() + hwVersion + fwVersion);
 800384c:	f7fd f976 	bl	8000b3c <HAL_GetTick>
 8003850:	442c      	add	r4, r5
 8003852:	4420      	add	r0, r4
 8003854:	f001 fc74 	bl	8005140 <srand>
  
  for (i=0; i<5; i++) {
    bdaddr[i] = rand()&0xFF;
 8003858:	4d29      	ldr	r5, [pc, #164]	; (8003900 <MX_BlueNRG_MS_Init+0x108>)
  srand (HAL_GetTick() + hwVersion + fwVersion);
 800385a:	2400      	movs	r4, #0
    bdaddr[i] = rand()&0xFF;
 800385c:	f001 fc98 	bl	8005190 <rand>
 8003860:	5528      	strb	r0, [r5, r4]
 8003862:	3401      	adds	r4, #1
  for (i=0; i<5; i++) {
 8003864:	2c05      	cmp	r4, #5
 8003866:	d1f9      	bne.n	800385c <MX_BlueNRG_MS_Init+0x64>
  }
  bdaddr[i] = 0xD0; 
 8003868:	23d0      	movs	r3, #208	; 0xd0
 800386a:	716b      	strb	r3, [r5, #5]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800386c:	4a24      	ldr	r2, [pc, #144]	; (8003900 <MX_BlueNRG_MS_Init+0x108>)
 800386e:	2106      	movs	r1, #6
 8003870:	2000      	movs	r0, #0
 8003872:	f7ff fcfa 	bl	800326a <aci_hal_write_config_data>
  ret = aci_gatt_init();    
 8003876:	f7ff fbdc 	bl	8003032 <aci_gatt_init>
  if (bnrg_expansion_board == IDB05A1) {
 800387a:	4b20      	ldr	r3, [pc, #128]	; (80038fc <MX_BlueNRG_MS_Init+0x104>)
 800387c:	7818      	ldrb	r0, [r3, #0]
 800387e:	2801      	cmp	r0, #1
 8003880:	ab07      	add	r3, sp, #28
 8003882:	f10d 021a 	add.w	r2, sp, #26
 8003886:	d113      	bne.n	80038b0 <MX_BlueNRG_MS_Init+0xb8>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8003888:	e88d 000c 	stmia.w	sp, {r2, r3}
 800388c:	2100      	movs	r1, #0
 800388e:	ab06      	add	r3, sp, #24
 8003890:	2207      	movs	r2, #7
 8003892:	f7ff fa87 	bl	8002da4 <aci_gap_init_IDB05A1>
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8003896:	4b1b      	ldr	r3, [pc, #108]	; (8003904 <MX_BlueNRG_MS_Init+0x10c>)
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	2200      	movs	r2, #0
 800389c:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 80038a0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 80038a4:	2307      	movs	r3, #7
 80038a6:	f7ff fc84 	bl	80031b2 <aci_gatt_update_char_value>
  if (ret) {
 80038aa:	4602      	mov	r2, r0
 80038ac:	b128      	cbz	r0, 80038ba <MX_BlueNRG_MS_Init+0xc2>
 80038ae:	e7fe      	b.n	80038ae <MX_BlueNRG_MS_Init+0xb6>
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80038b0:	a906      	add	r1, sp, #24
 80038b2:	2001      	movs	r0, #1
 80038b4:	f7ff fab4 	bl	8002e20 <aci_gap_init_IDB04A1>
 80038b8:	e7ed      	b.n	8003896 <MX_BlueNRG_MS_Init+0x9e>
  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 80038ba:	4b13      	ldr	r3, [pc, #76]	; (8003908 <MX_BlueNRG_MS_Init+0x110>)
 80038bc:	9302      	str	r3, [sp, #8]
 80038be:	2401      	movs	r4, #1
 80038c0:	2310      	movs	r3, #16
 80038c2:	9001      	str	r0, [sp, #4]
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	4601      	mov	r1, r0
 80038c8:	9403      	str	r4, [sp, #12]
 80038ca:	2307      	movs	r3, #7
 80038cc:	4620      	mov	r0, r4
 80038ce:	f7ff fb41 	bl	8002f54 <aci_gap_set_auth_requirement>
  if (ret) {
 80038d2:	b100      	cbz	r0, 80038d6 <MX_BlueNRG_MS_Init+0xde>
 80038d4:	e7fe      	b.n	80038d4 <MX_BlueNRG_MS_Init+0xdc>
  ret = Add_HWServW2ST_Service();
 80038d6:	f000 fbdd 	bl	8004094 <Add_HWServW2ST_Service>
  if(ret == BLE_STATUS_SUCCESS) {
 80038da:	b100      	cbz	r0, 80038de <MX_BlueNRG_MS_Init+0xe6>
 80038dc:	e7fe      	b.n	80038dc <MX_BlueNRG_MS_Init+0xe4>
  ret = Add_SWServW2ST_Service();
 80038de:	f000 fc7b 	bl	80041d8 <Add_SWServW2ST_Service>
  if(ret == BLE_STATUS_SUCCESS) {
 80038e2:	b100      	cbz	r0, 80038e6 <MX_BlueNRG_MS_Init+0xee>
 80038e4:	e7fe      	b.n	80038e4 <MX_BlueNRG_MS_Init+0xec>
  ret = aci_hal_set_tx_power_level(1,4);
 80038e6:	2104      	movs	r1, #4
 80038e8:	4620      	mov	r0, r4
 80038ea:	f7ff fcf0 	bl	80032ce <aci_hal_set_tx_power_level>
}
 80038ee:	b009      	add	sp, #36	; 0x24
 80038f0:	bd30      	pop	{r4, r5, pc}
 80038f2:	bf00      	nop
 80038f4:	20000014 	.word	0x20000014
 80038f8:	08004ccd 	.word	0x08004ccd
 80038fc:	2000083c 	.word	0x2000083c
 8003900:	20000a58 	.word	0x20000a58
 8003904:	080058c1 	.word	0x080058c1
 8003908:	0001e240 	.word	0x0001e240

0800390c <MX_BlueNRG_MS_Process>:
{
 800390c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (set_connectable)
 8003910:	4cd6      	ldr	r4, [pc, #856]	; (8003c6c <MX_BlueNRG_MS_Process+0x360>)
 8003912:	7823      	ldrb	r3, [r4, #0]
 8003914:	b11b      	cbz	r3, 800391e <MX_BlueNRG_MS_Process+0x12>
    Set_DeviceConnectable();
 8003916:	f001 f959 	bl	8004bcc <Set_DeviceConnectable>
    set_connectable = FALSE;
 800391a:	2300      	movs	r3, #0
 800391c:	7023      	strb	r3, [r4, #0]
    BSP_LED_Toggle(LED2);
 800391e:	2000      	movs	r0, #0
 8003920:	f7fd f808 	bl	8000934 <BSP_LED_Toggle>
    if (connected)
 8003924:	4bd2      	ldr	r3, [pc, #840]	; (8003c70 <MX_BlueNRG_MS_Process+0x364>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 81fd 	beq.w	8003d28 <MX_BlueNRG_MS_Process+0x41c>
      srand(HAL_GetTick());
 800392e:	f7fd f905 	bl	8000b3c <HAL_GetTick>
 8003932:	f001 fc05 	bl	8005140 <srand>
  *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
 8003936:	f001 fc2b 	bl	8005190 <rand>
 800393a:	4604      	mov	r4, r0
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 800393c:	f001 fc28 	bl	8005190 <rand>
  *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
 8003940:	2605      	movs	r6, #5
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 8003942:	4605      	mov	r5, r0
  *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
 8003944:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003948:	2300      	movs	r3, #0
 800394a:	fb84 0106 	smull	r0, r1, r4, r6
 800394e:	f7fc fe43 	bl	80005d8 <__aeabi_uldivmod>
 8003952:	f7fc fdbb 	bl	80004cc <__aeabi_ul2d>
 8003956:	2200      	movs	r2, #0
 8003958:	4bc6      	ldr	r3, [pc, #792]	; (8003c74 <MX_BlueNRG_MS_Process+0x368>)
 800395a:	f7fc fc3b 	bl	80001d4 <__adddf3>
 800395e:	f7fc fdeb 	bl	8000538 <__aeabi_d2f>
      BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8003962:	ee07 0a10 	vmov	s14, r0
 8003966:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800396a:	ee67 7a27 	vmul.f32	s15, s14, s15
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 800396e:	2050      	movs	r0, #80	; 0x50
      BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8003970:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 8003974:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003978:	2300      	movs	r3, #0
 800397a:	fb85 0100 	smull	r0, r1, r5, r0
      BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 800397e:	edcd 7a00 	vstr	s15, [sp]
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 8003982:	f7fc fe29 	bl	80005d8 <__aeabi_uldivmod>
 8003986:	f7fc fda1 	bl	80004cc <__aeabi_ul2d>
 800398a:	4bbb      	ldr	r3, [pc, #748]	; (8003c78 <MX_BlueNRG_MS_Process+0x36c>)
      BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 800398c:	f9bd 4000 	ldrsh.w	r4, [sp]
 8003990:	4dba      	ldr	r5, [pc, #744]	; (8003c7c <MX_BlueNRG_MS_Process+0x370>)
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 8003992:	2200      	movs	r2, #0
 8003994:	f7fc fc1e 	bl	80001d4 <__adddf3>
 8003998:	f7fc fdce 	bl	8000538 <__aeabi_d2f>
      BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 800399c:	eddf 7ab8 	vldr	s15, [pc, #736]	; 8003c80 <MX_BlueNRG_MS_Process+0x374>
 80039a0:	ee07 0a10 	vmov	s14, r0
 80039a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a8:	4621      	mov	r1, r4
 80039aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039ae:	f04f 0803 	mov.w	r8, #3
 80039b2:	ee17 0a90 	vmov	r0, s15
 80039b6:	f000 fcff 	bl	80043b8 <BlueMS_Environmental_Update>
      Set_Random_Motion_Values(counter);
 80039ba:	4bb2      	ldr	r3, [pc, #712]	; (8003c84 <MX_BlueNRG_MS_Process+0x378>)
 80039bc:	681c      	ldr	r4, [r3, #0]
  if (cnt < 20) {
 80039be:	2c13      	cmp	r4, #19
 80039c0:	f200 81b7 	bhi.w	8003d32 <MX_BlueNRG_MS_Process+0x426>
    x_axes.AXIS_X +=  (10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80039c4:	f001 fbe4 	bl	8005190 <rand>
 80039c8:	fba4 8908 	umull	r8, r9, r4, r8
 80039cc:	ea4f 7be0 	mov.w	fp, r0, asr #31
 80039d0:	fb00 f309 	mul.w	r3, r0, r9
 80039d4:	fb08 330b 	mla	r3, r8, fp, r3
 80039d8:	fba0 0108 	umull	r0, r1, r0, r8
 80039dc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80039e0:	4419      	add	r1, r3
 80039e2:	2300      	movs	r3, #0
 80039e4:	f7fc fdf8 	bl	80005d8 <__aeabi_uldivmod>
 80039e8:	682b      	ldr	r3, [r5, #0]
 80039ea:	300a      	adds	r0, #10
 80039ec:	4403      	add	r3, r0
 80039ee:	602b      	str	r3, [r5, #0]
    x_axes.AXIS_Y += -(10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80039f0:	f001 fbce 	bl	8005190 <rand>
 80039f4:	fba4 6706 	umull	r6, r7, r4, r6
 80039f8:	ea4f 7be0 	mov.w	fp, r0, asr #31
 80039fc:	fb00 f307 	mul.w	r3, r0, r7
 8003a00:	fb06 330b 	mla	r3, r6, fp, r3
 8003a04:	fba0 0106 	umull	r0, r1, r0, r6
 8003a08:	4419      	add	r1, r3
 8003a0a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f7fc fde2 	bl	80005d8 <__aeabi_uldivmod>
 8003a14:	686b      	ldr	r3, [r5, #4]
 8003a16:	f06f 0209 	mvn.w	r2, #9
 8003a1a:	1a10      	subs	r0, r2, r0
 8003a1c:	4403      	add	r3, r0
 8003a1e:	606b      	str	r3, [r5, #4]
    x_axes.AXIS_Z +=  (10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8003a20:	f001 fbb6 	bl	8005190 <rand>
 8003a24:	2307      	movs	r3, #7
 8003a26:	fba4 2303 	umull	r2, r3, r4, r3
 8003a2a:	e9cd 2300 	strd	r2, r3, [sp]
 8003a2e:	9b01      	ldr	r3, [sp, #4]
 8003a30:	9a00      	ldr	r2, [sp, #0]
 8003a32:	ea4f 7be0 	mov.w	fp, r0, asr #31
 8003a36:	4343      	muls	r3, r0
 8003a38:	fb02 330b 	mla	r3, r2, fp, r3
 8003a3c:	fba0 0102 	umull	r0, r1, r0, r2
 8003a40:	4419      	add	r1, r3
 8003a42:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003a46:	2300      	movs	r3, #0
 8003a48:	f7fc fdc6 	bl	80005d8 <__aeabi_uldivmod>
 8003a4c:	68ab      	ldr	r3, [r5, #8]
    g_axes.AXIS_X +=  (100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8003a4e:	f8df b240 	ldr.w	fp, [pc, #576]	; 8003c90 <MX_BlueNRG_MS_Process+0x384>
    x_axes.AXIS_Z +=  (10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8003a52:	300a      	adds	r0, #10
 8003a54:	4403      	add	r3, r0
 8003a56:	60ab      	str	r3, [r5, #8]
    g_axes.AXIS_X +=  (100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8003a58:	f001 fb9a 	bl	8005190 <rand>
 8003a5c:	1922      	adds	r2, r4, r4
 8003a5e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	415b      	adcs	r3, r3
 8003a68:	4351      	muls	r1, r2
 8003a6a:	fb00 1303 	mla	r3, r0, r3, r1
 8003a6e:	fba2 0100 	umull	r0, r1, r2, r0
 8003a72:	4419      	add	r1, r3
 8003a74:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f7fc fdad 	bl	80005d8 <__aeabi_uldivmod>
 8003a7e:	f8db 3000 	ldr.w	r3, [fp]
 8003a82:	3064      	adds	r0, #100	; 0x64
 8003a84:	4403      	add	r3, r0
 8003a86:	f8cb 3000 	str.w	r3, [fp]
    g_axes.AXIS_Y += -(100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8003a8a:	f001 fb81 	bl	8005190 <rand>
 8003a8e:	0fa5      	lsrs	r5, r4, #30
 8003a90:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8003a94:	17c2      	asrs	r2, r0, #31
 8003a96:	fb00 f305 	mul.w	r3, r0, r5
 8003a9a:	fb0a 3302 	mla	r3, sl, r2, r3
 8003a9e:	fba0 010a 	umull	r0, r1, r0, sl
 8003aa2:	4419      	add	r1, r3
 8003aa4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f7fc fd95 	bl	80005d8 <__aeabi_uldivmod>
 8003aae:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003ab2:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8003ab6:	1a10      	subs	r0, r2, r0
 8003ab8:	4403      	add	r3, r0
 8003aba:	f8cb 3004 	str.w	r3, [fp, #4]
    g_axes.AXIS_Z +=  (100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8003abe:	f001 fb67 	bl	8005190 <rand>
 8003ac2:	4686      	mov	lr, r0
 8003ac4:	2006      	movs	r0, #6
 8003ac6:	fba4 2300 	umull	r2, r3, r4, r0
 8003aca:	4670      	mov	r0, lr
 8003acc:	17c1      	asrs	r1, r0, #31
 8003ace:	4351      	muls	r1, r2
 8003ad0:	fb0e 1303 	mla	r3, lr, r3, r1
 8003ad4:	fba2 010e 	umull	r0, r1, r2, lr
 8003ad8:	4419      	add	r1, r3
 8003ada:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003ade:	2300      	movs	r3, #0
 8003ae0:	f7fc fd7a 	bl	80005d8 <__aeabi_uldivmod>
 8003ae4:	f8db 3008 	ldr.w	r3, [fp, #8]
    m_axes.AXIS_X +=  (3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8003ae8:	4c67      	ldr	r4, [pc, #412]	; (8003c88 <MX_BlueNRG_MS_Process+0x37c>)
    g_axes.AXIS_Z +=  (100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8003aea:	3064      	adds	r0, #100	; 0x64
 8003aec:	4403      	add	r3, r0
 8003aee:	f8cb 3008 	str.w	r3, [fp, #8]
    m_axes.AXIS_X +=  (3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8003af2:	f001 fb4d 	bl	8005190 <rand>
 8003af6:	17c2      	asrs	r2, r0, #31
 8003af8:	fb00 f309 	mul.w	r3, r0, r9
 8003afc:	fb08 3302 	mla	r3, r8, r2, r3
 8003b00:	fba0 0108 	umull	r0, r1, r0, r8
 8003b04:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003b08:	4419      	add	r1, r3
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	f7fc fd64 	bl	80005d8 <__aeabi_uldivmod>
 8003b10:	6823      	ldr	r3, [r4, #0]
 8003b12:	3003      	adds	r0, #3
 8003b14:	4403      	add	r3, r0
 8003b16:	6023      	str	r3, [r4, #0]
    m_axes.AXIS_Y += -(3  + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8003b18:	f001 fb3a 	bl	8005190 <rand>
 8003b1c:	17c3      	asrs	r3, r0, #31
 8003b1e:	4345      	muls	r5, r0
 8003b20:	fb0a 5503 	mla	r5, sl, r3, r5
 8003b24:	fba0 010a 	umull	r0, r1, r0, sl
 8003b28:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	4429      	add	r1, r5
 8003b30:	f7fc fd52 	bl	80005d8 <__aeabi_uldivmod>
 8003b34:	6863      	ldr	r3, [r4, #4]
 8003b36:	f06f 0202 	mvn.w	r2, #2
 8003b3a:	1a10      	subs	r0, r2, r0
 8003b3c:	4403      	add	r3, r0
 8003b3e:	6063      	str	r3, [r4, #4]
    m_axes.AXIS_Z +=  (3  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8003b40:	f001 fb26 	bl	8005190 <rand>
 8003b44:	ea4f 7be0 	mov.w	fp, r0, asr #31
 8003b48:	fb00 f307 	mul.w	r3, r0, r7
 8003b4c:	fb06 330b 	mla	r3, r6, fp, r3
 8003b50:	fba0 0106 	umull	r0, r1, r0, r6
 8003b54:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003b58:	4419      	add	r1, r3
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	f7fc fd3c 	bl	80005d8 <__aeabi_uldivmod>
 8003b60:	68a3      	ldr	r3, [r4, #8]
 8003b62:	3003      	adds	r0, #3
 8003b64:	4403      	add	r3, r0
 8003b66:	60a3      	str	r3, [r4, #8]
    q_axes.AXIS_X -= (100  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8003b68:	f001 fb12 	bl	8005190 <rand>
 8003b6c:	fb00 f309 	mul.w	r3, r0, r9
 8003b70:	ea4f 7be0 	mov.w	fp, r0, asr #31
 8003b74:	fb08 330b 	mla	r3, r8, fp, r3
 8003b78:	fba0 0108 	umull	r0, r1, r0, r8
 8003b7c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003b80:	4419      	add	r1, r3
 8003b82:	2300      	movs	r3, #0
 8003b84:	f7fc fd28 	bl	80005d8 <__aeabi_uldivmod>
 8003b88:	4c40      	ldr	r4, [pc, #256]	; (8003c8c <MX_BlueNRG_MS_Process+0x380>)
 8003b8a:	6823      	ldr	r3, [r4, #0]
 8003b8c:	3064      	adds	r0, #100	; 0x64
 8003b8e:	1a1b      	subs	r3, r3, r0
 8003b90:	6023      	str	r3, [r4, #0]
    q_axes.AXIS_Y += (100  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8003b92:	f001 fafd 	bl	8005190 <rand>
 8003b96:	fb00 f307 	mul.w	r3, r0, r7
 8003b9a:	ea4f 79e0 	mov.w	r9, r0, asr #31
 8003b9e:	fb06 3309 	mla	r3, r6, r9, r3
 8003ba2:	fba0 0106 	umull	r0, r1, r0, r6
 8003ba6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003baa:	4419      	add	r1, r3
 8003bac:	2300      	movs	r3, #0
 8003bae:	f7fc fd13 	bl	80005d8 <__aeabi_uldivmod>
 8003bb2:	6863      	ldr	r3, [r4, #4]
 8003bb4:	3064      	adds	r0, #100	; 0x64
 8003bb6:	4403      	add	r3, r0
 8003bb8:	6063      	str	r3, [r4, #4]
    q_axes.AXIS_Z -= (100  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8003bba:	f001 fae9 	bl	8005190 <rand>
 8003bbe:	9b01      	ldr	r3, [sp, #4]
 8003bc0:	9a00      	ldr	r2, [sp, #0]
 8003bc2:	17c7      	asrs	r7, r0, #31
 8003bc4:	4343      	muls	r3, r0
 8003bc6:	fb02 3307 	mla	r3, r2, r7, r3
 8003bca:	fba0 0102 	umull	r0, r1, r0, r2
 8003bce:	4419      	add	r1, r3
 8003bd0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f7fc fcff 	bl	80005d8 <__aeabi_uldivmod>
 8003bda:	68a3      	ldr	r3, [r4, #8]
 8003bdc:	3064      	adds	r0, #100	; 0x64
 8003bde:	1a1b      	subs	r3, r3, r0
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8003be0:	60a3      	str	r3, [r4, #8]
      Acc_Update(&x_axes, &g_axes, &m_axes);      
 8003be2:	4c26      	ldr	r4, [pc, #152]	; (8003c7c <MX_BlueNRG_MS_Process+0x370>)
 8003be4:	4a28      	ldr	r2, [pc, #160]	; (8003c88 <MX_BlueNRG_MS_Process+0x37c>)
 8003be6:	492a      	ldr	r1, [pc, #168]	; (8003c90 <MX_BlueNRG_MS_Process+0x384>)
 8003be8:	4620      	mov	r0, r4
 8003bea:	f000 fb57 	bl	800429c <Acc_Update>
      Quat_Update(&q_axes);
 8003bee:	4827      	ldr	r0, [pc, #156]	; (8003c8c <MX_BlueNRG_MS_Process+0x380>)
 8003bf0:	f000 fbb0 	bl	8004354 <Quat_Update>
      counter ++;
 8003bf4:	4a23      	ldr	r2, [pc, #140]	; (8003c84 <MX_BlueNRG_MS_Process+0x378>)
 8003bf6:	6813      	ldr	r3, [r2, #0]
 8003bf8:	3301      	adds	r3, #1
      if (counter == 40) {
 8003bfa:	2b28      	cmp	r3, #40	; 0x28
      counter ++;
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	4620      	mov	r0, r4
      if (counter == 40) {
 8003c00:	f040 808e 	bne.w	8003d20 <MX_BlueNRG_MS_Process+0x414>
        counter = 0;
 8003c04:	2300      	movs	r3, #0
 8003c06:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 8003c08:	6823      	ldr	r3, [r4, #0]
 8003c0a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003c0e:	fb93 f2f1 	sdiv	r2, r3, r1
 8003c12:	fb01 3212 	mls	r2, r1, r2, r3
 8003c16:	2a00      	cmp	r2, #0
 8003c18:	f040 819c 	bne.w	8003f54 <MX_BlueNRG_MS_Process+0x648>
 8003c1c:	425b      	negs	r3, r3
 8003c1e:	6003      	str	r3, [r0, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 8003c20:	6843      	ldr	r3, [r0, #4]
 8003c22:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003c26:	fb93 f2f1 	sdiv	r2, r3, r1
 8003c2a:	fb01 3212 	mls	r2, r1, r2, r3
 8003c2e:	2a00      	cmp	r2, #0
 8003c30:	f040 8192 	bne.w	8003f58 <MX_BlueNRG_MS_Process+0x64c>
 8003c34:	425b      	negs	r3, r3
 8003c36:	6043      	str	r3, [r0, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 8003c38:	6883      	ldr	r3, [r0, #8]
 8003c3a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003c3e:	fb93 f2f1 	sdiv	r2, r3, r1
 8003c42:	fb01 3212 	mls	r2, r1, r2, r3
 8003c46:	2a00      	cmp	r2, #0
 8003c48:	f040 8189 	bne.w	8003f5e <MX_BlueNRG_MS_Process+0x652>
 8003c4c:	425b      	negs	r3, r3
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 8003c4e:	4a10      	ldr	r2, [pc, #64]	; (8003c90 <MX_BlueNRG_MS_Process+0x384>)
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 8003c50:	6083      	str	r3, [r0, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 8003c52:	6813      	ldr	r3, [r2, #0]
 8003c54:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003c58:	fb93 f1f0 	sdiv	r1, r3, r0
 8003c5c:	fb00 3111 	mls	r1, r0, r1, r3
 8003c60:	2900      	cmp	r1, #0
 8003c62:	f040 817e 	bne.w	8003f62 <MX_BlueNRG_MS_Process+0x656>
 8003c66:	425b      	negs	r3, r3
 8003c68:	e014      	b.n	8003c94 <MX_BlueNRG_MS_Process+0x388>
 8003c6a:	bf00      	nop
 8003c6c:	20000015 	.word	0x20000015
 8003c70:	2000094c 	.word	0x2000094c
 8003c74:	403b0000 	.word	0x403b0000
 8003c78:	408f4000 	.word	0x408f4000
 8003c7c:	2000097c 	.word	0x2000097c
 8003c80:	42c80000 	.word	0x42c80000
 8003c84:	20000840 	.word	0x20000840
 8003c88:	20000960 	.word	0x20000960
 8003c8c:	20000970 	.word	0x20000970
 8003c90:	20000954 	.word	0x20000954
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 8003c94:	6854      	ldr	r4, [r2, #4]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 8003c96:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 8003c98:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003c9c:	fb94 f1f0 	sdiv	r1, r4, r0
 8003ca0:	fb00 4111 	mls	r1, r0, r1, r4
 8003ca4:	2900      	cmp	r1, #0
 8003ca6:	f040 815e 	bne.w	8003f66 <MX_BlueNRG_MS_Process+0x65a>
 8003caa:	4264      	negs	r4, r4
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 8003cac:	6890      	ldr	r0, [r2, #8]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 8003cae:	6054      	str	r4, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 8003cb0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003cb4:	fb90 f5f1 	sdiv	r5, r0, r1
 8003cb8:	fb01 0515 	mls	r5, r1, r5, r0
 8003cbc:	2d00      	cmp	r5, #0
 8003cbe:	f040 8155 	bne.w	8003f6c <MX_BlueNRG_MS_Process+0x660>
 8003cc2:	4240      	negs	r0, r0
 8003cc4:	6090      	str	r0, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 8003cc6:	fb93 f2f1 	sdiv	r2, r3, r1
 8003cca:	fb01 3112 	mls	r1, r1, r2, r3
 8003cce:	4aac      	ldr	r2, [pc, #688]	; (8003f80 <MX_BlueNRG_MS_Process+0x674>)
 8003cd0:	2900      	cmp	r1, #0
 8003cd2:	f040 814d 	bne.w	8003f70 <MX_BlueNRG_MS_Process+0x664>
 8003cd6:	6813      	ldr	r3, [r2, #0]
 8003cd8:	425b      	negs	r3, r3
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 8003cda:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 8003cde:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 8003ce0:	fb94 f3f1 	sdiv	r3, r4, r1
 8003ce4:	fb01 4413 	mls	r4, r1, r3, r4
 8003ce8:	2c00      	cmp	r4, #0
 8003cea:	f040 8143 	bne.w	8003f74 <MX_BlueNRG_MS_Process+0x668>
 8003cee:	6853      	ldr	r3, [r2, #4]
 8003cf0:	425b      	negs	r3, r3
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 8003cf2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 8003cf6:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 8003cf8:	fb90 f3f1 	sdiv	r3, r0, r1
 8003cfc:	fb01 0013 	mls	r0, r1, r3, r0
 8003d00:	2800      	cmp	r0, #0
 8003d02:	f040 813a 	bne.w	8003f7a <MX_BlueNRG_MS_Process+0x66e>
 8003d06:	6893      	ldr	r3, [r2, #8]
 8003d08:	425b      	negs	r3, r3
 8003d0a:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 8003d0c:	4b9d      	ldr	r3, [pc, #628]	; (8003f84 <MX_BlueNRG_MS_Process+0x678>)
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	4252      	negs	r2, r2
 8003d12:	601a      	str	r2, [r3, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	4252      	negs	r2, r2
 8003d18:	605a      	str	r2, [r3, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	4252      	negs	r2, r2
 8003d1e:	609a      	str	r2, [r3, #8]
      HAL_Delay(1000); /* wait 1 sec before sending new data */
 8003d20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d24:	f7fc ff10 	bl	8000b48 <HAL_Delay>
}
 8003d28:	b003      	add	sp, #12
 8003d2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hci_user_evt_proc();
 8003d2e:	f7ff bcb1 	b.w	8003694 <hci_user_evt_proc>
    x_axes.AXIS_X += -(10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8003d32:	f001 fa2d 	bl	8005190 <rand>
 8003d36:	fba4 ab08 	umull	sl, fp, r4, r8
 8003d3a:	ea4f 79e0 	mov.w	r9, r0, asr #31
 8003d3e:	fb00 f30b 	mul.w	r3, r0, fp
 8003d42:	fb0a 3309 	mla	r3, sl, r9, r3
 8003d46:	fba0 010a 	umull	r0, r1, r0, sl
 8003d4a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003d4e:	4419      	add	r1, r3
 8003d50:	2300      	movs	r3, #0
 8003d52:	f7fc fc41 	bl	80005d8 <__aeabi_uldivmod>
 8003d56:	f06f 0809 	mvn.w	r8, #9
 8003d5a:	682b      	ldr	r3, [r5, #0]
 8003d5c:	ebb8 0000 	subs.w	r0, r8, r0
 8003d60:	4403      	add	r3, r0
 8003d62:	602b      	str	r3, [r5, #0]
    x_axes.AXIS_Y +=  (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8003d64:	f001 fa14 	bl	8005190 <rand>
 8003d68:	fba4 2306 	umull	r2, r3, r4, r6
 8003d6c:	e9cd 2300 	strd	r2, r3, [sp]
 8003d70:	9b01      	ldr	r3, [sp, #4]
 8003d72:	9a00      	ldr	r2, [sp, #0]
 8003d74:	17c7      	asrs	r7, r0, #31
 8003d76:	4343      	muls	r3, r0
 8003d78:	fb02 3307 	mla	r3, r2, r7, r3
 8003d7c:	fba0 0102 	umull	r0, r1, r0, r2
 8003d80:	4419      	add	r1, r3
 8003d82:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003d86:	2300      	movs	r3, #0
 8003d88:	f7fc fc26 	bl	80005d8 <__aeabi_uldivmod>
 8003d8c:	686b      	ldr	r3, [r5, #4]
 8003d8e:	300a      	adds	r0, #10
 8003d90:	4403      	add	r3, r0
 8003d92:	606b      	str	r3, [r5, #4]
    x_axes.AXIS_Z += -(10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8003d94:	f001 f9fc 	bl	8005190 <rand>
 8003d98:	2607      	movs	r6, #7
 8003d9a:	fba4 6706 	umull	r6, r7, r4, r6
 8003d9e:	17c2      	asrs	r2, r0, #31
 8003da0:	fb00 f307 	mul.w	r3, r0, r7
 8003da4:	fb06 3302 	mla	r3, r6, r2, r3
 8003da8:	fba0 0106 	umull	r0, r1, r0, r6
 8003dac:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003db0:	4419      	add	r1, r3
 8003db2:	2300      	movs	r3, #0
 8003db4:	f7fc fc10 	bl	80005d8 <__aeabi_uldivmod>
 8003db8:	68ab      	ldr	r3, [r5, #8]
 8003dba:	ebb8 0000 	subs.w	r0, r8, r0
 8003dbe:	4418      	add	r0, r3
 8003dc0:	60a8      	str	r0, [r5, #8]
    g_axes.AXIS_X += -(100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8003dc2:	f001 f9e5 	bl	8005190 <rand>
 8003dc6:	1922      	adds	r2, r4, r4
 8003dc8:	ea4f 79e0 	mov.w	r9, r0, asr #31
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	fb02 f109 	mul.w	r1, r2, r9
 8003dd4:	415b      	adcs	r3, r3
 8003dd6:	fb00 1303 	mla	r3, r0, r3, r1
 8003dda:	fba2 0100 	umull	r0, r1, r2, r0
 8003dde:	4419      	add	r1, r3
 8003de0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003de4:	2300      	movs	r3, #0
 8003de6:	4d68      	ldr	r5, [pc, #416]	; (8003f88 <MX_BlueNRG_MS_Process+0x67c>)
 8003de8:	f7fc fbf6 	bl	80005d8 <__aeabi_uldivmod>
 8003dec:	f06f 0863 	mvn.w	r8, #99	; 0x63
 8003df0:	682b      	ldr	r3, [r5, #0]
 8003df2:	ebb8 0000 	subs.w	r0, r8, r0
 8003df6:	4403      	add	r3, r0
 8003df8:	602b      	str	r3, [r5, #0]
    g_axes.AXIS_Y +=  (100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8003dfa:	f001 f9c9 	bl	8005190 <rand>
 8003dfe:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003e02:	17c2      	asrs	r2, r0, #31
 8003e04:	fb0e f202 	mul.w	r2, lr, r2
 8003e08:	0fa3      	lsrs	r3, r4, #30
 8003e0a:	fb00 2303 	mla	r3, r0, r3, r2
 8003e0e:	fbae 0100 	umull	r0, r1, lr, r0
 8003e12:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003e16:	4419      	add	r1, r3
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f7fc fbdd 	bl	80005d8 <__aeabi_uldivmod>
 8003e1e:	686b      	ldr	r3, [r5, #4]
 8003e20:	3064      	adds	r0, #100	; 0x64
 8003e22:	4403      	add	r3, r0
 8003e24:	606b      	str	r3, [r5, #4]
    g_axes.AXIS_Z += -(100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8003e26:	f001 f9b3 	bl	8005190 <rand>
 8003e2a:	4686      	mov	lr, r0
 8003e2c:	2006      	movs	r0, #6
 8003e2e:	fba4 2300 	umull	r2, r3, r4, r0
 8003e32:	4670      	mov	r0, lr
 8003e34:	17c1      	asrs	r1, r0, #31
 8003e36:	4351      	muls	r1, r2
 8003e38:	fb0e 1303 	mla	r3, lr, r3, r1
 8003e3c:	fba2 010e 	umull	r0, r1, r2, lr
 8003e40:	4419      	add	r1, r3
 8003e42:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003e46:	2300      	movs	r3, #0
 8003e48:	f7fc fbc6 	bl	80005d8 <__aeabi_uldivmod>
 8003e4c:	68ab      	ldr	r3, [r5, #8]
 8003e4e:	ebb8 0000 	subs.w	r0, r8, r0
 8003e52:	4418      	add	r0, r3
 8003e54:	60a8      	str	r0, [r5, #8]
    m_axes.AXIS_X += -(3  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8003e56:	f001 f99b 	bl	8005190 <rand>
 8003e5a:	ea4f 79e0 	mov.w	r9, r0, asr #31
 8003e5e:	fb00 f307 	mul.w	r3, r0, r7
 8003e62:	fb06 3309 	mla	r3, r6, r9, r3
 8003e66:	fba0 0106 	umull	r0, r1, r0, r6
 8003e6a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003e6e:	4419      	add	r1, r3
 8003e70:	2300      	movs	r3, #0
 8003e72:	f7fc fbb1 	bl	80005d8 <__aeabi_uldivmod>
 8003e76:	4d42      	ldr	r5, [pc, #264]	; (8003f80 <MX_BlueNRG_MS_Process+0x674>)
 8003e78:	f06f 0802 	mvn.w	r8, #2
 8003e7c:	682b      	ldr	r3, [r5, #0]
 8003e7e:	ebb8 0000 	subs.w	r0, r8, r0
 8003e82:	4403      	add	r3, r0
 8003e84:	602b      	str	r3, [r5, #0]
    m_axes.AXIS_Y +=  (3  + ((uint64_t)rand()*9*cnt)/RAND_MAX);
 8003e86:	f001 f983 	bl	8005190 <rand>
 8003e8a:	4686      	mov	lr, r0
 8003e8c:	2009      	movs	r0, #9
 8003e8e:	fba4 2300 	umull	r2, r3, r4, r0
 8003e92:	4670      	mov	r0, lr
 8003e94:	17c1      	asrs	r1, r0, #31
 8003e96:	4351      	muls	r1, r2
 8003e98:	fb0e 1303 	mla	r3, lr, r3, r1
 8003e9c:	fba2 010e 	umull	r0, r1, r2, lr
 8003ea0:	4419      	add	r1, r3
 8003ea2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f7fc fb96 	bl	80005d8 <__aeabi_uldivmod>
 8003eac:	686b      	ldr	r3, [r5, #4]
 8003eae:	3003      	adds	r0, #3
 8003eb0:	4403      	add	r3, r0
 8003eb2:	606b      	str	r3, [r5, #4]
    m_axes.AXIS_Z += -(3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8003eb4:	f001 f96c 	bl	8005190 <rand>
 8003eb8:	17c4      	asrs	r4, r0, #31
 8003eba:	fb00 f30b 	mul.w	r3, r0, fp
 8003ebe:	fb0a 3304 	mla	r3, sl, r4, r3
 8003ec2:	fba0 010a 	umull	r0, r1, r0, sl
 8003ec6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003eca:	4419      	add	r1, r3
 8003ecc:	2300      	movs	r3, #0
 8003ece:	f7fc fb83 	bl	80005d8 <__aeabi_uldivmod>
 8003ed2:	68ab      	ldr	r3, [r5, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8003ed4:	4c2b      	ldr	r4, [pc, #172]	; (8003f84 <MX_BlueNRG_MS_Process+0x678>)
    m_axes.AXIS_Z += -(3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8003ed6:	ebb8 0000 	subs.w	r0, r8, r0
 8003eda:	4418      	add	r0, r3
 8003edc:	60a8      	str	r0, [r5, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8003ede:	f001 f957 	bl	8005190 <rand>
 8003ee2:	fb00 f307 	mul.w	r3, r0, r7
 8003ee6:	ea4f 79e0 	mov.w	r9, r0, asr #31
 8003eea:	fb06 3309 	mla	r3, r6, r9, r3
 8003eee:	fba0 0106 	umull	r0, r1, r0, r6
 8003ef2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003ef6:	4419      	add	r1, r3
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f7fc fb6d 	bl	80005d8 <__aeabi_uldivmod>
 8003efe:	6823      	ldr	r3, [r4, #0]
 8003f00:	30c8      	adds	r0, #200	; 0xc8
 8003f02:	4403      	add	r3, r0
 8003f04:	6023      	str	r3, [r4, #0]
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8003f06:	f001 f943 	bl	8005190 <rand>
 8003f0a:	17c7      	asrs	r7, r0, #31
 8003f0c:	fb00 f30b 	mul.w	r3, r0, fp
 8003f10:	fb0a 3307 	mla	r3, sl, r7, r3
 8003f14:	fba0 010a 	umull	r0, r1, r0, sl
 8003f18:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003f1c:	4419      	add	r1, r3
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f7fc fb5a 	bl	80005d8 <__aeabi_uldivmod>
 8003f24:	6863      	ldr	r3, [r4, #4]
 8003f26:	3096      	adds	r0, #150	; 0x96
 8003f28:	1a1b      	subs	r3, r3, r0
 8003f2a:	6063      	str	r3, [r4, #4]
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8003f2c:	f001 f930 	bl	8005190 <rand>
 8003f30:	9b01      	ldr	r3, [sp, #4]
 8003f32:	9a00      	ldr	r2, [sp, #0]
 8003f34:	17c7      	asrs	r7, r0, #31
 8003f36:	4343      	muls	r3, r0
 8003f38:	fb02 3307 	mla	r3, r2, r7, r3
 8003f3c:	fba0 0102 	umull	r0, r1, r0, r2
 8003f40:	4419      	add	r1, r3
 8003f42:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003f46:	2300      	movs	r3, #0
 8003f48:	f7fc fb46 	bl	80005d8 <__aeabi_uldivmod>
 8003f4c:	68a3      	ldr	r3, [r4, #8]
 8003f4e:	300a      	adds	r0, #10
 8003f50:	4403      	add	r3, r0
 8003f52:	e645      	b.n	8003be0 <MX_BlueNRG_MS_Process+0x2d4>
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 8003f54:	230a      	movs	r3, #10
 8003f56:	e662      	b.n	8003c1e <MX_BlueNRG_MS_Process+0x312>
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 8003f58:	f06f 0309 	mvn.w	r3, #9
 8003f5c:	e66b      	b.n	8003c36 <MX_BlueNRG_MS_Process+0x32a>
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 8003f5e:	230a      	movs	r3, #10
 8003f60:	e675      	b.n	8003c4e <MX_BlueNRG_MS_Process+0x342>
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 8003f62:	2364      	movs	r3, #100	; 0x64
 8003f64:	e696      	b.n	8003c94 <MX_BlueNRG_MS_Process+0x388>
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 8003f66:	f06f 0463 	mvn.w	r4, #99	; 0x63
 8003f6a:	e69f      	b.n	8003cac <MX_BlueNRG_MS_Process+0x3a0>
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 8003f6c:	2064      	movs	r0, #100	; 0x64
 8003f6e:	e6a9      	b.n	8003cc4 <MX_BlueNRG_MS_Process+0x3b8>
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e6b2      	b.n	8003cda <MX_BlueNRG_MS_Process+0x3ce>
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 8003f74:	f06f 0302 	mvn.w	r3, #2
 8003f78:	e6bb      	b.n	8003cf2 <MX_BlueNRG_MS_Process+0x3e6>
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e6c5      	b.n	8003d0a <MX_BlueNRG_MS_Process+0x3fe>
 8003f7e:	bf00      	nop
 8003f80:	20000960 	.word	0x20000960
 8003f84:	20000970 	.word	0x20000970
 8003f88:	20000954 	.word	0x20000954

08003f8c <BSP_PB_Callback>:
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
  /* Set the User Button flag */
  user_button_pressed = 1;
 8003f8c:	4b01      	ldr	r3, [pc, #4]	; (8003f94 <BSP_PB_Callback+0x8>)
 8003f8e:	2201      	movs	r2, #1
 8003f90:	701a      	strb	r2, [r3, #0]
 8003f92:	4770      	bx	lr
 8003f94:	20000844 	.word	0x20000844

08003f98 <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8003f98:	b507      	push	{r0, r1, r2, lr}
  int32_t ret = BSP_ERROR_NONE;
  
  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 8003f9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	460a      	mov	r2, r1
 8003fa4:	4601      	mov	r1, r0
 8003fa6:	4805      	ldr	r0, [pc, #20]	; (8003fbc <BSP_SPI3_SendRecv+0x24>)
 8003fa8:	f7fe fa10 	bl	80023cc <HAL_SPI_TransmitReceive>
 8003fac:	2800      	cmp	r0, #0
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
  }
  return ret;
}
 8003fae:	bf14      	ite	ne
 8003fb0:	f06f 0005 	mvnne.w	r0, #5
 8003fb4:	2000      	moveq	r0, #0
 8003fb6:	b003      	add	sp, #12
 8003fb8:	f85d fb04 	ldr.w	pc, [sp], #4
 8003fbc:	20000a60 	.word	0x20000a60

08003fc0 <BSP_GetTick>:
/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
  return HAL_GetTick();
 8003fc0:	f7fc bdbc 	b.w	8000b3c <HAL_GetTick>

08003fc4 <MX_SPI3_Init>:

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI3;
  hspi->Init.Mode = SPI_MODE_MASTER;
 8003fc4:	4a0f      	ldr	r2, [pc, #60]	; (8004004 <MX_SPI3_Init+0x40>)
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8003fc6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
{
 8003fca:	b508      	push	{r3, lr}
  hspi->Init.Mode = SPI_MODE_MASTER;
 8003fcc:	f44f 7c82 	mov.w	ip, #260	; 0x104
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8003fd0:	60c1      	str	r1, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 8003fd2:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi->Init.Mode = SPI_MODE_MASTER;
 8003fd6:	e880 1004 	stmia.w	r0, {r2, ip}
  hspi->Init.NSS = SPI_NSS_SOFT;
 8003fda:	6181      	str	r1, [r0, #24]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8003fdc:	2200      	movs	r2, #0
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003fde:	2118      	movs	r1, #24
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8003fe0:	6082      	str	r2, [r0, #8]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fe2:	6102      	str	r2, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8003fe4:	6142      	str	r2, [r0, #20]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003fe6:	61c1      	str	r1, [r0, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003fe8:	6202      	str	r2, [r0, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi->Init.CRCPolynomial = 7;
 8003fea:	2107      	movs	r1, #7
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8003fec:	6242      	str	r2, [r0, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fee:	6282      	str	r2, [r0, #40]	; 0x28
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003ff0:	6302      	str	r2, [r0, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003ff2:	2208      	movs	r2, #8
  hspi->Init.CRCPolynomial = 7;
 8003ff4:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003ff6:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8003ff8:	f7fe f997 	bl	800232a <HAL_SPI_Init>
  {
    ret = HAL_ERROR;
  }

  return ret;
}
 8003ffc:	3000      	adds	r0, #0
 8003ffe:	bf18      	it	ne
 8004000:	2001      	movne	r0, #1
 8004002:	bd08      	pop	{r3, pc}
 8004004:	40003c00 	.word	0x40003c00

08004008 <BSP_SPI3_Init>:
{
 8004008:	b510      	push	{r4, lr}
  if(SPI3InitCounter++ == 0)
 800400a:	4a1d      	ldr	r2, [pc, #116]	; (8004080 <BSP_SPI3_Init+0x78>)
  hspi3.Instance  = SPI3;
 800400c:	4c1d      	ldr	r4, [pc, #116]	; (8004084 <BSP_SPI3_Init+0x7c>)
 800400e:	4b1e      	ldr	r3, [pc, #120]	; (8004088 <BSP_SPI3_Init+0x80>)
 8004010:	6023      	str	r3, [r4, #0]
  if(SPI3InitCounter++ == 0)
 8004012:	6813      	ldr	r3, [r2, #0]
 8004014:	1c59      	adds	r1, r3, #1
{
 8004016:	b088      	sub	sp, #32
  if(SPI3InitCounter++ == 0)
 8004018:	6011      	str	r1, [r2, #0]
 800401a:	b113      	cbz	r3, 8004022 <BSP_SPI3_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 800401c:	2000      	movs	r0, #0
}
 800401e:	b008      	add	sp, #32
 8004020:	bd10      	pop	{r4, pc}
	if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET) 
 8004022:	4620      	mov	r0, r4
 8004024:	f7fe faf6 	bl	8002614 <HAL_SPI_GetState>
 8004028:	2800      	cmp	r0, #0
 800402a:	d1f7      	bne.n	800401c <BSP_SPI3_Init+0x14>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800402c:	4b17      	ldr	r3, [pc, #92]	; (800408c <BSP_SPI3_Init+0x84>)
 800402e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004030:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004034:	659a      	str	r2, [r3, #88]	; 0x58
 8004036:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004038:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800403c:	9201      	str	r2, [sp, #4]
 800403e:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004040:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004042:	f042 0204 	orr.w	r2, r2, #4
 8004046:	64da      	str	r2, [r3, #76]	; 0x4c
 8004048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404a:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	9302      	str	r3, [sp, #8]
 8004052:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004054:	480e      	ldr	r0, [pc, #56]	; (8004090 <BSP_SPI3_Init+0x88>)
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8004056:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800405a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800405c:	2302      	movs	r3, #2
 800405e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004060:	2303      	movs	r3, #3
 8004062:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004064:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004066:	2306      	movs	r3, #6
 8004068:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800406a:	f7fc feaf 	bl	8000dcc <HAL_GPIO_Init>
			if (MX_SPI3_Init(&hspi3) != HAL_OK)
 800406e:	4620      	mov	r0, r4
 8004070:	f7ff ffa8 	bl	8003fc4 <MX_SPI3_Init>
 8004074:	2800      	cmp	r0, #0
 8004076:	d0d1      	beq.n	800401c <BSP_SPI3_Init+0x14>
				ret = BSP_ERROR_BUS_FAILURE;
 8004078:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800407c:	e7cf      	b.n	800401e <BSP_SPI3_Init+0x16>
 800407e:	bf00      	nop
 8004080:	20000848 	.word	0x20000848
 8004084:	20000a60 	.word	0x20000a60
 8004088:	40003c00 	.word	0x40003c00
 800408c:	40021000 	.word	0x40021000
 8004090:	48000800 	.word	0x48000800

08004094 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 8004094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tBleStatus ret;
  uint8_t uuid[16];
  
  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);  
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8004098:	494a      	ldr	r1, [pc, #296]	; (80041c4 <Add_HWServW2ST_Service+0x130>)
 800409a:	f06f 035a 	mvn.w	r3, #90	; 0x5a
 800409e:	22b4      	movs	r2, #180	; 0xb4
 80040a0:	70cb      	strb	r3, [r1, #3]
 80040a2:	718a      	strb	r2, [r1, #6]
 80040a4:	2300      	movs	r3, #0
{
 80040a6:	b087      	sub	sp, #28
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 80040a8:	229a      	movs	r2, #154	; 0x9a
 80040aa:	714b      	strb	r3, [r1, #5]
 80040ac:	71ca      	strb	r2, [r1, #7]
 80040ae:	72cb      	strb	r3, [r1, #11]
 80040b0:	730b      	strb	r3, [r1, #12]
 80040b2:	734b      	strb	r3, [r1, #13]
 80040b4:	738b      	strb	r3, [r1, #14]
 80040b6:	73cb      	strb	r3, [r1, #15]
 80040b8:	2502      	movs	r5, #2
 80040ba:	f06f 021e 	mvn.w	r2, #30
 80040be:	2601      	movs	r6, #1
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE, 
 80040c0:	4b41      	ldr	r3, [pc, #260]	; (80041c8 <Add_HWServW2ST_Service+0x134>)
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 80040c2:	720a      	strb	r2, [r1, #8]
 80040c4:	f04f 0a1b 	mov.w	sl, #27
 80040c8:	f04f 09c5 	mov.w	r9, #197	; 0xc5
 80040cc:	f04f 08d5 	mov.w	r8, #213	; 0xd5
 80040d0:	f04f 0b11 	mov.w	fp, #17
 80040d4:	f881 a000 	strb.w	sl, [r1]
 80040d8:	f881 9001 	strb.w	r9, [r1, #1]
 80040dc:	f881 8002 	strb.w	r8, [r1, #2]
 80040e0:	710d      	strb	r5, [r1, #4]
 80040e2:	f881 b009 	strb.w	fp, [r1, #9]
 80040e6:	728e      	strb	r6, [r1, #10]
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE, 
 80040e8:	4632      	mov	r2, r6
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	4628      	mov	r0, r5
 80040ee:	2310      	movs	r3, #16
 80040f0:	f7fe ffbe 	bl	8003070 <aci_gatt_add_serv>
                          1+3*5, &HWServW2STHandle); 
  if (ret != BLE_STATUS_SUCCESS) 
 80040f4:	4603      	mov	r3, r0
 80040f6:	b118      	cbz	r0, 8004100 <Add_HWServW2ST_Service+0x6c>
    return BLE_STATUS_ERROR;    
 80040f8:	2047      	movs	r0, #71	; 0x47
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS) 
    return BLE_STATUS_ERROR;
  
  return BLE_STATUS_SUCCESS;
}
 80040fa:	b007      	add	sp, #28
 80040fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);  
 8004100:	4c32      	ldr	r4, [pc, #200]	; (80041cc <Add_HWServW2ST_Service+0x138>)
 8004102:	f06f 025a 	mvn.w	r2, #90	; 0x5a
 8004106:	70e2      	strb	r2, [r4, #3]
 8004108:	f04f 0236 	mov.w	r2, #54	; 0x36
 800410c:	71a2      	strb	r2, [r4, #6]
 800410e:	f06f 0253 	mvn.w	r2, #83	; 0x53
 8004112:	71e2      	strb	r2, [r4, #7]
 8004114:	f06f 021e 	mvn.w	r2, #30
 8004118:	7222      	strb	r2, [r4, #8]
 800411a:	f04f 0214 	mov.w	r2, #20
 800411e:	73a2      	strb	r2, [r4, #14]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128, 
 8004120:	4a29      	ldr	r2, [pc, #164]	; (80041c8 <Add_HWServW2ST_Service+0x134>)
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);  
 8004122:	7160      	strb	r0, [r4, #5]
 8004124:	72e0      	strb	r0, [r4, #11]
 8004126:	7320      	strb	r0, [r4, #12]
 8004128:	7360      	strb	r0, [r4, #13]
 800412a:	73e0      	strb	r0, [r4, #15]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128, 
 800412c:	8810      	ldrh	r0, [r2, #0]
 800412e:	4a28      	ldr	r2, [pc, #160]	; (80041d0 <Add_HWServW2ST_Service+0x13c>)
 8004130:	9205      	str	r2, [sp, #20]
 8004132:	9304      	str	r3, [sp, #16]
 8004134:	2204      	movs	r2, #4
 8004136:	9301      	str	r3, [sp, #4]
 8004138:	2710      	movs	r7, #16
 800413a:	2312      	movs	r3, #18
 800413c:	9202      	str	r2, [sp, #8]
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	9703      	str	r7, [sp, #12]
 8004142:	2308      	movs	r3, #8
 8004144:	4622      	mov	r2, r4
 8004146:	4629      	mov	r1, r5
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);  
 8004148:	f884 a000 	strb.w	sl, [r4]
 800414c:	f884 9001 	strb.w	r9, [r4, #1]
 8004150:	f884 8002 	strb.w	r8, [r4, #2]
 8004154:	7125      	strb	r5, [r4, #4]
 8004156:	f884 b009 	strb.w	fp, [r4, #9]
 800415a:	72a6      	strb	r6, [r4, #10]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128, 
 800415c:	f7fe ffcb 	bl	80030f6 <aci_gatt_add_char>
  if (ret != BLE_STATUS_SUCCESS) 
 8004160:	4603      	mov	r3, r0
 8004162:	2800      	cmp	r0, #0
 8004164:	d1c8      	bne.n	80040f8 <Add_HWServW2ST_Service+0x64>
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);  
 8004166:	f06f 025a 	mvn.w	r2, #90	; 0x5a
 800416a:	70e2      	strb	r2, [r4, #3]
 800416c:	f04f 0236 	mov.w	r2, #54	; 0x36
 8004170:	71a2      	strb	r2, [r4, #6]
 8004172:	f06f 0253 	mvn.w	r2, #83	; 0x53
 8004176:	71e2      	strb	r2, [r4, #7]
 8004178:	f06f 021e 	mvn.w	r2, #30
 800417c:	7222      	strb	r2, [r4, #8]
 800417e:	22e0      	movs	r2, #224	; 0xe0
 8004180:	73a2      	strb	r2, [r4, #14]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128, 
 8004182:	4a11      	ldr	r2, [pc, #68]	; (80041c8 <Add_HWServW2ST_Service+0x134>)
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);  
 8004184:	7160      	strb	r0, [r4, #5]
 8004186:	72e0      	strb	r0, [r4, #11]
 8004188:	7320      	strb	r0, [r4, #12]
 800418a:	7360      	strb	r0, [r4, #13]
 800418c:	73e0      	strb	r0, [r4, #15]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128, 
 800418e:	8810      	ldrh	r0, [r2, #0]
 8004190:	4a10      	ldr	r2, [pc, #64]	; (80041d4 <Add_HWServW2ST_Service+0x140>)
 8004192:	9205      	str	r2, [sp, #20]
 8004194:	2204      	movs	r2, #4
 8004196:	9304      	str	r3, [sp, #16]
 8004198:	9202      	str	r2, [sp, #8]
 800419a:	9301      	str	r3, [sp, #4]
 800419c:	9703      	str	r7, [sp, #12]
 800419e:	9700      	str	r7, [sp, #0]
 80041a0:	2314      	movs	r3, #20
 80041a2:	4622      	mov	r2, r4
 80041a4:	4629      	mov	r1, r5
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);  
 80041a6:	f884 a000 	strb.w	sl, [r4]
 80041aa:	f884 9001 	strb.w	r9, [r4, #1]
 80041ae:	f884 8002 	strb.w	r8, [r4, #2]
 80041b2:	7125      	strb	r5, [r4, #4]
 80041b4:	f884 b009 	strb.w	fp, [r4, #9]
 80041b8:	72a6      	strb	r6, [r4, #10]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128, 
 80041ba:	f7fe ff9c 	bl	80030f6 <aci_gatt_add_char>
  if (ret != BLE_STATUS_SUCCESS) 
 80041be:	2800      	cmp	r0, #0
 80041c0:	d19a      	bne.n	80040f8 <Add_HWServW2ST_Service+0x64>
 80041c2:	e79a      	b.n	80040fa <Add_HWServW2ST_Service+0x66>
 80041c4:	20000ade 	.word	0x20000ade
 80041c8:	20000ada 	.word	0x20000ada
 80041cc:	20000ac8 	.word	0x20000ac8
 80041d0:	20000ac4 	.word	0x20000ac4
 80041d4:	20000adc 	.word	0x20000adc

080041d8 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 80041d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tBleStatus ret;
  int32_t NumberOfRecords=1;
  uint8_t uuid[16];

  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 80041dc:	492b      	ldr	r1, [pc, #172]	; (800428c <Add_SWServW2ST_Service+0xb4>)
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE, 
 80041de:	4d2c      	ldr	r5, [pc, #176]	; (8004290 <Add_SWServW2ST_Service+0xb8>)
{
 80041e0:	b087      	sub	sp, #28
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 80041e2:	22b4      	movs	r2, #180	; 0xb4
 80041e4:	2300      	movs	r3, #0
 80041e6:	2402      	movs	r4, #2
 80041e8:	718a      	strb	r2, [r1, #6]
 80041ea:	f04f 0b1b 	mov.w	fp, #27
 80041ee:	229a      	movs	r2, #154	; 0x9a
 80041f0:	f04f 0ac5 	mov.w	sl, #197	; 0xc5
 80041f4:	f04f 09d5 	mov.w	r9, #213	; 0xd5
 80041f8:	f04f 08a5 	mov.w	r8, #165	; 0xa5
 80041fc:	27e1      	movs	r7, #225	; 0xe1
 80041fe:	2611      	movs	r6, #17
 8004200:	714b      	strb	r3, [r1, #5]
 8004202:	71ca      	strb	r2, [r1, #7]
 8004204:	72cb      	strb	r3, [r1, #11]
 8004206:	730b      	strb	r3, [r1, #12]
 8004208:	734b      	strb	r3, [r1, #13]
 800420a:	738b      	strb	r3, [r1, #14]
 800420c:	73cb      	strb	r3, [r1, #15]
 800420e:	f881 b000 	strb.w	fp, [r1]
 8004212:	f881 a001 	strb.w	sl, [r1, #1]
 8004216:	f881 9002 	strb.w	r9, [r1, #2]
 800421a:	f881 8003 	strb.w	r8, [r1, #3]
 800421e:	710c      	strb	r4, [r1, #4]
 8004220:	720f      	strb	r7, [r1, #8]
 8004222:	724e      	strb	r6, [r1, #9]
 8004224:	728c      	strb	r4, [r1, #10]
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE, 
 8004226:	2304      	movs	r3, #4
 8004228:	9500      	str	r5, [sp, #0]
 800422a:	2201      	movs	r2, #1
 800422c:	4620      	mov	r0, r4
 800422e:	f7fe ff1f 	bl	8003070 <aci_gatt_add_serv>
                          1+3*NumberOfRecords, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8004232:	4603      	mov	r3, r0
 8004234:	bb28      	cbnz	r0, 8004282 <Add_SWServW2ST_Service+0xaa>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8004236:	4a17      	ldr	r2, [pc, #92]	; (8004294 <Add_SWServW2ST_Service+0xbc>)
 8004238:	2136      	movs	r1, #54	; 0x36
 800423a:	7191      	strb	r1, [r2, #6]
 800423c:	21ac      	movs	r1, #172	; 0xac
 800423e:	71d1      	strb	r1, [r2, #7]
 8004240:	2101      	movs	r1, #1
 8004242:	7291      	strb	r1, [r2, #10]
 8004244:	7351      	strb	r1, [r2, #13]
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128, 
 8004246:	4914      	ldr	r1, [pc, #80]	; (8004298 <Add_SWServW2ST_Service+0xc0>)
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8004248:	7150      	strb	r0, [r2, #5]
 800424a:	72d0      	strb	r0, [r2, #11]
 800424c:	7310      	strb	r0, [r2, #12]
 800424e:	7390      	strb	r0, [r2, #14]
 8004250:	73d0      	strb	r0, [r2, #15]
 8004252:	f882 b000 	strb.w	fp, [r2]
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128, 
 8004256:	8828      	ldrh	r0, [r5, #0]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8004258:	f882 a001 	strb.w	sl, [r2, #1]
 800425c:	f882 9002 	strb.w	r9, [r2, #2]
 8004260:	f882 8003 	strb.w	r8, [r2, #3]
 8004264:	7114      	strb	r4, [r2, #4]
 8004266:	7217      	strb	r7, [r2, #8]
 8004268:	7256      	strb	r6, [r2, #9]
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128, 
 800426a:	2504      	movs	r5, #4
 800426c:	9105      	str	r1, [sp, #20]
 800426e:	2110      	movs	r1, #16
 8004270:	e88d 002a 	stmia.w	sp, {r1, r3, r5}
 8004274:	9304      	str	r3, [sp, #16]
 8004276:	9103      	str	r1, [sp, #12]
 8004278:	2308      	movs	r3, #8
 800427a:	4621      	mov	r1, r4
 800427c:	f7fe ff3b 	bl	80030f6 <aci_gatt_add_char>
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8004280:	b100      	cbz	r0, 8004284 <Add_SWServW2ST_Service+0xac>
  }

  return BLE_STATUS_SUCCESS;

fail:  
  return BLE_STATUS_ERROR;
 8004282:	2047      	movs	r0, #71	; 0x47
}
 8004284:	b007      	add	sp, #28
 8004286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800428a:	bf00      	nop
 800428c:	20000ade 	.word	0x20000ade
 8004290:	20000ad8 	.word	0x20000ad8
 8004294:	20000ac8 	.word	0x20000ac8
 8004298:	20000ac6 	.word	0x20000ac6

0800429c <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{  
 800429c:	b570      	push	{r4, r5, r6, lr}
 800429e:	b088      	sub	sp, #32
 80042a0:	460d      	mov	r5, r1
 80042a2:	4614      	mov	r4, r2
 80042a4:	4606      	mov	r6, r0
  uint8_t buff[2+2*3*3];
  tBleStatus ret;
  
  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 80042a6:	f7fc fc49 	bl	8000b3c <HAL_GetTick>
 80042aa:	08c0      	lsrs	r0, r0, #3
 80042ac:	f88d 000c 	strb.w	r0, [sp, #12]
 80042b0:	f7fc fc44 	bl	8000b3c <HAL_GetTick>
  
  HOST_TO_LE_16(buff+2,-x_axes->AXIS_Y);
 80042b4:	6873      	ldr	r3, [r6, #4]
 80042b6:	425b      	negs	r3, r3
 80042b8:	f88d 300e 	strb.w	r3, [sp, #14]
 80042bc:	121b      	asrs	r3, r3, #8
 80042be:	f88d 300f 	strb.w	r3, [sp, #15]
  HOST_TO_LE_16(buff+4, x_axes->AXIS_X);
 80042c2:	6833      	ldr	r3, [r6, #0]
 80042c4:	f88d 3010 	strb.w	r3, [sp, #16]
 80042c8:	121b      	asrs	r3, r3, #8
 80042ca:	f88d 3011 	strb.w	r3, [sp, #17]
  HOST_TO_LE_16(buff+6,-x_axes->AXIS_Z);
 80042ce:	68b3      	ldr	r3, [r6, #8]
 80042d0:	425b      	negs	r3, r3
 80042d2:	f88d 3012 	strb.w	r3, [sp, #18]
 80042d6:	121b      	asrs	r3, r3, #8
 80042d8:	f88d 3013 	strb.w	r3, [sp, #19]
    
  HOST_TO_LE_16(buff+8,g_axes->AXIS_Y);
 80042dc:	686b      	ldr	r3, [r5, #4]
 80042de:	f88d 3014 	strb.w	r3, [sp, #20]
 80042e2:	121b      	asrs	r3, r3, #8
 80042e4:	f88d 3015 	strb.w	r3, [sp, #21]
  HOST_TO_LE_16(buff+10,g_axes->AXIS_X);
 80042e8:	682b      	ldr	r3, [r5, #0]
 80042ea:	f88d 3016 	strb.w	r3, [sp, #22]
 80042ee:	121b      	asrs	r3, r3, #8
 80042f0:	f88d 3017 	strb.w	r3, [sp, #23]
  HOST_TO_LE_16(buff+12,g_axes->AXIS_Z);
 80042f4:	68ab      	ldr	r3, [r5, #8]
 80042f6:	f88d 3018 	strb.w	r3, [sp, #24]
 80042fa:	121b      	asrs	r3, r3, #8
 80042fc:	f88d 3019 	strb.w	r3, [sp, #25]
  
  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
 8004300:	6863      	ldr	r3, [r4, #4]
 8004302:	f88d 301a 	strb.w	r3, [sp, #26]
 8004306:	121b      	asrs	r3, r3, #8
 8004308:	f88d 301b 	strb.w	r3, [sp, #27]
  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	f88d 301c 	strb.w	r3, [sp, #28]
 8004312:	121b      	asrs	r3, r3, #8
 8004314:	f88d 301d 	strb.w	r3, [sp, #29]
  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
 8004318:	68a3      	ldr	r3, [r4, #8]
 800431a:	f88d 301e 	strb.w	r3, [sp, #30]
 800431e:	121b      	asrs	r3, r3, #8
 8004320:	f88d 301f 	strb.w	r3, [sp, #31]
    
  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 8004324:	4b09      	ldr	r3, [pc, #36]	; (800434c <Acc_Update+0xb0>)
 8004326:	8819      	ldrh	r1, [r3, #0]
 8004328:	4b09      	ldr	r3, [pc, #36]	; (8004350 <Acc_Update+0xb4>)
  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 800432a:	0ac0      	lsrs	r0, r0, #11
 800432c:	f88d 000d 	strb.w	r0, [sp, #13]
  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 8004330:	8818      	ldrh	r0, [r3, #0]
 8004332:	ab03      	add	r3, sp, #12
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	2200      	movs	r2, #0
 8004338:	2314      	movs	r3, #20
 800433a:	f7fe ff3a 	bl	80031b2 <aci_gatt_update_char_value>
    PRINTF("Error while updating Acceleration characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
  }

  return BLE_STATUS_SUCCESS;  
}
 800433e:	2800      	cmp	r0, #0
 8004340:	bf14      	ite	ne
 8004342:	2047      	movne	r0, #71	; 0x47
 8004344:	2000      	moveq	r0, #0
 8004346:	b008      	add	sp, #32
 8004348:	bd70      	pop	{r4, r5, r6, pc}
 800434a:	bf00      	nop
 800434c:	20000adc 	.word	0x20000adc
 8004350:	20000ada 	.word	0x20000ada

08004354 <Quat_Update>:
 * @brief  Update quaternions characteristic value
 * @param  SensorAxes_t *data Structure containing the quaterions
 * @retval tBleStatus      Status
 */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 8004354:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004356:	4604      	mov	r4, r0
  tBleStatus ret;
  uint8_t buff[2+6*SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8004358:	f7fc fbf0 	bl	8000b3c <HAL_GetTick>
 800435c:	08c0      	lsrs	r0, r0, #3
 800435e:	f88d 0008 	strb.w	r0, [sp, #8]
 8004362:	f7fc fbeb 	bl	8000b3c <HAL_GetTick>

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff+2,data[0].AXIS_X);
 8004366:	6823      	ldr	r3, [r4, #0]
 8004368:	f88d 300a 	strb.w	r3, [sp, #10]
 800436c:	121b      	asrs	r3, r3, #8
 800436e:	f88d 300b 	strb.w	r3, [sp, #11]
  HOST_TO_LE_16(buff+4,data[0].AXIS_Y);
 8004372:	6863      	ldr	r3, [r4, #4]
 8004374:	f88d 300c 	strb.w	r3, [sp, #12]
 8004378:	121b      	asrs	r3, r3, #8
 800437a:	f88d 300d 	strb.w	r3, [sp, #13]
  HOST_TO_LE_16(buff+6,data[0].AXIS_Z);
 800437e:	68a3      	ldr	r3, [r4, #8]
 8004380:	f88d 300e 	strb.w	r3, [sp, #14]
 8004384:	121b      	asrs	r3, r3, #8
 8004386:	f88d 300f 	strb.w	r3, [sp, #15]
  HOST_TO_LE_16(buff+18,data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif
  
  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 800438a:	4b09      	ldr	r3, [pc, #36]	; (80043b0 <Quat_Update+0x5c>)
 800438c:	8819      	ldrh	r1, [r3, #0]
 800438e:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <Quat_Update+0x60>)
  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8004390:	0ac0      	lsrs	r0, r0, #11
 8004392:	f88d 0009 	strb.w	r0, [sp, #9]
  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 8004396:	8818      	ldrh	r0, [r3, #0]
 8004398:	ab02      	add	r3, sp, #8
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	2200      	movs	r2, #0
 800439e:	2308      	movs	r3, #8
 80043a0:	f7fe ff07 	bl	80031b2 <aci_gatt_update_char_value>
    PRINTF("Error while updating Sensor Fusion characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
  }
  
  return BLE_STATUS_SUCCESS;
}
 80043a4:	2800      	cmp	r0, #0
 80043a6:	bf14      	ite	ne
 80043a8:	2047      	movne	r0, #71	; 0x47
 80043aa:	2000      	moveq	r0, #0
 80043ac:	b004      	add	sp, #16
 80043ae:	bd10      	pop	{r4, pc}
 80043b0:	20000ac6 	.word	0x20000ac6
 80043b4:	20000ad8 	.word	0x20000ad8

080043b8 <BlueMS_Environmental_Update>:
    }
  }
}

tBleStatus BlueMS_Environmental_Update(int32_t press, int16_t temp)
{  
 80043b8:	b530      	push	{r4, r5, lr}
 80043ba:	b085      	sub	sp, #20
 80043bc:	4604      	mov	r4, r0
 80043be:	460d      	mov	r5, r1
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 80043c0:	f7fc fbbc 	bl	8000b3c <HAL_GetTick>
 80043c4:	08c0      	lsrs	r0, r0, #3
 80043c6:	f88d 0008 	strb.w	r0, [sp, #8]
 80043ca:	f7fc fbb7 	bl	8000b3c <HAL_GetTick>
  
  HOST_TO_LE_32(buff+2,press);
 80043ce:	1223      	asrs	r3, r4, #8
 80043d0:	f88d 300b 	strb.w	r3, [sp, #11]
 80043d4:	1423      	asrs	r3, r4, #16
 80043d6:	f88d 300c 	strb.w	r3, [sp, #12]
  HOST_TO_LE_16(buff+6,temp);
  
  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle, 
 80043da:	4b0e      	ldr	r3, [pc, #56]	; (8004414 <BlueMS_Environmental_Update+0x5c>)
  HOST_TO_LE_32(buff+2,press);
 80043dc:	f88d 400a 	strb.w	r4, [sp, #10]
  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle, 
 80043e0:	8819      	ldrh	r1, [r3, #0]
 80043e2:	4b0d      	ldr	r3, [pc, #52]	; (8004418 <BlueMS_Environmental_Update+0x60>)
  HOST_TO_LE_16(buff+6,temp);
 80043e4:	f88d 500e 	strb.w	r5, [sp, #14]
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 80043e8:	0ac0      	lsrs	r0, r0, #11
 80043ea:	f88d 0009 	strb.w	r0, [sp, #9]
  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle, 
 80043ee:	8818      	ldrh	r0, [r3, #0]
 80043f0:	ab02      	add	r3, sp, #8
 80043f2:	9300      	str	r3, [sp, #0]
  HOST_TO_LE_32(buff+2,press);
 80043f4:	1624      	asrs	r4, r4, #24
  HOST_TO_LE_16(buff+6,temp);
 80043f6:	122d      	asrs	r5, r5, #8
  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle, 
 80043f8:	2308      	movs	r3, #8
 80043fa:	2200      	movs	r2, #0
  HOST_TO_LE_32(buff+2,press);
 80043fc:	f88d 400d 	strb.w	r4, [sp, #13]
  HOST_TO_LE_16(buff+6,temp);
 8004400:	f88d 500f 	strb.w	r5, [sp, #15]
  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle, 
 8004404:	f7fe fed5 	bl	80031b2 <aci_gatt_update_char_value>
    PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
    return BLE_STATUS_ERROR ;
  }
  
  return BLE_STATUS_SUCCESS;	
}
 8004408:	2800      	cmp	r0, #0
 800440a:	bf14      	ite	ne
 800440c:	2047      	movne	r0, #71	; 0x47
 800440e:	2000      	moveq	r0, #0
 8004410:	b005      	add	sp, #20
 8004412:	bd30      	pop	{r4, r5, pc}
 8004414:	20000ac4 	.word	0x20000ac4
 8004418:	20000ada 	.word	0x20000ada

0800441c <Read_Request_CB>:
  if(handle == AccGyroMagCharHandle + 1)
 800441c:	4b2d      	ldr	r3, [pc, #180]	; (80044d4 <Read_Request_CB+0xb8>)
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	3301      	adds	r3, #1
 8004422:	4298      	cmp	r0, r3
{
 8004424:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(handle == AccGyroMagCharHandle + 1)
 8004426:	d10d      	bne.n	8004444 <Read_Request_CB+0x28>
    Acc_Update(&x_axes, &g_axes, &m_axes);
 8004428:	4a2b      	ldr	r2, [pc, #172]	; (80044d8 <Read_Request_CB+0xbc>)
 800442a:	492c      	ldr	r1, [pc, #176]	; (80044dc <Read_Request_CB+0xc0>)
 800442c:	482c      	ldr	r0, [pc, #176]	; (80044e0 <Read_Request_CB+0xc4>)
 800442e:	f7ff ff35 	bl	800429c <Acc_Update>
  if(connection_handle !=0)
 8004432:	4b2c      	ldr	r3, [pc, #176]	; (80044e4 <Read_Request_CB+0xc8>)
 8004434:	8818      	ldrh	r0, [r3, #0]
 8004436:	2800      	cmp	r0, #0
 8004438:	d049      	beq.n	80044ce <Read_Request_CB+0xb2>
}
 800443a:	b003      	add	sp, #12
 800443c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    ret = aci_gatt_allow_read(connection_handle);
 8004440:	f7fe beee 	b.w	8003220 <aci_gatt_allow_read>
  else if (handle == EnvironmentalCharHandle + 1)
 8004444:	4b28      	ldr	r3, [pc, #160]	; (80044e8 <Read_Request_CB+0xcc>)
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	3301      	adds	r3, #1
 800444a:	4298      	cmp	r0, r3
 800444c:	d1f1      	bne.n	8004432 <Read_Request_CB+0x16>
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation        
 800444e:	f000 fe9f 	bl	8005190 <rand>
 8004452:	4604      	mov	r4, r0
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation        
 8004454:	f000 fe9c 	bl	8005190 <rand>
 8004458:	4605      	mov	r5, r0
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation        
 800445a:	2005      	movs	r0, #5
 800445c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004460:	2300      	movs	r3, #0
 8004462:	fb84 0100 	smull	r0, r1, r4, r0
 8004466:	f7fc f8b7 	bl	80005d8 <__aeabi_uldivmod>
 800446a:	f7fc f82f 	bl	80004cc <__aeabi_ul2d>
 800446e:	2200      	movs	r2, #0
 8004470:	4b1e      	ldr	r3, [pc, #120]	; (80044ec <Read_Request_CB+0xd0>)
 8004472:	f7fb feaf 	bl	80001d4 <__adddf3>
 8004476:	f7fc f85f 	bl	8000538 <__aeabi_d2f>
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10)); 
 800447a:	ee07 0a10 	vmov	s14, r0
 800447e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8004482:	ee67 7a27 	vmul.f32	s15, s14, s15
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation        
 8004486:	2064      	movs	r0, #100	; 0x64
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10)); 
 8004488:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation        
 800448c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004490:	2300      	movs	r3, #0
 8004492:	fb85 0100 	smull	r0, r1, r5, r0
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10)); 
 8004496:	edcd 7a01 	vstr	s15, [sp, #4]
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation        
 800449a:	f7fc f89d 	bl	80005d8 <__aeabi_uldivmod>
 800449e:	f7fc f815 	bl	80004cc <__aeabi_ul2d>
 80044a2:	2200      	movs	r2, #0
 80044a4:	4b12      	ldr	r3, [pc, #72]	; (80044f0 <Read_Request_CB+0xd4>)
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10)); 
 80044a6:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation        
 80044aa:	f7fb fe93 	bl	80001d4 <__adddf3>
 80044ae:	f7fc f843 	bl	8000538 <__aeabi_d2f>
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10)); 
 80044b2:	eddf 7a10 	vldr	s15, [pc, #64]	; 80044f4 <Read_Request_CB+0xd8>
 80044b6:	ee07 0a10 	vmov	s14, r0
 80044ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044be:	4621      	mov	r1, r4
 80044c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044c4:	ee17 0a90 	vmov	r0, s15
 80044c8:	f7ff ff76 	bl	80043b8 <BlueMS_Environmental_Update>
 80044cc:	e7b1      	b.n	8004432 <Read_Request_CB+0x16>
}
 80044ce:	b003      	add	sp, #12
 80044d0:	bd30      	pop	{r4, r5, pc}
 80044d2:	bf00      	nop
 80044d4:	20000adc 	.word	0x20000adc
 80044d8:	20000960 	.word	0x20000960
 80044dc:	20000954 	.word	0x20000954
 80044e0:	2000097c 	.word	0x2000097c
 80044e4:	20000950 	.word	0x20000950
 80044e8:	20000ac4 	.word	0x20000ac4
 80044ec:	403b0000 	.word	0x403b0000
 80044f0:	408f4000 	.word	0x408f4000
 80044f4:	42c80000 	.word	0x42c80000

080044f8 <HCI_TL_SPI_Init>:
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044f8:	4b17      	ldr	r3, [pc, #92]	; (8004558 <HCI_TL_SPI_Init+0x60>)
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80044fa:	4818      	ldr	r0, [pc, #96]	; (800455c <HCI_TL_SPI_Init+0x64>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{
 80044fe:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004500:	f042 0201 	orr.w	r2, r2, #1
 8004504:	64da      	str	r2, [r3, #76]	; 0x4c
 8004506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8004508:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8004512:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004514:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8004516:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8004518:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800451a:	4b11      	ldr	r3, [pc, #68]	; (8004560 <HCI_TL_SPI_Init+0x68>)
 800451c:	9302      	str	r3, [sp, #8]
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800451e:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004520:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8004522:	f7fc fc53 	bl	8000dcc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8004526:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800452a:	a901      	add	r1, sp, #4
 800452c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8004530:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004532:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004534:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004536:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8004538:	f7fc fc48 	bl	8000dcc <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800453c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 8004540:	a901      	add	r1, sp, #4
 8004542:	4808      	ldr	r0, [pc, #32]	; (8004564 <HCI_TL_SPI_Init+0x6c>)
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8004544:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004546:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004548:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800454a:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 800454c:	f7fc fc3e 	bl	8000dcc <HAL_GPIO_Init>
    
  return BSP_SPI3_Init();
 8004550:	f7ff fd5a 	bl	8004008 <BSP_SPI3_Init>
}
 8004554:	b007      	add	sp, #28
 8004556:	bd30      	pop	{r4, r5, pc}
 8004558:	40021000 	.word	0x40021000
 800455c:	48001000 	.word	0x48001000
 8004560:	10110000 	.word	0x10110000
 8004564:	48000c00 	.word	0x48000c00

08004568 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8004568:	b508      	push	{r3, lr}
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN); 
 800456a:	2140      	movs	r1, #64	; 0x40
 800456c:	4807      	ldr	r0, [pc, #28]	; (800458c <HCI_TL_SPI_DeInit+0x24>)
 800456e:	f7fc fd09 	bl	8000f84 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN); 
 8004572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004576:	4806      	ldr	r0, [pc, #24]	; (8004590 <HCI_TL_SPI_DeInit+0x28>)
 8004578:	f7fc fd04 	bl	8000f84 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);   
 800457c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004584:	f7fc fcfe 	bl	8000f84 <HAL_GPIO_DeInit>
  return 0;
}
 8004588:	2000      	movs	r0, #0
 800458a:	bd08      	pop	{r3, pc}
 800458c:	48001000 	.word	0x48001000
 8004590:	48000c00 	.word	0x48000c00

08004594 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8004594:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8004596:	2200      	movs	r2, #0
 8004598:	f44f 7180 	mov.w	r1, #256	; 0x100
 800459c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045a0:	f7fc fd80 	bl	80010a4 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80045a4:	2005      	movs	r0, #5
 80045a6:	f7fc facf 	bl	8000b48 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80045aa:	2201      	movs	r2, #1
 80045ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045b4:	f7fc fd76 	bl	80010a4 <HAL_GPIO_WritePin>
  HAL_Delay(5);    
 80045b8:	2005      	movs	r0, #5
 80045ba:	f7fc fac5 	bl	8000b48 <HAL_Delay>
  return 0;
}  
 80045be:	2000      	movs	r0, #0
 80045c0:	bd08      	pop	{r3, pc}
	...

080045c4 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80045c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045c6:	b087      	sub	sp, #28
  uint16_t byte_count;
  uint8_t len = 0;
  uint8_t char_ff = 0xff;
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80045c8:	2400      	movs	r4, #0
  uint8_t char_ff = 0xff;
 80045ca:	23ff      	movs	r3, #255	; 0xff
 80045cc:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80045d0:	4622      	mov	r2, r4
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80045d2:	230b      	movs	r3, #11
{
 80045d4:	4607      	mov	r7, r0
 80045d6:	460e      	mov	r6, r1
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80045d8:	481e      	ldr	r0, [pc, #120]	; (8004654 <HCI_TL_SPI_Receive+0x90>)
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80045da:	f88d 3008 	strb.w	r3, [sp, #8]
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80045de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80045e2:	f88d 4009 	strb.w	r4, [sp, #9]
 80045e6:	f88d 400a 	strb.w	r4, [sp, #10]
 80045ea:	f88d 400b 	strb.w	r4, [sp, #11]
 80045ee:	f88d 400c 	strb.w	r4, [sp, #12]
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80045f2:	f7fc fd57 	bl	80010a4 <HAL_GPIO_WritePin>

  /* Read the header */  
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 80045f6:	2205      	movs	r2, #5
 80045f8:	a904      	add	r1, sp, #16
 80045fa:	a802      	add	r0, sp, #8
 80045fc:	f7ff fccc 	bl	8003f98 <BSP_SPI3_SendRecv>
  	
  if(header_slave[0] == 0x02) 
 8004600:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8004604:	2b02      	cmp	r3, #2
 8004606:	d122      	bne.n	800464e <HCI_TL_SPI_Receive+0x8a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8004608:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800460c:	f89d 3013 	ldrb.w	r3, [sp, #19]
  
    if(byte_count > 0) {
 8004610:	ea53 2505 	orrs.w	r5, r3, r5, lsl #8
 8004614:	d007      	beq.n	8004626 <HCI_TL_SPI_Receive+0x62>
 8004616:	42ae      	cmp	r6, r5
 8004618:	bf28      	it	cs
 800461a:	462e      	movcs	r6, r5
 800461c:	b2e5      	uxtb	r5, r4

      if (byte_count > size){
        byte_count = size;
      }        
  
      for(len = 0; len < byte_count; len++)
 800461e:	42b5      	cmp	r5, r6
 8004620:	f104 0401 	add.w	r4, r4, #1
 8004624:	d308      	bcc.n	8004638 <HCI_TL_SPI_Receive+0x74>
        buffer[len] = read_char;
      }      
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8004626:	2201      	movs	r2, #1
 8004628:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800462c:	4809      	ldr	r0, [pc, #36]	; (8004654 <HCI_TL_SPI_Receive+0x90>)
 800462e:	f7fc fd39 	bl	80010a4 <HAL_GPIO_WritePin>
    PRINT_CSV("\n");
  }
#endif
  
  return len;  
}
 8004632:	4628      	mov	r0, r5
 8004634:	b007      	add	sp, #28
 8004636:	bdf0      	pop	{r4, r5, r6, r7, pc}
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);  
 8004638:	2201      	movs	r2, #1
 800463a:	f10d 0107 	add.w	r1, sp, #7
 800463e:	f10d 0006 	add.w	r0, sp, #6
 8004642:	f7ff fca9 	bl	8003f98 <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 8004646:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800464a:	557b      	strb	r3, [r7, r5]
 800464c:	e7e6      	b.n	800461c <HCI_TL_SPI_Receive+0x58>
  uint8_t len = 0;
 800464e:	4625      	mov	r5, r4
 8004650:	e7e9      	b.n	8004626 <HCI_TL_SPI_Receive+0x62>
 8004652:	bf00      	nop
 8004654:	48000c00 	.word	0x48000c00

08004658 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{  
 8004658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800465c:	b085      	sub	sp, #20
  int32_t result;  
  
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 800465e:	230a      	movs	r3, #10
 8004660:	f88d 3000 	strb.w	r3, [sp]
 8004664:	2300      	movs	r3, #0
{  
 8004666:	4680      	mov	r8, r0
 8004668:	460d      	mov	r5, r1
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 800466a:	f88d 3001 	strb.w	r3, [sp, #1]
 800466e:	f88d 3002 	strb.w	r3, [sp, #2]
 8004672:	f88d 3003 	strb.w	r3, [sp, #3]
 8004676:	f88d 3004 	strb.w	r3, [sp, #4]
  uint8_t header_slave[HEADER_SIZE];
  
  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 800467a:	f7fc fa5f 	bl	8000b3c <HAL_GetTick>
  do
  {
    result = 0;
    
    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800467e:	4e1b      	ldr	r6, [pc, #108]	; (80046ec <HCI_TL_SPI_Send+0x94>)
    if(header_slave[0] == 0x02) 
    {
      /* SPI is ready */
      if(header_slave[1] >= size) 
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 8004680:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80046f0 <HCI_TL_SPI_Send+0x98>
  uint32_t tickstart = HAL_GetTick();
 8004684:	4607      	mov	r7, r0
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8004686:	2200      	movs	r2, #0
 8004688:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800468c:	4630      	mov	r0, r6
 800468e:	f7fc fd09 	bl	80010a4 <HAL_GPIO_WritePin>
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8004692:	2205      	movs	r2, #5
 8004694:	a902      	add	r1, sp, #8
 8004696:	4668      	mov	r0, sp
 8004698:	f7ff fc7e 	bl	8003f98 <BSP_SPI3_SendRecv>
    if(header_slave[0] == 0x02) 
 800469c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d11a      	bne.n	80046da <HCI_TL_SPI_Send+0x82>
      if(header_slave[1] >= size) 
 80046a4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80046a8:	42ab      	cmp	r3, r5
 80046aa:	d319      	bcc.n	80046e0 <HCI_TL_SPI_Send+0x88>
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 80046ac:	462a      	mov	r2, r5
 80046ae:	4649      	mov	r1, r9
 80046b0:	4640      	mov	r0, r8
 80046b2:	f7ff fc71 	bl	8003f98 <BSP_SPI3_SendRecv>
    result = 0;
 80046b6:	2400      	movs	r4, #0
      /* SPI is not ready */
      result = -1;
    }
    
    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80046b8:	2201      	movs	r2, #1
 80046ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80046be:	4630      	mov	r0, r6
 80046c0:	f7fc fcf0 	bl	80010a4 <HAL_GPIO_WritePin>
    
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80046c4:	f7fc fa3a 	bl	8000b3c <HAL_GetTick>
 80046c8:	1bc0      	subs	r0, r0, r7
 80046ca:	280f      	cmp	r0, #15
 80046cc:	d80b      	bhi.n	80046e6 <HCI_TL_SPI_Send+0x8e>
    {
      result = -3;
      break;
    }
  } while(result < 0);
 80046ce:	2c00      	cmp	r4, #0
 80046d0:	d1d9      	bne.n	8004686 <HCI_TL_SPI_Send+0x2e>
  
  return result;
}
 80046d2:	4620      	mov	r0, r4
 80046d4:	b005      	add	sp, #20
 80046d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      result = -1;
 80046da:	f04f 34ff 	mov.w	r4, #4294967295
 80046de:	e7eb      	b.n	80046b8 <HCI_TL_SPI_Send+0x60>
        result = -2;
 80046e0:	f06f 0401 	mvn.w	r4, #1
 80046e4:	e7e8      	b.n	80046b8 <HCI_TL_SPI_Send+0x60>
      result = -3;
 80046e6:	f06f 0402 	mvn.w	r4, #2
  return result;
 80046ea:	e7f2      	b.n	80046d2 <HCI_TL_SPI_Send+0x7a>
 80046ec:	48000c00 	.word	0x48000c00
 80046f0:	2000084c 	.word	0x2000084c

080046f4 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80046f4:	b510      	push	{r4, lr}
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80046f6:	4c06      	ldr	r4, [pc, #24]	; (8004710 <hci_tl_lowlevel_isr+0x1c>)
 80046f8:	2140      	movs	r1, #64	; 0x40
 80046fa:	4620      	mov	r0, r4
 80046fc:	f7fc fccc 	bl	8001098 <HAL_GPIO_ReadPin>
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8004700:	2801      	cmp	r0, #1
 8004702:	d104      	bne.n	800470e <hci_tl_lowlevel_isr+0x1a>
  {        
    if (hci_notify_asynch_evt(NULL))
 8004704:	2000      	movs	r0, #0
 8004706:	f7fe ffe5 	bl	80036d4 <hci_notify_asynch_evt>
 800470a:	2800      	cmp	r0, #0
 800470c:	d0f4      	beq.n	80046f8 <hci_tl_lowlevel_isr+0x4>
 800470e:	bd10      	pop	{r4, pc}
 8004710:	48001000 	.word	0x48001000

08004714 <hci_tl_lowlevel_init>:
{
 8004714:	b510      	push	{r4, lr}
 8004716:	b088      	sub	sp, #32
  fops.Init    = HCI_TL_SPI_Init;
 8004718:	4b11      	ldr	r3, [pc, #68]	; (8004760 <hci_tl_lowlevel_init+0x4c>)
 800471a:	9301      	str	r3, [sp, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800471c:	4b11      	ldr	r3, [pc, #68]	; (8004764 <hci_tl_lowlevel_init+0x50>)
 800471e:	9302      	str	r3, [sp, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8004720:	4b11      	ldr	r3, [pc, #68]	; (8004768 <hci_tl_lowlevel_init+0x54>)
 8004722:	9305      	str	r3, [sp, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8004724:	4b11      	ldr	r3, [pc, #68]	; (800476c <hci_tl_lowlevel_init+0x58>)
 8004726:	9304      	str	r3, [sp, #16]
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 8004728:	4c11      	ldr	r4, [pc, #68]	; (8004770 <hci_tl_lowlevel_init+0x5c>)
  fops.Reset   = HCI_TL_SPI_Reset;
 800472a:	4b12      	ldr	r3, [pc, #72]	; (8004774 <hci_tl_lowlevel_init+0x60>)
 800472c:	9303      	str	r3, [sp, #12]
  hci_register_io_bus (&fops);
 800472e:	a801      	add	r0, sp, #4
  fops.GetTick = BSP_GetTick;
 8004730:	4b11      	ldr	r3, [pc, #68]	; (8004778 <hci_tl_lowlevel_init+0x64>)
 8004732:	9307      	str	r3, [sp, #28]
  hci_register_io_bus (&fops);
 8004734:	f7fe fee0 	bl	80034f8 <hci_register_io_bus>
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 8004738:	4910      	ldr	r1, [pc, #64]	; (800477c <hci_tl_lowlevel_init+0x68>)
 800473a:	4620      	mov	r0, r4
 800473c:	f7fc fb28 	bl	8000d90 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8004740:	4a0f      	ldr	r2, [pc, #60]	; (8004780 <hci_tl_lowlevel_init+0x6c>)
 8004742:	2100      	movs	r1, #0
 8004744:	4620      	mov	r0, r4
 8004746:	f7fc fb1d 	bl	8000d84 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800474a:	2200      	movs	r2, #0
 800474c:	4611      	mov	r1, r2
 800474e:	2017      	movs	r0, #23
 8004750:	f7fc fa20 	bl	8000b94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004754:	2017      	movs	r0, #23
 8004756:	f7fc fa51 	bl	8000bfc <HAL_NVIC_EnableIRQ>
}
 800475a:	b008      	add	sp, #32
 800475c:	bd10      	pop	{r4, pc}
 800475e:	bf00      	nop
 8004760:	080044f9 	.word	0x080044f9
 8004764:	08004569 	.word	0x08004569
 8004768:	08004659 	.word	0x08004659
 800476c:	080045c5 	.word	0x080045c5
 8004770:	20000af0 	.word	0x20000af0
 8004774:	08004595 	.word	0x08004595
 8004778:	08003fc1 	.word	0x08003fc1
 800477c:	16000006 	.word	0x16000006
 8004780:	080046f5 	.word	0x080046f5

08004784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004786:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004788:	2414      	movs	r4, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800478a:	2244      	movs	r2, #68	; 0x44
 800478c:	2100      	movs	r1, #0
 800478e:	a805      	add	r0, sp, #20
 8004790:	f000 fccd 	bl	800512e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004794:	4622      	mov	r2, r4
 8004796:	2100      	movs	r1, #0
 8004798:	4668      	mov	r0, sp
 800479a:	f000 fcc8 	bl	800512e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800479e:	2100      	movs	r1, #0
 80047a0:	2288      	movs	r2, #136	; 0x88
 80047a2:	a816      	add	r0, sp, #88	; 0x58
 80047a4:	f000 fcc3 	bl	800512e <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80047a8:	f7fc fdd0 	bl	800134c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80047ac:	4a22      	ldr	r2, [pc, #136]	; (8004838 <SystemClock_Config+0xb4>)
 80047ae:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80047b2:	f023 0318 	bic.w	r3, r3, #24
 80047b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80047ba:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80047bc:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80047be:	2602      	movs	r6, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80047c0:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80047c2:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80047c4:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
 80047c6:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80047c8:	2707      	movs	r7, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80047ca:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLN = 40;
 80047cc:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80047ce:	9507      	str	r5, [sp, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80047d0:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80047d2:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80047d4:	960f      	str	r6, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80047d6:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80047d8:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80047da:	9713      	str	r7, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80047dc:	9614      	str	r6, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80047de:	9615      	str	r6, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80047e0:	f7fc ff10 	bl	8001604 <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80047e4:	220f      	movs	r2, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80047e6:	2104      	movs	r1, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80047e8:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80047ea:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80047ec:	e88d 000c 	stmia.w	sp, {r2, r3}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80047f0:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80047f2:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80047f4:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80047f6:	f7fd f967 	bl	8001ac8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 80047fa:	4b10      	ldr	r3, [pc, #64]	; (800483c <SystemClock_Config+0xb8>)
 80047fc:	9316      	str	r3, [sp, #88]	; 0x58
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80047fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004802:	9331      	str	r3, [sp, #196]	; 0xc4
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8004804:	2318      	movs	r3, #24
 8004806:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004808:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800480a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800480e:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004810:	9424      	str	r4, [sp, #144]	; 0x90
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004812:	9426      	str	r4, [sp, #152]	; 0x98
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8004814:	942b      	str	r4, [sp, #172]	; 0xac
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8004816:	9436      	str	r4, [sp, #216]	; 0xd8
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8004818:	9517      	str	r5, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800481a:	9518      	str	r5, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800481c:	971a      	str	r7, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800481e:	961b      	str	r6, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004820:	961c      	str	r6, [sp, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004822:	f7fd fb17 	bl	8001e54 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004826:	f44f 7000 	mov.w	r0, #512	; 0x200
 800482a:	f7fc fd9f 	bl	800136c <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800482e:	f7fd fcf9 	bl	8002224 <HAL_RCCEx_EnableMSIPLLMode>
}
 8004832:	b039      	add	sp, #228	; 0xe4
 8004834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004836:	bf00      	nop
 8004838:	40021000 	.word	0x40021000
 800483c:	00012085 	.word	0x00012085

08004840 <main>:
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 8004844:	f7fc f95e 	bl	8000b04 <HAL_Init>
  SystemClock_Config();
 8004848:	f7ff ff9c 	bl	8004784 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800484c:	2214      	movs	r2, #20
 800484e:	2100      	movs	r1, #0
 8004850:	eb0d 0002 	add.w	r0, sp, r2
 8004854:	f000 fc6b 	bl	800512e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004858:	4bb1      	ldr	r3, [pc, #708]	; (8004b20 <main+0x2e0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800485a:	48b2      	ldr	r0, [pc, #712]	; (8004b24 <main+0x2e4>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800485c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800485e:	f8df 82ec 	ldr.w	r8, [pc, #748]	; 8004b4c <main+0x30c>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004862:	f042 0210 	orr.w	r2, r2, #16
 8004866:	64da      	str	r2, [r3, #76]	; 0x4c
 8004868:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800486a:	f002 0210 	and.w	r2, r2, #16
 800486e:	9200      	str	r2, [sp, #0]
 8004870:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004872:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004874:	f042 0204 	orr.w	r2, r2, #4
 8004878:	64da      	str	r2, [r3, #76]	; 0x4c
 800487a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800487c:	f002 0204 	and.w	r2, r2, #4
 8004880:	9201      	str	r2, [sp, #4]
 8004882:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004884:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	64da      	str	r2, [r3, #76]	; 0x4c
 800488c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800488e:	f002 0201 	and.w	r2, r2, #1
 8004892:	9202      	str	r2, [sp, #8]
 8004894:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004896:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004898:	f042 0202 	orr.w	r2, r2, #2
 800489c:	64da      	str	r2, [r3, #76]	; 0x4c
 800489e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048a0:	f002 0202 	and.w	r2, r2, #2
 80048a4:	9203      	str	r2, [sp, #12]
 80048a6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80048a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048aa:	f042 0208 	orr.w	r2, r2, #8
 80048ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80048b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80048b8:	2200      	movs	r2, #0
 80048ba:	f44f 718a 	mov.w	r1, #276	; 0x114
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80048be:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80048c0:	f7fc fbf0 	bl	80010a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80048c4:	2200      	movs	r2, #0
 80048c6:	f248 1104 	movw	r1, #33028	; 0x8104
 80048ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048ce:	f7fc fbe9 	bl	80010a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 80048d2:	2200      	movs	r2, #0
 80048d4:	f24f 0114 	movw	r1, #61460	; 0xf014
 80048d8:	4893      	ldr	r0, [pc, #588]	; (8004b28 <main+0x2e8>)
 80048da:	f7fc fbe3 	bl	80010a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80048de:	2200      	movs	r2, #0
 80048e0:	f241 0181 	movw	r1, #4225	; 0x1081
 80048e4:	4891      	ldr	r0, [pc, #580]	; (8004b2c <main+0x2ec>)
 80048e6:	f7fc fbdd 	bl	80010a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80048ea:	2201      	movs	r2, #1
 80048ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80048f0:	488e      	ldr	r0, [pc, #568]	; (8004b2c <main+0x2ec>)
 80048f2:	f7fc fbd7 	bl	80010a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80048f6:	2200      	movs	r2, #0
 80048f8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80048fc:	488c      	ldr	r0, [pc, #560]	; (8004b30 <main+0x2f0>)
 80048fe:	f7fc fbd1 	bl	80010a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8004902:	2201      	movs	r2, #1
 8004904:	2120      	movs	r1, #32
 8004906:	4888      	ldr	r0, [pc, #544]	; (8004b28 <main+0x2e8>)
 8004908:	f7fc fbcc 	bl	80010a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800490c:	2201      	movs	r2, #1
 800490e:	4611      	mov	r1, r2
 8004910:	4884      	ldr	r0, [pc, #528]	; (8004b24 <main+0x2e4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004912:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8004914:	f7fc fbc6 	bl	80010a4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004918:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800491a:	f240 1315 	movw	r3, #277	; 0x115
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800491e:	a905      	add	r1, sp, #20
 8004920:	4880      	ldr	r0, [pc, #512]	; (8004b24 <main+0x2e4>)
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8004922:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004924:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004926:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004928:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800492a:	f7fc fa4f 	bl	8000dcc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800492e:	236a      	movs	r3, #106	; 0x6a
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004930:	a905      	add	r1, sp, #20
 8004932:	487c      	ldr	r0, [pc, #496]	; (8004b24 <main+0x2e4>)
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8004934:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004936:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800493a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800493c:	f7fc fa46 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8004940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004944:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8004946:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004948:	4b7a      	ldr	r3, [pc, #488]	; (8004b34 <main+0x2f4>)
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800494a:	4879      	ldr	r0, [pc, #484]	; (8004b30 <main+0x2f0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800494c:	9306      	str	r3, [sp, #24]

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin 
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800494e:	f04f 090b 	mov.w	r9, #11
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004952:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8004954:	f7fc fa3a 	bl	8000dcc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 8004958:	233f      	movs	r3, #63	; 0x3f
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800495a:	a905      	add	r1, sp, #20
 800495c:	4874      	ldr	r0, [pc, #464]	; (8004b30 <main+0x2f0>)
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 800495e:	9305      	str	r3, [sp, #20]

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004960:	2702      	movs	r7, #2
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8004962:	2603      	movs	r6, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004964:	f04f 0a08 	mov.w	sl, #8
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004968:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800496c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800496e:	f7fc fa2d 	bl	8000dcc <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004972:	a905      	add	r1, sp, #20
 8004974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8004978:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800497a:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800497c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004980:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004982:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004984:	f7fc fa22 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8004988:	f248 1304 	movw	r3, #33028	; 0x8104
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800498c:	a905      	add	r1, sp, #20
 800498e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8004992:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004994:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004996:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004998:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800499a:	f7fc fa17 	bl	8000dcc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800499e:	a905      	add	r1, sp, #20
 80049a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80049a4:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80049a8:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049aa:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ac:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049ae:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80049b0:	f7fc fa0c 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80049b4:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80049b6:	a905      	add	r1, sp, #20
 80049b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80049bc:	9305      	str	r3, [sp, #20]
  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80049be:	f04f 0a05 	mov.w	sl, #5
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80049c2:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80049c8:	f7fc fa00 	bl	8000dcc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80049cc:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049ce:	a905      	add	r1, sp, #20
 80049d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80049d4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049d6:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049d8:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049da:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80049dc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049e0:	f7fc f9f4 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80049e4:	a905      	add	r1, sp, #20
 80049e6:	4850      	ldr	r0, [pc, #320]	; (8004b28 <main+0x2e8>)
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80049e8:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80049ea:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ee:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80049f0:	f7fc f9ec 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80049f4:	a905      	add	r1, sp, #20
 80049f6:	484c      	ldr	r0, [pc, #304]	; (8004b28 <main+0x2e8>)
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80049f8:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80049fa:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049fe:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8004a00:	f7fc f9e4 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin 
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8004a04:	f24f 0334 	movw	r3, #61492	; 0xf034
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a08:	a905      	add	r1, sp, #20
 8004a0a:	4847      	ldr	r0, [pc, #284]	; (8004b28 <main+0x2e8>)
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8004a0c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a0e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a10:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a12:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a14:	f7fc f9da 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin 
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 8004a18:	f64c 4304 	movw	r3, #52228	; 0xcc04
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a1c:	a905      	add	r1, sp, #20
 8004a1e:	4843      	ldr	r0, [pc, #268]	; (8004b2c <main+0x2ec>)
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 8004a20:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a22:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a26:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a28:	f7fc f9d0 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8004a2c:	f243 0381 	movw	r3, #12417	; 0x3081
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a30:	a905      	add	r1, sp, #20
 8004a32:	483e      	ldr	r0, [pc, #248]	; (8004b2c <main+0x2ec>)
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8004a34:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a36:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a38:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a3a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a3c:	f7fc f9c6 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8004a40:	f44f 7310 	mov.w	r3, #576	; 0x240
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a44:	a905      	add	r1, sp, #20
 8004a46:	483a      	ldr	r0, [pc, #232]	; (8004b30 <main+0x2f0>)
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8004a48:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a4a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a4c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a4e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a50:	f7fc f9bc 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8004a54:	f44f 73c0 	mov.w	r3, #384	; 0x180
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a58:	a905      	add	r1, sp, #20
 8004a5a:	4835      	ldr	r0, [pc, #212]	; (8004b30 <main+0x2f0>)
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8004a5c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a5e:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a62:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a64:	f7fc f9b2 	bl	8000dcc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8004a68:	a905      	add	r1, sp, #20
 8004a6a:	4830      	ldr	r0, [pc, #192]	; (8004b2c <main+0x2ec>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a6c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8004a6e:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a70:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a72:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004a74:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8004a78:	f7fc f9a8 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8004a7c:	2378      	movs	r3, #120	; 0x78
 8004a7e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a80:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004a82:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a84:	4829      	ldr	r0, [pc, #164]	; (8004b2c <main+0x2ec>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a86:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004a88:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a8a:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a8c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a8e:	f7fc f99d 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8004a92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004a96:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a98:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a9a:	2312      	movs	r3, #18
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004a9c:	2604      	movs	r6, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a9e:	a905      	add	r1, sp, #20
 8004aa0:	4821      	ldr	r0, [pc, #132]	; (8004b28 <main+0x2e8>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004aa2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004aa4:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004aa6:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aa8:	f7fc f990 	bl	8000dcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004aac:	4622      	mov	r2, r4
 8004aae:	4621      	mov	r1, r4
 8004ab0:	2017      	movs	r0, #23
 8004ab2:	f7fc f86f 	bl	8000b94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004ab6:	2017      	movs	r0, #23
 8004ab8:	f7fc f8a0 	bl	8000bfc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004abc:	4621      	mov	r1, r4
 8004abe:	4622      	mov	r2, r4
 8004ac0:	2028      	movs	r0, #40	; 0x28
 8004ac2:	f7fc f867 	bl	8000b94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004ac6:	2028      	movs	r0, #40	; 0x28
 8004ac8:	f7fc f898 	bl	8000bfc <HAL_NVIC_EnableIRQ>
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8004acc:	481a      	ldr	r0, [pc, #104]	; (8004b38 <main+0x2f8>)
 8004ace:	4b1b      	ldr	r3, [pc, #108]	; (8004b3c <main+0x2fc>)
 8004ad0:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8004ad2:	6206      	str	r6, [r0, #32]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8004ad4:	f44f 7380 	mov.w	r3, #256	; 0x100
  hi2c2.Instance = I2C2;
 8004ad8:	4e19      	ldr	r6, [pc, #100]	; (8004b40 <main+0x300>)
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8004ada:	7105      	strb	r5, [r0, #4]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8004adc:	6183      	str	r3, [r0, #24]
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8004ade:	6285      	str	r5, [r0, #40]	; 0x28
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8004ae0:	6084      	str	r4, [r0, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8004ae2:	60c7      	str	r7, [r0, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8004ae4:	6104      	str	r4, [r0, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8004ae6:	6144      	str	r4, [r0, #20]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8004ae8:	61c4      	str	r4, [r0, #28]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8004aea:	6244      	str	r4, [r0, #36]	; 0x24
  hdfsdm1_channel1.Init.Offset = 0;
 8004aec:	62c4      	str	r4, [r0, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8004aee:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8004af0:	f7fc f8d4 	bl	8000c9c <HAL_DFSDM_ChannelInit>
  hi2c2.Init.Timing = 0x10909CEC;
 8004af4:	4a13      	ldr	r2, [pc, #76]	; (8004b44 <main+0x304>)
 8004af6:	4b14      	ldr	r3, [pc, #80]	; (8004b48 <main+0x308>)
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004af8:	60f5      	str	r5, [r6, #12]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004afa:	4630      	mov	r0, r6
  hi2c2.Init.Timing = 0x10909CEC;
 8004afc:	e886 000c 	stmia.w	r6, {r2, r3}
  hi2c2.Init.OwnAddress1 = 0;
 8004b00:	60b4      	str	r4, [r6, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b02:	6134      	str	r4, [r6, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004b04:	6174      	str	r4, [r6, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004b06:	61b4      	str	r4, [r6, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b08:	61f4      	str	r4, [r6, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b0a:	6234      	str	r4, [r6, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004b0c:	f7fc fae2 	bl	80010d4 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004b10:	4621      	mov	r1, r4
 8004b12:	4630      	mov	r0, r6
 8004b14:	f7fc fb2f 	bl	8001176 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004b18:	4621      	mov	r1, r4
 8004b1a:	4630      	mov	r0, r6
 8004b1c:	e018      	b.n	8004b50 <main+0x310>
 8004b1e:	bf00      	nop
 8004b20:	40021000 	.word	0x40021000
 8004b24:	48001000 	.word	0x48001000
 8004b28:	48000400 	.word	0x48000400
 8004b2c:	48000c00 	.word	0x48000c00
 8004b30:	48000800 	.word	0x48000800
 8004b34:	10210000 	.word	0x10210000
 8004b38:	20000af8 	.word	0x20000af8
 8004b3c:	40016020 	.word	0x40016020
 8004b40:	20000fb8 	.word	0x20000fb8
 8004b44:	40005800 	.word	0x40005800
 8004b48:	10909cec 	.word	0x10909cec
 8004b4c:	10110000 	.word	0x10110000
 8004b50:	f7fc fb37 	bl	80011c2 <HAL_I2CEx_ConfigDigitalFilter>
  hqspi.Instance = QUADSPI;
 8004b54:	4818      	ldr	r0, [pc, #96]	; (8004bb8 <main+0x378>)
  hqspi.Init.ClockPrescaler = 255;
 8004b56:	4919      	ldr	r1, [pc, #100]	; (8004bbc <main+0x37c>)
  hqspi.Init.FifoThreshold = 1;
 8004b58:	6085      	str	r5, [r0, #8]
  hqspi.Init.ClockPrescaler = 255;
 8004b5a:	23ff      	movs	r3, #255	; 0xff
 8004b5c:	e880 000a 	stmia.w	r0, {r1, r3}
  hqspi.Init.FlashSize = 1;
 8004b60:	6105      	str	r5, [r0, #16]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8004b62:	60c4      	str	r4, [r0, #12]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8004b64:	6144      	str	r4, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8004b66:	6184      	str	r4, [r0, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8004b68:	f7fc fc64 	bl	8001434 <HAL_QSPI_Init>
  huart3.Instance = USART3;
 8004b6c:	4814      	ldr	r0, [pc, #80]	; (8004bc0 <main+0x380>)
  huart3.Init.BaudRate = 115200;
 8004b6e:	4b15      	ldr	r3, [pc, #84]	; (8004bc4 <main+0x384>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004b70:	6084      	str	r4, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8004b72:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
 8004b76:	e880 0028 	stmia.w	r0, {r3, r5}
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004b7a:	230c      	movs	r3, #12
 8004b7c:	6143      	str	r3, [r0, #20]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004b7e:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004b80:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b82:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b84:	61c4      	str	r4, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b86:	6204      	str	r4, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b88:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004b8a:	f7fd ff92 	bl	8002ab2 <HAL_UART_Init>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004b8e:	480e      	ldr	r0, [pc, #56]	; (8004bc8 <main+0x388>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8004b90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004b94:	2606      	movs	r6, #6
 8004b96:	e880 0048 	stmia.w	r0, {r3, r6}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8004b9a:	60c7      	str	r7, [r0, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004b9c:	6187      	str	r7, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004b9e:	61c4      	str	r4, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004ba0:	6204      	str	r4, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004ba2:	6244      	str	r4, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8004ba4:	6284      	str	r4, [r0, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004ba6:	6304      	str	r4, [r0, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8004ba8:	62c4      	str	r4, [r0, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004baa:	f7fc fb2f 	bl	800120c <HAL_PCD_Init>
  MX_BlueNRG_MS_Init();
 8004bae:	f7fe fe23 	bl	80037f8 <MX_BlueNRG_MS_Init>
  MX_BlueNRG_MS_Process();
 8004bb2:	f7fe feab 	bl	800390c <MX_BlueNRG_MS_Process>
 8004bb6:	e7fc      	b.n	8004bb2 <main+0x372>
 8004bb8:	20001004 	.word	0x20001004
 8004bbc:	a0001000 	.word	0xa0001000
 8004bc0:	20000b30 	.word	0x20000b30
 8004bc4:	40004800 	.word	0x40004800
 8004bc8:	20000bb0 	.word	0x20000bb0

08004bcc <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{  
 8004bcc:	b570      	push	{r4, r5, r6, lr}
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME}; 
 8004bce:	4a35      	ldr	r2, [pc, #212]	; (8004ca4 <Set_DeviceConnectable+0xd8>)
{  
 8004bd0:	b092      	sub	sp, #72	; 0x48
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME}; 
 8004bd2:	6810      	ldr	r0, [r2, #0]
 8004bd4:	6851      	ldr	r1, [r2, #4]
    
  uint8_t manuf_data[26] = {
 8004bd6:	220a      	movs	r2, #10
 8004bd8:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
 8004bdc:	2209      	movs	r2, #9
 8004bde:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 8004be2:	2242      	movs	r2, #66	; 0x42
 8004be4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 8004be8:	226c      	movs	r2, #108	; 0x6c
 8004bea:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
 8004bee:	2275      	movs	r2, #117	; 0x75
 8004bf0:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 8004bf4:	2265      	movs	r2, #101	; 0x65
 8004bf6:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8004bfa:	2247      	movs	r2, #71	; 0x47
 8004bfc:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
 8004c00:	224b      	movs	r2, #75	; 0x4b
 8004c02:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8004c06:	2255      	movs	r2, #85	; 0x55
 8004c08:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 8004c0c:	220d      	movs	r2, #13
 8004c0e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME}; 
 8004c12:	ab09      	add	r3, sp, #36	; 0x24
  uint8_t manuf_data[26] = {
 8004c14:	22ff      	movs	r2, #255	; 0xff
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME}; 
 8004c16:	c303      	stmia	r3!, {r0, r1}
  uint8_t manuf_data[26] = {
 8004c18:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 8004c1c:	2302      	movs	r3, #2
    0x02,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[0], /* BLE MAC start */
 8004c1e:	4a22      	ldr	r2, [pc, #136]	; (8004ca8 <Set_DeviceConnectable+0xdc>)
  uint8_t manuf_data[26] = {
 8004c20:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8004c24:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 8004c28:	23f4      	movs	r3, #244	; 0xf4
 8004c2a:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 8004c2e:	7813      	ldrb	r3, [r2, #0]
 8004c30:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8004c34:	7853      	ldrb	r3, [r2, #1]
 8004c36:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
 8004c3a:	7893      	ldrb	r3, [r2, #2]
 8004c3c:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
 8004c40:	2400      	movs	r4, #0
 8004c42:	2501      	movs	r5, #1
 8004c44:	78d3      	ldrb	r3, [r2, #3]
 8004c46:	f88d 402e 	strb.w	r4, [sp, #46]	; 0x2e
 8004c4a:	2608      	movs	r6, #8
 8004c4c:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 8004c50:	f88d 503a 	strb.w	r5, [sp, #58]	; 0x3a
 8004c54:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
 8004c58:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f
 8004c5c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
 8004c60:	7913      	ldrb	r3, [r2, #4]
 8004c62:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    bdaddr[5]  /* BLE MAC stop */
  };
  
  manuf_data[18] |= 0x01; /* Sensor Fusion */
  
  hci_le_set_scan_resp_data(0, NULL);
 8004c66:	4621      	mov	r1, r4
  uint8_t manuf_data[26] = {
 8004c68:	7953      	ldrb	r3, [r2, #5]
 8004c6a:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
  hci_le_set_scan_resp_data(0, NULL);
 8004c6e:	4620      	mov	r0, r4
  manuf_data[18] |= 0x01; /* Sensor Fusion */
 8004c70:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
  hci_le_set_scan_resp_data(0, NULL);
 8004c74:	f7fe fbcf 	bl	8003416 <hci_le_set_scan_resp_data>
  
  PRINTF("Set General Discoverable Mode.\n");
  
  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 8004c78:	ab09      	add	r3, sp, #36	; 0x24
 8004c7a:	9302      	str	r3, [sp, #8]
 8004c7c:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8004c80:	462b      	mov	r3, r5
 8004c82:	9406      	str	r4, [sp, #24]
 8004c84:	9405      	str	r4, [sp, #20]
 8004c86:	9404      	str	r4, [sp, #16]
 8004c88:	9403      	str	r4, [sp, #12]
 8004c8a:	e88d 0050 	stmia.w	sp, {r4, r6}
 8004c8e:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8004c92:	4620      	mov	r0, r4
 8004c94:	f7fe f901 	bl	8002e9a <aci_gap_set_discoverable>
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0); 
  
  aci_gap_update_adv_data(26, manuf_data);
 8004c98:	a90b      	add	r1, sp, #44	; 0x2c
 8004c9a:	201a      	movs	r0, #26
 8004c9c:	f7fe f99a 	bl	8002fd4 <aci_gap_update_adv_data>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 8004ca0:	b012      	add	sp, #72	; 0x48
 8004ca2:	bd70      	pop	{r4, r5, r6, pc}
 8004ca4:	080058a8 	.word	0x080058a8
 8004ca8:	20000a58 	.word	0x20000a58

08004cac <GAP_DisconnectionComplete_CB>:
 * @param  None 
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
  connected = FALSE;
 8004cac:	4a04      	ldr	r2, [pc, #16]	; (8004cc0 <GAP_DisconnectionComplete_CB+0x14>)
 8004cae:	2300      	movs	r3, #0
 8004cb0:	6013      	str	r3, [r2, #0]
  PRINTF("Disconnected\n");
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8004cb2:	4a04      	ldr	r2, [pc, #16]	; (8004cc4 <GAP_DisconnectionComplete_CB+0x18>)
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	7011      	strb	r1, [r2, #0]
  notification_enabled = FALSE;
 8004cb8:	4a03      	ldr	r2, [pc, #12]	; (8004cc8 <GAP_DisconnectionComplete_CB+0x1c>)
 8004cba:	7013      	strb	r3, [r2, #0]
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	2000094c 	.word	0x2000094c
 8004cc4:	20000015 	.word	0x20000015
 8004cc8:	2000096c 	.word	0x2000096c

08004ccc <user_notify>:
  if(hci_pckt->type != HCI_EVENT_PKT)
 8004ccc:	7803      	ldrb	r3, [r0, #0]
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d11c      	bne.n	8004d0c <user_notify+0x40>
  switch(event_pckt->evt){
 8004cd2:	7843      	ldrb	r3, [r0, #1]
 8004cd4:	2b3e      	cmp	r3, #62	; 0x3e
 8004cd6:	d005      	beq.n	8004ce4 <user_notify+0x18>
 8004cd8:	2bff      	cmp	r3, #255	; 0xff
 8004cda:	d00d      	beq.n	8004cf8 <user_notify+0x2c>
 8004cdc:	2b05      	cmp	r3, #5
 8004cde:	d115      	bne.n	8004d0c <user_notify+0x40>
      GAP_DisconnectionComplete_CB();
 8004ce0:	f7ff bfe4 	b.w	8004cac <GAP_DisconnectionComplete_CB>
      switch(evt->subevent){
 8004ce4:	78c3      	ldrb	r3, [r0, #3]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d110      	bne.n	8004d0c <user_notify+0x40>
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{  
  connected = TRUE;
 8004cea:	4909      	ldr	r1, [pc, #36]	; (8004d10 <user_notify+0x44>)
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8004cec:	f8b0 2005 	ldrh.w	r2, [r0, #5]
  connected = TRUE;
 8004cf0:	600b      	str	r3, [r1, #0]
  connection_handle = handle;
 8004cf2:	4b08      	ldr	r3, [pc, #32]	; (8004d14 <user_notify+0x48>)
 8004cf4:	801a      	strh	r2, [r3, #0]
 8004cf6:	4770      	bx	lr
      switch(blue_evt->ecode){
 8004cf8:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 8004cfc:	f640 4314 	movw	r3, #3092	; 0xc14
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d103      	bne.n	8004d0c <user_notify+0x40>
          Read_Request_CB(pr->attr_handle);                    
 8004d04:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 8004d08:	f7ff bb88 	b.w	800441c <Read_Request_CB>
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	2000094c 	.word	0x2000094c
 8004d14:	20000950 	.word	0x20000950

08004d18 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d18:	4b0a      	ldr	r3, [pc, #40]	; (8004d44 <HAL_MspInit+0x2c>)
 8004d1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d1c:	f042 0201 	orr.w	r2, r2, #1
 8004d20:	661a      	str	r2, [r3, #96]	; 0x60
 8004d22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8004d24:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d26:	f002 0201 	and.w	r2, r2, #1
 8004d2a:	9200      	str	r2, [sp, #0]
 8004d2c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d2e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d30:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004d34:	659a      	str	r2, [r3, #88]	; 0x58
 8004d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3c:	9301      	str	r3, [sp, #4]
 8004d3e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d40:	b002      	add	sp, #8
 8004d42:	4770      	bx	lr
 8004d44:	40021000 	.word	0x40021000

08004d48 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8004d48:	b500      	push	{lr}
 8004d4a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d4c:	2214      	movs	r2, #20
 8004d4e:	2100      	movs	r1, #0
 8004d50:	a803      	add	r0, sp, #12
 8004d52:	f000 f9ec 	bl	800512e <memset>
  if(DFSDM1_Init == 0)
 8004d56:	4b13      	ldr	r3, [pc, #76]	; (8004da4 <HAL_DFSDM_ChannelMspInit+0x5c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	bb03      	cbnz	r3, 8004d9e <HAL_DFSDM_ChannelMspInit+0x56>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8004d5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004d60:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d64:	a903      	add	r1, sp, #12
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8004d66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d68:	480f      	ldr	r0, [pc, #60]	; (8004da8 <HAL_DFSDM_ChannelMspInit+0x60>)
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8004d6a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004d6e:	661a      	str	r2, [r3, #96]	; 0x60
 8004d70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d72:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8004d76:	9201      	str	r2, [sp, #4]
 8004d78:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d7c:	f042 0210 	orr.w	r2, r2, #16
 8004d80:	64da      	str	r2, [r3, #76]	; 0x4c
 8004d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d84:	f003 0310 	and.w	r3, r3, #16
 8004d88:	9302      	str	r3, [sp, #8]
 8004d8a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8004d8c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8004d90:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d92:	2302      	movs	r3, #2
 8004d94:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8004d96:	2306      	movs	r3, #6
 8004d98:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d9a:	f7fc f817 	bl	8000dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8004d9e:	b009      	add	sp, #36	; 0x24
 8004da0:	f85d fb04 	ldr.w	pc, [sp], #4
 8004da4:	20000988 	.word	0x20000988
 8004da8:	48001000 	.word	0x48001000

08004dac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004dac:	b510      	push	{r4, lr}
 8004dae:	4604      	mov	r4, r0
 8004db0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004db2:	2214      	movs	r2, #20
 8004db4:	2100      	movs	r1, #0
 8004db6:	a803      	add	r0, sp, #12
 8004db8:	f000 f9b9 	bl	800512e <memset>
  if(hi2c->Instance==I2C2)
 8004dbc:	6822      	ldr	r2, [r4, #0]
 8004dbe:	4b13      	ldr	r3, [pc, #76]	; (8004e0c <HAL_I2C_MspInit+0x60>)
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d121      	bne.n	8004e08 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dc4:	4c12      	ldr	r4, [pc, #72]	; (8004e10 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dc6:	4813      	ldr	r0, [pc, #76]	; (8004e14 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dc8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004dca:	f043 0302 	orr.w	r3, r3, #2
 8004dce:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004dd0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	9301      	str	r3, [sp, #4]
 8004dd8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8004dda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004dde:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004de0:	2312      	movs	r3, #18
 8004de2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004de4:	2301      	movs	r3, #1
 8004de6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004de8:	2303      	movs	r3, #3
 8004dea:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dec:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004dee:	2304      	movs	r3, #4
 8004df0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004df2:	f7fb ffeb 	bl	8000dcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004df6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004df8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004dfc:	65a3      	str	r3, [r4, #88]	; 0x58
 8004dfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e04:	9302      	str	r3, [sp, #8]
 8004e06:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004e08:	b008      	add	sp, #32
 8004e0a:	bd10      	pop	{r4, pc}
 8004e0c:	40005800 	.word	0x40005800
 8004e10:	40021000 	.word	0x40021000
 8004e14:	48000400 	.word	0x48000400

08004e18 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8004e18:	b510      	push	{r4, lr}
 8004e1a:	4604      	mov	r4, r0
 8004e1c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e1e:	2214      	movs	r2, #20
 8004e20:	2100      	movs	r1, #0
 8004e22:	a803      	add	r0, sp, #12
 8004e24:	f000 f983 	bl	800512e <memset>
  if(hqspi->Instance==QUADSPI)
 8004e28:	6822      	ldr	r2, [r4, #0]
 8004e2a:	4b14      	ldr	r3, [pc, #80]	; (8004e7c <HAL_QSPI_MspInit+0x64>)
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d122      	bne.n	8004e76 <HAL_QSPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004e30:	f103 4320 	add.w	r3, r3, #2684354560	; 0xa0000000
 8004e34:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e38:	a903      	add	r1, sp, #12
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004e3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e3c:	4810      	ldr	r0, [pc, #64]	; (8004e80 <HAL_QSPI_MspInit+0x68>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004e3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e42:	651a      	str	r2, [r3, #80]	; 0x50
 8004e44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e46:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8004e4a:	9201      	str	r2, [sp, #4]
 8004e4c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e50:	f042 0210 	orr.w	r2, r2, #16
 8004e54:	64da      	str	r2, [r3, #76]	; 0x4c
 8004e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e58:	f003 0310 	and.w	r3, r3, #16
 8004e5c:	9302      	str	r3, [sp, #8]
 8004e5e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 8004e60:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8004e64:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e66:	2302      	movs	r3, #2
 8004e68:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004e6e:	230a      	movs	r3, #10
 8004e70:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e72:	f7fb ffab 	bl	8000dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8004e76:	b008      	add	sp, #32
 8004e78:	bd10      	pop	{r4, pc}
 8004e7a:	bf00      	nop
 8004e7c:	a0001000 	.word	0xa0001000
 8004e80:	48001000 	.word	0x48001000

08004e84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e84:	b510      	push	{r4, lr}
 8004e86:	4604      	mov	r4, r0
 8004e88:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e8a:	2214      	movs	r2, #20
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	a803      	add	r0, sp, #12
 8004e90:	f000 f94d 	bl	800512e <memset>
  if(huart->Instance==USART3)
 8004e94:	6822      	ldr	r2, [r4, #0]
 8004e96:	4b13      	ldr	r3, [pc, #76]	; (8004ee4 <HAL_UART_MspInit+0x60>)
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d120      	bne.n	8004ede <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004e9c:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ea0:	a903      	add	r1, sp, #12
    __HAL_RCC_USART3_CLK_ENABLE();
 8004ea2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ea4:	4810      	ldr	r0, [pc, #64]	; (8004ee8 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8004ea6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004eaa:	659a      	str	r2, [r3, #88]	; 0x58
 8004eac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004eae:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8004eb2:	9201      	str	r2, [sp, #4]
 8004eb4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004eb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004eb8:	f042 0208 	orr.w	r2, r2, #8
 8004ebc:	64da      	str	r2, [r3, #76]	; 0x4c
 8004ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ec0:	f003 0308 	and.w	r3, r3, #8
 8004ec4:	9302      	str	r3, [sp, #8]
 8004ec6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8004ec8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004ecc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ece:	2302      	movs	r3, #2
 8004ed0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004ed6:	2307      	movs	r3, #7
 8004ed8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004eda:	f7fb ff77 	bl	8000dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004ede:	b008      	add	sp, #32
 8004ee0:	bd10      	pop	{r4, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40004800 	.word	0x40004800
 8004ee8:	48000c00 	.word	0x48000c00

08004eec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004eec:	b510      	push	{r4, lr}
 8004eee:	4604      	mov	r4, r0
 8004ef0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ef2:	2214      	movs	r2, #20
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	a803      	add	r0, sp, #12
 8004ef8:	f000 f919 	bl	800512e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8004efc:	6823      	ldr	r3, [r4, #0]
 8004efe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f02:	d13c      	bne.n	8004f7e <HAL_PCD_MspInit+0x92>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f04:	4c20      	ldr	r4, [pc, #128]	; (8004f88 <HAL_PCD_MspInit+0x9c>)
 8004f06:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004f08:	f043 0301 	orr.w	r3, r3, #1
 8004f0c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004f0e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	9b00      	ldr	r3, [sp, #0]
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004f18:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8004f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004f1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8004f22:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004f24:	f7fb ff52 	bl	8000dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8004f28:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004f2c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f2e:	2302      	movs	r3, #2
 8004f30:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f32:	2300      	movs	r3, #0
 8004f34:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f36:	2303      	movs	r3, #3
 8004f38:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f3a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004f3c:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004f42:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f44:	f7fb ff42 	bl	8000dcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004f48:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004f4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f4e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004f50:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f56:	9301      	str	r3, [sp, #4]
 8004f58:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	d410      	bmi.n	8004f82 <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f66:	65a3      	str	r3, [r4, #88]	; 0x58
 8004f68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f6e:	9302      	str	r3, [sp, #8]
 8004f70:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 8004f72:	f7fc fa31 	bl	80013d8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f7c:	65a3      	str	r3, [r4, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8004f7e:	b008      	add	sp, #32
 8004f80:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 8004f82:	f7fc fa29 	bl	80013d8 <HAL_PWREx_EnableVddUSB>
}
 8004f86:	e7fa      	b.n	8004f7e <HAL_PCD_MspInit+0x92>
 8004f88:	40021000 	.word	0x40021000

08004f8c <NMI_Handler>:
 8004f8c:	4770      	bx	lr

08004f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f8e:	e7fe      	b.n	8004f8e <HardFault_Handler>

08004f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f90:	e7fe      	b.n	8004f90 <MemManage_Handler>

08004f92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f92:	e7fe      	b.n	8004f92 <BusFault_Handler>

08004f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f94:	e7fe      	b.n	8004f94 <UsageFault_Handler>

08004f96 <SVC_Handler>:
 8004f96:	4770      	bx	lr

08004f98 <DebugMon_Handler>:
 8004f98:	4770      	bx	lr

08004f9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f9a:	4770      	bx	lr

08004f9c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f9c:	f7fb bdc2 	b.w	8000b24 <HAL_IncTick>

08004fa0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004fa0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8004fa2:	2020      	movs	r0, #32
 8004fa4:	f7fc f88a 	bl	80010bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 8004fa8:	4805      	ldr	r0, [pc, #20]	; (8004fc0 <EXTI9_5_IRQHandler+0x20>)
 8004faa:	f7fb fef7 	bl	8000d9c <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004fae:	2080      	movs	r0, #128	; 0x80
 8004fb0:	f7fc f884 	bl	80010bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004fb4:	f44f 7080 	mov.w	r0, #256	; 0x100
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004fb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004fbc:	f7fc b87e 	b.w	80010bc <HAL_GPIO_EXTI_IRQHandler>
 8004fc0:	20000af0 	.word	0x20000af0

08004fc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004fc4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004fc6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004fca:	f7fc f877 	bl	80010bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004fce:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004fd2:	f7fc f873 	bl	80010bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8004fd6:	4806      	ldr	r0, [pc, #24]	; (8004ff0 <EXTI15_10_IRQHandler+0x2c>)
 8004fd8:	f7fb fee0 	bl	8000d9c <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004fdc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004fe0:	f7fc f86c 	bl	80010bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004fe4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004fe8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004fec:	f7fc b866 	b.w	80010bc <HAL_GPIO_EXTI_IRQHandler>
 8004ff0:	20000004 	.word	0x20000004

08004ff4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8004ff4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004ff6:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <_sbrk+0x2c>)
 8004ff8:	6819      	ldr	r1, [r3, #0]
{
 8004ffa:	4602      	mov	r2, r0
	if (heap_end == 0)
 8004ffc:	b909      	cbnz	r1, 8005002 <_sbrk+0xe>
		heap_end = &end;
 8004ffe:	4909      	ldr	r1, [pc, #36]	; (8005024 <_sbrk+0x30>)
 8005000:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8005002:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8005004:	4669      	mov	r1, sp
 8005006:	4402      	add	r2, r0
 8005008:	428a      	cmp	r2, r1
 800500a:	d906      	bls.n	800501a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800500c:	f000 f85a 	bl	80050c4 <__errno>
 8005010:	230c      	movs	r3, #12
 8005012:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005014:	f04f 30ff 	mov.w	r0, #4294967295
 8005018:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800501a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800501c:	bd08      	pop	{r3, pc}
 800501e:	bf00      	nop
 8005020:	2000098c 	.word	0x2000098c
 8005024:	20001058 	.word	0x20001058

08005028 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005028:	490f      	ldr	r1, [pc, #60]	; (8005068 <SystemInit+0x40>)
 800502a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800502e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005036:	4b0d      	ldr	r3, [pc, #52]	; (800506c <SystemInit+0x44>)
 8005038:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800503a:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 800503c:	f042 0201 	orr.w	r2, r2, #1
 8005040:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8005042:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800504a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800504e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005050:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005054:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800505c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800505e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005060:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005064:	608b      	str	r3, [r1, #8]
 8005066:	4770      	bx	lr
 8005068:	e000ed00 	.word	0xe000ed00
 800506c:	40021000 	.word	0x40021000

08005070 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80050a8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005074:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005076:	e003      	b.n	8005080 <LoopCopyDataInit>

08005078 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005078:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800507a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800507c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800507e:	3104      	adds	r1, #4

08005080 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005080:	480b      	ldr	r0, [pc, #44]	; (80050b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005082:	4b0c      	ldr	r3, [pc, #48]	; (80050b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005084:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005086:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005088:	d3f6      	bcc.n	8005078 <CopyDataInit>
	ldr	r2, =_sbss
 800508a:	4a0b      	ldr	r2, [pc, #44]	; (80050b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800508c:	e002      	b.n	8005094 <LoopFillZerobss>

0800508e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800508e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005090:	f842 3b04 	str.w	r3, [r2], #4

08005094 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005094:	4b09      	ldr	r3, [pc, #36]	; (80050bc <LoopForever+0x16>)
	cmp	r2, r3
 8005096:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005098:	d3f9      	bcc.n	800508e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800509a:	f7ff ffc5 	bl	8005028 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800509e:	f000 f817 	bl	80050d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80050a2:	f7ff fbcd 	bl	8004840 <main>

080050a6 <LoopForever>:

LoopForever:
    b LoopForever
 80050a6:	e7fe      	b.n	80050a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80050a8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80050ac:	08005924 	.word	0x08005924
	ldr	r0, =_sdata
 80050b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80050b4:	20000520 	.word	0x20000520
	ldr	r2, =_sbss
 80050b8:	20000520 	.word	0x20000520
	ldr	r3, = _ebss
 80050bc:	20001058 	.word	0x20001058

080050c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80050c0:	e7fe      	b.n	80050c0 <ADC1_2_IRQHandler>
	...

080050c4 <__errno>:
 80050c4:	4b01      	ldr	r3, [pc, #4]	; (80050cc <__errno+0x8>)
 80050c6:	6818      	ldr	r0, [r3, #0]
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	2000001c 	.word	0x2000001c

080050d0 <__libc_init_array>:
 80050d0:	b570      	push	{r4, r5, r6, lr}
 80050d2:	4e0d      	ldr	r6, [pc, #52]	; (8005108 <__libc_init_array+0x38>)
 80050d4:	4c0d      	ldr	r4, [pc, #52]	; (800510c <__libc_init_array+0x3c>)
 80050d6:	1ba4      	subs	r4, r4, r6
 80050d8:	10a4      	asrs	r4, r4, #2
 80050da:	2500      	movs	r5, #0
 80050dc:	42a5      	cmp	r5, r4
 80050de:	d109      	bne.n	80050f4 <__libc_init_array+0x24>
 80050e0:	4e0b      	ldr	r6, [pc, #44]	; (8005110 <__libc_init_array+0x40>)
 80050e2:	4c0c      	ldr	r4, [pc, #48]	; (8005114 <__libc_init_array+0x44>)
 80050e4:	f000 fbd4 	bl	8005890 <_init>
 80050e8:	1ba4      	subs	r4, r4, r6
 80050ea:	10a4      	asrs	r4, r4, #2
 80050ec:	2500      	movs	r5, #0
 80050ee:	42a5      	cmp	r5, r4
 80050f0:	d105      	bne.n	80050fe <__libc_init_array+0x2e>
 80050f2:	bd70      	pop	{r4, r5, r6, pc}
 80050f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050f8:	4798      	blx	r3
 80050fa:	3501      	adds	r5, #1
 80050fc:	e7ee      	b.n	80050dc <__libc_init_array+0xc>
 80050fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005102:	4798      	blx	r3
 8005104:	3501      	adds	r5, #1
 8005106:	e7f2      	b.n	80050ee <__libc_init_array+0x1e>
 8005108:	0800591c 	.word	0x0800591c
 800510c:	0800591c 	.word	0x0800591c
 8005110:	0800591c 	.word	0x0800591c
 8005114:	08005920 	.word	0x08005920

08005118 <memcpy>:
 8005118:	b510      	push	{r4, lr}
 800511a:	1e43      	subs	r3, r0, #1
 800511c:	440a      	add	r2, r1
 800511e:	4291      	cmp	r1, r2
 8005120:	d100      	bne.n	8005124 <memcpy+0xc>
 8005122:	bd10      	pop	{r4, pc}
 8005124:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005128:	f803 4f01 	strb.w	r4, [r3, #1]!
 800512c:	e7f7      	b.n	800511e <memcpy+0x6>

0800512e <memset>:
 800512e:	4402      	add	r2, r0
 8005130:	4603      	mov	r3, r0
 8005132:	4293      	cmp	r3, r2
 8005134:	d100      	bne.n	8005138 <memset+0xa>
 8005136:	4770      	bx	lr
 8005138:	f803 1b01 	strb.w	r1, [r3], #1
 800513c:	e7f9      	b.n	8005132 <memset+0x4>
	...

08005140 <srand>:
 8005140:	b538      	push	{r3, r4, r5, lr}
 8005142:	4b12      	ldr	r3, [pc, #72]	; (800518c <srand+0x4c>)
 8005144:	681c      	ldr	r4, [r3, #0]
 8005146:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005148:	4605      	mov	r5, r0
 800514a:	b9d3      	cbnz	r3, 8005182 <srand+0x42>
 800514c:	2018      	movs	r0, #24
 800514e:	f000 f859 	bl	8005204 <malloc>
 8005152:	f243 330e 	movw	r3, #13070	; 0x330e
 8005156:	63a0      	str	r0, [r4, #56]	; 0x38
 8005158:	8003      	strh	r3, [r0, #0]
 800515a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 800515e:	8043      	strh	r3, [r0, #2]
 8005160:	f241 2334 	movw	r3, #4660	; 0x1234
 8005164:	8083      	strh	r3, [r0, #4]
 8005166:	f24e 636d 	movw	r3, #58989	; 0xe66d
 800516a:	80c3      	strh	r3, [r0, #6]
 800516c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8005170:	8103      	strh	r3, [r0, #8]
 8005172:	2305      	movs	r3, #5
 8005174:	8143      	strh	r3, [r0, #10]
 8005176:	230b      	movs	r3, #11
 8005178:	8183      	strh	r3, [r0, #12]
 800517a:	2201      	movs	r2, #1
 800517c:	2300      	movs	r3, #0
 800517e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005182:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005184:	2200      	movs	r2, #0
 8005186:	611d      	str	r5, [r3, #16]
 8005188:	615a      	str	r2, [r3, #20]
 800518a:	bd38      	pop	{r3, r4, r5, pc}
 800518c:	2000001c 	.word	0x2000001c

08005190 <rand>:
 8005190:	4b19      	ldr	r3, [pc, #100]	; (80051f8 <rand+0x68>)
 8005192:	b510      	push	{r4, lr}
 8005194:	681c      	ldr	r4, [r3, #0]
 8005196:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005198:	b9d3      	cbnz	r3, 80051d0 <rand+0x40>
 800519a:	2018      	movs	r0, #24
 800519c:	f000 f832 	bl	8005204 <malloc>
 80051a0:	f243 330e 	movw	r3, #13070	; 0x330e
 80051a4:	63a0      	str	r0, [r4, #56]	; 0x38
 80051a6:	8003      	strh	r3, [r0, #0]
 80051a8:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80051ac:	8043      	strh	r3, [r0, #2]
 80051ae:	f241 2334 	movw	r3, #4660	; 0x1234
 80051b2:	8083      	strh	r3, [r0, #4]
 80051b4:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80051b8:	80c3      	strh	r3, [r0, #6]
 80051ba:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80051be:	8103      	strh	r3, [r0, #8]
 80051c0:	2305      	movs	r3, #5
 80051c2:	8143      	strh	r3, [r0, #10]
 80051c4:	230b      	movs	r3, #11
 80051c6:	8183      	strh	r3, [r0, #12]
 80051c8:	2201      	movs	r2, #1
 80051ca:	2300      	movs	r3, #0
 80051cc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80051d0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80051d2:	480a      	ldr	r0, [pc, #40]	; (80051fc <rand+0x6c>)
 80051d4:	690a      	ldr	r2, [r1, #16]
 80051d6:	694b      	ldr	r3, [r1, #20]
 80051d8:	4c09      	ldr	r4, [pc, #36]	; (8005200 <rand+0x70>)
 80051da:	4350      	muls	r0, r2
 80051dc:	fb04 0003 	mla	r0, r4, r3, r0
 80051e0:	fba2 2304 	umull	r2, r3, r2, r4
 80051e4:	3201      	adds	r2, #1
 80051e6:	4403      	add	r3, r0
 80051e8:	f143 0300 	adc.w	r3, r3, #0
 80051ec:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80051f0:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80051f4:	bd10      	pop	{r4, pc}
 80051f6:	bf00      	nop
 80051f8:	2000001c 	.word	0x2000001c
 80051fc:	5851f42d 	.word	0x5851f42d
 8005200:	4c957f2d 	.word	0x4c957f2d

08005204 <malloc>:
 8005204:	4b02      	ldr	r3, [pc, #8]	; (8005210 <malloc+0xc>)
 8005206:	4601      	mov	r1, r0
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	f000 b803 	b.w	8005214 <_malloc_r>
 800520e:	bf00      	nop
 8005210:	2000001c 	.word	0x2000001c

08005214 <_malloc_r>:
 8005214:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005218:	f101 040b 	add.w	r4, r1, #11
 800521c:	2c16      	cmp	r4, #22
 800521e:	4681      	mov	r9, r0
 8005220:	d907      	bls.n	8005232 <_malloc_r+0x1e>
 8005222:	f034 0407 	bics.w	r4, r4, #7
 8005226:	d505      	bpl.n	8005234 <_malloc_r+0x20>
 8005228:	230c      	movs	r3, #12
 800522a:	f8c9 3000 	str.w	r3, [r9]
 800522e:	2600      	movs	r6, #0
 8005230:	e131      	b.n	8005496 <_malloc_r+0x282>
 8005232:	2410      	movs	r4, #16
 8005234:	428c      	cmp	r4, r1
 8005236:	d3f7      	bcc.n	8005228 <_malloc_r+0x14>
 8005238:	4648      	mov	r0, r9
 800523a:	f000 f9f9 	bl	8005630 <__malloc_lock>
 800523e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8005242:	4d9c      	ldr	r5, [pc, #624]	; (80054b4 <_malloc_r+0x2a0>)
 8005244:	d236      	bcs.n	80052b4 <_malloc_r+0xa0>
 8005246:	f104 0208 	add.w	r2, r4, #8
 800524a:	442a      	add	r2, r5
 800524c:	f1a2 0108 	sub.w	r1, r2, #8
 8005250:	6856      	ldr	r6, [r2, #4]
 8005252:	428e      	cmp	r6, r1
 8005254:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8005258:	d102      	bne.n	8005260 <_malloc_r+0x4c>
 800525a:	68d6      	ldr	r6, [r2, #12]
 800525c:	42b2      	cmp	r2, r6
 800525e:	d010      	beq.n	8005282 <_malloc_r+0x6e>
 8005260:	6873      	ldr	r3, [r6, #4]
 8005262:	68f2      	ldr	r2, [r6, #12]
 8005264:	68b1      	ldr	r1, [r6, #8]
 8005266:	f023 0303 	bic.w	r3, r3, #3
 800526a:	60ca      	str	r2, [r1, #12]
 800526c:	4433      	add	r3, r6
 800526e:	6091      	str	r1, [r2, #8]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	f042 0201 	orr.w	r2, r2, #1
 8005276:	605a      	str	r2, [r3, #4]
 8005278:	4648      	mov	r0, r9
 800527a:	f000 f9df 	bl	800563c <__malloc_unlock>
 800527e:	3608      	adds	r6, #8
 8005280:	e109      	b.n	8005496 <_malloc_r+0x282>
 8005282:	3302      	adds	r3, #2
 8005284:	4a8c      	ldr	r2, [pc, #560]	; (80054b8 <_malloc_r+0x2a4>)
 8005286:	692e      	ldr	r6, [r5, #16]
 8005288:	4296      	cmp	r6, r2
 800528a:	4611      	mov	r1, r2
 800528c:	d06d      	beq.n	800536a <_malloc_r+0x156>
 800528e:	6870      	ldr	r0, [r6, #4]
 8005290:	f020 0003 	bic.w	r0, r0, #3
 8005294:	1b07      	subs	r7, r0, r4
 8005296:	2f0f      	cmp	r7, #15
 8005298:	dd47      	ble.n	800532a <_malloc_r+0x116>
 800529a:	1933      	adds	r3, r6, r4
 800529c:	f044 0401 	orr.w	r4, r4, #1
 80052a0:	6074      	str	r4, [r6, #4]
 80052a2:	616b      	str	r3, [r5, #20]
 80052a4:	612b      	str	r3, [r5, #16]
 80052a6:	60da      	str	r2, [r3, #12]
 80052a8:	609a      	str	r2, [r3, #8]
 80052aa:	f047 0201 	orr.w	r2, r7, #1
 80052ae:	605a      	str	r2, [r3, #4]
 80052b0:	5037      	str	r7, [r6, r0]
 80052b2:	e7e1      	b.n	8005278 <_malloc_r+0x64>
 80052b4:	0a63      	lsrs	r3, r4, #9
 80052b6:	d02a      	beq.n	800530e <_malloc_r+0xfa>
 80052b8:	2b04      	cmp	r3, #4
 80052ba:	d812      	bhi.n	80052e2 <_malloc_r+0xce>
 80052bc:	09a3      	lsrs	r3, r4, #6
 80052be:	3338      	adds	r3, #56	; 0x38
 80052c0:	1c5a      	adds	r2, r3, #1
 80052c2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80052c6:	f1a2 0008 	sub.w	r0, r2, #8
 80052ca:	6856      	ldr	r6, [r2, #4]
 80052cc:	4286      	cmp	r6, r0
 80052ce:	d006      	beq.n	80052de <_malloc_r+0xca>
 80052d0:	6872      	ldr	r2, [r6, #4]
 80052d2:	f022 0203 	bic.w	r2, r2, #3
 80052d6:	1b11      	subs	r1, r2, r4
 80052d8:	290f      	cmp	r1, #15
 80052da:	dd1c      	ble.n	8005316 <_malloc_r+0x102>
 80052dc:	3b01      	subs	r3, #1
 80052de:	3301      	adds	r3, #1
 80052e0:	e7d0      	b.n	8005284 <_malloc_r+0x70>
 80052e2:	2b14      	cmp	r3, #20
 80052e4:	d801      	bhi.n	80052ea <_malloc_r+0xd6>
 80052e6:	335b      	adds	r3, #91	; 0x5b
 80052e8:	e7ea      	b.n	80052c0 <_malloc_r+0xac>
 80052ea:	2b54      	cmp	r3, #84	; 0x54
 80052ec:	d802      	bhi.n	80052f4 <_malloc_r+0xe0>
 80052ee:	0b23      	lsrs	r3, r4, #12
 80052f0:	336e      	adds	r3, #110	; 0x6e
 80052f2:	e7e5      	b.n	80052c0 <_malloc_r+0xac>
 80052f4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80052f8:	d802      	bhi.n	8005300 <_malloc_r+0xec>
 80052fa:	0be3      	lsrs	r3, r4, #15
 80052fc:	3377      	adds	r3, #119	; 0x77
 80052fe:	e7df      	b.n	80052c0 <_malloc_r+0xac>
 8005300:	f240 5254 	movw	r2, #1364	; 0x554
 8005304:	4293      	cmp	r3, r2
 8005306:	d804      	bhi.n	8005312 <_malloc_r+0xfe>
 8005308:	0ca3      	lsrs	r3, r4, #18
 800530a:	337c      	adds	r3, #124	; 0x7c
 800530c:	e7d8      	b.n	80052c0 <_malloc_r+0xac>
 800530e:	233f      	movs	r3, #63	; 0x3f
 8005310:	e7d6      	b.n	80052c0 <_malloc_r+0xac>
 8005312:	237e      	movs	r3, #126	; 0x7e
 8005314:	e7d4      	b.n	80052c0 <_malloc_r+0xac>
 8005316:	2900      	cmp	r1, #0
 8005318:	68f1      	ldr	r1, [r6, #12]
 800531a:	db04      	blt.n	8005326 <_malloc_r+0x112>
 800531c:	68b3      	ldr	r3, [r6, #8]
 800531e:	60d9      	str	r1, [r3, #12]
 8005320:	608b      	str	r3, [r1, #8]
 8005322:	18b3      	adds	r3, r6, r2
 8005324:	e7a4      	b.n	8005270 <_malloc_r+0x5c>
 8005326:	460e      	mov	r6, r1
 8005328:	e7d0      	b.n	80052cc <_malloc_r+0xb8>
 800532a:	2f00      	cmp	r7, #0
 800532c:	616a      	str	r2, [r5, #20]
 800532e:	612a      	str	r2, [r5, #16]
 8005330:	db05      	blt.n	800533e <_malloc_r+0x12a>
 8005332:	4430      	add	r0, r6
 8005334:	6843      	ldr	r3, [r0, #4]
 8005336:	f043 0301 	orr.w	r3, r3, #1
 800533a:	6043      	str	r3, [r0, #4]
 800533c:	e79c      	b.n	8005278 <_malloc_r+0x64>
 800533e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005342:	d244      	bcs.n	80053ce <_malloc_r+0x1ba>
 8005344:	08c0      	lsrs	r0, r0, #3
 8005346:	1087      	asrs	r7, r0, #2
 8005348:	2201      	movs	r2, #1
 800534a:	fa02 f707 	lsl.w	r7, r2, r7
 800534e:	686a      	ldr	r2, [r5, #4]
 8005350:	3001      	adds	r0, #1
 8005352:	433a      	orrs	r2, r7
 8005354:	606a      	str	r2, [r5, #4]
 8005356:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800535a:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 800535e:	60b7      	str	r7, [r6, #8]
 8005360:	3a08      	subs	r2, #8
 8005362:	60f2      	str	r2, [r6, #12]
 8005364:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8005368:	60fe      	str	r6, [r7, #12]
 800536a:	2001      	movs	r0, #1
 800536c:	109a      	asrs	r2, r3, #2
 800536e:	fa00 f202 	lsl.w	r2, r0, r2
 8005372:	6868      	ldr	r0, [r5, #4]
 8005374:	4282      	cmp	r2, r0
 8005376:	f200 80a1 	bhi.w	80054bc <_malloc_r+0x2a8>
 800537a:	4202      	tst	r2, r0
 800537c:	d106      	bne.n	800538c <_malloc_r+0x178>
 800537e:	f023 0303 	bic.w	r3, r3, #3
 8005382:	0052      	lsls	r2, r2, #1
 8005384:	4202      	tst	r2, r0
 8005386:	f103 0304 	add.w	r3, r3, #4
 800538a:	d0fa      	beq.n	8005382 <_malloc_r+0x16e>
 800538c:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8005390:	46e0      	mov	r8, ip
 8005392:	469e      	mov	lr, r3
 8005394:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8005398:	4546      	cmp	r6, r8
 800539a:	d153      	bne.n	8005444 <_malloc_r+0x230>
 800539c:	f10e 0e01 	add.w	lr, lr, #1
 80053a0:	f01e 0f03 	tst.w	lr, #3
 80053a4:	f108 0808 	add.w	r8, r8, #8
 80053a8:	d1f4      	bne.n	8005394 <_malloc_r+0x180>
 80053aa:	0798      	lsls	r0, r3, #30
 80053ac:	d179      	bne.n	80054a2 <_malloc_r+0x28e>
 80053ae:	686b      	ldr	r3, [r5, #4]
 80053b0:	ea23 0302 	bic.w	r3, r3, r2
 80053b4:	606b      	str	r3, [r5, #4]
 80053b6:	6868      	ldr	r0, [r5, #4]
 80053b8:	0052      	lsls	r2, r2, #1
 80053ba:	4282      	cmp	r2, r0
 80053bc:	d87e      	bhi.n	80054bc <_malloc_r+0x2a8>
 80053be:	2a00      	cmp	r2, #0
 80053c0:	d07c      	beq.n	80054bc <_malloc_r+0x2a8>
 80053c2:	4673      	mov	r3, lr
 80053c4:	4202      	tst	r2, r0
 80053c6:	d1e1      	bne.n	800538c <_malloc_r+0x178>
 80053c8:	3304      	adds	r3, #4
 80053ca:	0052      	lsls	r2, r2, #1
 80053cc:	e7fa      	b.n	80053c4 <_malloc_r+0x1b0>
 80053ce:	0a42      	lsrs	r2, r0, #9
 80053d0:	2a04      	cmp	r2, #4
 80053d2:	d815      	bhi.n	8005400 <_malloc_r+0x1ec>
 80053d4:	0982      	lsrs	r2, r0, #6
 80053d6:	3238      	adds	r2, #56	; 0x38
 80053d8:	1c57      	adds	r7, r2, #1
 80053da:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80053de:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80053e2:	45be      	cmp	lr, r7
 80053e4:	d126      	bne.n	8005434 <_malloc_r+0x220>
 80053e6:	2001      	movs	r0, #1
 80053e8:	1092      	asrs	r2, r2, #2
 80053ea:	fa00 f202 	lsl.w	r2, r0, r2
 80053ee:	6868      	ldr	r0, [r5, #4]
 80053f0:	4310      	orrs	r0, r2
 80053f2:	6068      	str	r0, [r5, #4]
 80053f4:	f8c6 e00c 	str.w	lr, [r6, #12]
 80053f8:	60b7      	str	r7, [r6, #8]
 80053fa:	f8ce 6008 	str.w	r6, [lr, #8]
 80053fe:	e7b3      	b.n	8005368 <_malloc_r+0x154>
 8005400:	2a14      	cmp	r2, #20
 8005402:	d801      	bhi.n	8005408 <_malloc_r+0x1f4>
 8005404:	325b      	adds	r2, #91	; 0x5b
 8005406:	e7e7      	b.n	80053d8 <_malloc_r+0x1c4>
 8005408:	2a54      	cmp	r2, #84	; 0x54
 800540a:	d802      	bhi.n	8005412 <_malloc_r+0x1fe>
 800540c:	0b02      	lsrs	r2, r0, #12
 800540e:	326e      	adds	r2, #110	; 0x6e
 8005410:	e7e2      	b.n	80053d8 <_malloc_r+0x1c4>
 8005412:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005416:	d802      	bhi.n	800541e <_malloc_r+0x20a>
 8005418:	0bc2      	lsrs	r2, r0, #15
 800541a:	3277      	adds	r2, #119	; 0x77
 800541c:	e7dc      	b.n	80053d8 <_malloc_r+0x1c4>
 800541e:	f240 5754 	movw	r7, #1364	; 0x554
 8005422:	42ba      	cmp	r2, r7
 8005424:	bf9a      	itte	ls
 8005426:	0c82      	lsrls	r2, r0, #18
 8005428:	327c      	addls	r2, #124	; 0x7c
 800542a:	227e      	movhi	r2, #126	; 0x7e
 800542c:	e7d4      	b.n	80053d8 <_malloc_r+0x1c4>
 800542e:	68bf      	ldr	r7, [r7, #8]
 8005430:	45be      	cmp	lr, r7
 8005432:	d004      	beq.n	800543e <_malloc_r+0x22a>
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	f022 0203 	bic.w	r2, r2, #3
 800543a:	4290      	cmp	r0, r2
 800543c:	d3f7      	bcc.n	800542e <_malloc_r+0x21a>
 800543e:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8005442:	e7d7      	b.n	80053f4 <_malloc_r+0x1e0>
 8005444:	6870      	ldr	r0, [r6, #4]
 8005446:	68f7      	ldr	r7, [r6, #12]
 8005448:	f020 0003 	bic.w	r0, r0, #3
 800544c:	eba0 0a04 	sub.w	sl, r0, r4
 8005450:	f1ba 0f0f 	cmp.w	sl, #15
 8005454:	dd10      	ble.n	8005478 <_malloc_r+0x264>
 8005456:	68b2      	ldr	r2, [r6, #8]
 8005458:	1933      	adds	r3, r6, r4
 800545a:	f044 0401 	orr.w	r4, r4, #1
 800545e:	6074      	str	r4, [r6, #4]
 8005460:	60d7      	str	r7, [r2, #12]
 8005462:	60ba      	str	r2, [r7, #8]
 8005464:	f04a 0201 	orr.w	r2, sl, #1
 8005468:	616b      	str	r3, [r5, #20]
 800546a:	612b      	str	r3, [r5, #16]
 800546c:	60d9      	str	r1, [r3, #12]
 800546e:	6099      	str	r1, [r3, #8]
 8005470:	605a      	str	r2, [r3, #4]
 8005472:	f846 a000 	str.w	sl, [r6, r0]
 8005476:	e6ff      	b.n	8005278 <_malloc_r+0x64>
 8005478:	f1ba 0f00 	cmp.w	sl, #0
 800547c:	db0f      	blt.n	800549e <_malloc_r+0x28a>
 800547e:	4430      	add	r0, r6
 8005480:	6843      	ldr	r3, [r0, #4]
 8005482:	f043 0301 	orr.w	r3, r3, #1
 8005486:	6043      	str	r3, [r0, #4]
 8005488:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800548c:	4648      	mov	r0, r9
 800548e:	60df      	str	r7, [r3, #12]
 8005490:	60bb      	str	r3, [r7, #8]
 8005492:	f000 f8d3 	bl	800563c <__malloc_unlock>
 8005496:	4630      	mov	r0, r6
 8005498:	b003      	add	sp, #12
 800549a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800549e:	463e      	mov	r6, r7
 80054a0:	e77a      	b.n	8005398 <_malloc_r+0x184>
 80054a2:	f85c 0908 	ldr.w	r0, [ip], #-8
 80054a6:	4584      	cmp	ip, r0
 80054a8:	f103 33ff 	add.w	r3, r3, #4294967295
 80054ac:	f43f af7d 	beq.w	80053aa <_malloc_r+0x196>
 80054b0:	e781      	b.n	80053b6 <_malloc_r+0x1a2>
 80054b2:	bf00      	nop
 80054b4:	20000110 	.word	0x20000110
 80054b8:	20000118 	.word	0x20000118
 80054bc:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80054c0:	f8db 6004 	ldr.w	r6, [fp, #4]
 80054c4:	f026 0603 	bic.w	r6, r6, #3
 80054c8:	42b4      	cmp	r4, r6
 80054ca:	d803      	bhi.n	80054d4 <_malloc_r+0x2c0>
 80054cc:	1b33      	subs	r3, r6, r4
 80054ce:	2b0f      	cmp	r3, #15
 80054d0:	f300 8096 	bgt.w	8005600 <_malloc_r+0x3ec>
 80054d4:	4a4f      	ldr	r2, [pc, #316]	; (8005614 <_malloc_r+0x400>)
 80054d6:	6817      	ldr	r7, [r2, #0]
 80054d8:	4a4f      	ldr	r2, [pc, #316]	; (8005618 <_malloc_r+0x404>)
 80054da:	6811      	ldr	r1, [r2, #0]
 80054dc:	3710      	adds	r7, #16
 80054de:	3101      	adds	r1, #1
 80054e0:	eb0b 0306 	add.w	r3, fp, r6
 80054e4:	4427      	add	r7, r4
 80054e6:	d005      	beq.n	80054f4 <_malloc_r+0x2e0>
 80054e8:	494c      	ldr	r1, [pc, #304]	; (800561c <_malloc_r+0x408>)
 80054ea:	3901      	subs	r1, #1
 80054ec:	440f      	add	r7, r1
 80054ee:	3101      	adds	r1, #1
 80054f0:	4249      	negs	r1, r1
 80054f2:	400f      	ands	r7, r1
 80054f4:	4639      	mov	r1, r7
 80054f6:	4648      	mov	r0, r9
 80054f8:	9201      	str	r2, [sp, #4]
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	f000 f8a4 	bl	8005648 <_sbrk_r>
 8005500:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005504:	4680      	mov	r8, r0
 8005506:	d056      	beq.n	80055b6 <_malloc_r+0x3a2>
 8005508:	9b00      	ldr	r3, [sp, #0]
 800550a:	9a01      	ldr	r2, [sp, #4]
 800550c:	4283      	cmp	r3, r0
 800550e:	d901      	bls.n	8005514 <_malloc_r+0x300>
 8005510:	45ab      	cmp	fp, r5
 8005512:	d150      	bne.n	80055b6 <_malloc_r+0x3a2>
 8005514:	4842      	ldr	r0, [pc, #264]	; (8005620 <_malloc_r+0x40c>)
 8005516:	6801      	ldr	r1, [r0, #0]
 8005518:	4543      	cmp	r3, r8
 800551a:	eb07 0e01 	add.w	lr, r7, r1
 800551e:	f8c0 e000 	str.w	lr, [r0]
 8005522:	4940      	ldr	r1, [pc, #256]	; (8005624 <_malloc_r+0x410>)
 8005524:	4682      	mov	sl, r0
 8005526:	d113      	bne.n	8005550 <_malloc_r+0x33c>
 8005528:	420b      	tst	r3, r1
 800552a:	d111      	bne.n	8005550 <_malloc_r+0x33c>
 800552c:	68ab      	ldr	r3, [r5, #8]
 800552e:	443e      	add	r6, r7
 8005530:	f046 0601 	orr.w	r6, r6, #1
 8005534:	605e      	str	r6, [r3, #4]
 8005536:	4a3c      	ldr	r2, [pc, #240]	; (8005628 <_malloc_r+0x414>)
 8005538:	f8da 3000 	ldr.w	r3, [sl]
 800553c:	6811      	ldr	r1, [r2, #0]
 800553e:	428b      	cmp	r3, r1
 8005540:	bf88      	it	hi
 8005542:	6013      	strhi	r3, [r2, #0]
 8005544:	4a39      	ldr	r2, [pc, #228]	; (800562c <_malloc_r+0x418>)
 8005546:	6811      	ldr	r1, [r2, #0]
 8005548:	428b      	cmp	r3, r1
 800554a:	bf88      	it	hi
 800554c:	6013      	strhi	r3, [r2, #0]
 800554e:	e032      	b.n	80055b6 <_malloc_r+0x3a2>
 8005550:	6810      	ldr	r0, [r2, #0]
 8005552:	3001      	adds	r0, #1
 8005554:	bf1b      	ittet	ne
 8005556:	eba8 0303 	subne.w	r3, r8, r3
 800555a:	4473      	addne	r3, lr
 800555c:	f8c2 8000 	streq.w	r8, [r2]
 8005560:	f8ca 3000 	strne.w	r3, [sl]
 8005564:	f018 0007 	ands.w	r0, r8, #7
 8005568:	bf1c      	itt	ne
 800556a:	f1c0 0008 	rsbne	r0, r0, #8
 800556e:	4480      	addne	r8, r0
 8005570:	4b2a      	ldr	r3, [pc, #168]	; (800561c <_malloc_r+0x408>)
 8005572:	4447      	add	r7, r8
 8005574:	4418      	add	r0, r3
 8005576:	400f      	ands	r7, r1
 8005578:	1bc7      	subs	r7, r0, r7
 800557a:	4639      	mov	r1, r7
 800557c:	4648      	mov	r0, r9
 800557e:	f000 f863 	bl	8005648 <_sbrk_r>
 8005582:	1c43      	adds	r3, r0, #1
 8005584:	bf08      	it	eq
 8005586:	4640      	moveq	r0, r8
 8005588:	f8da 3000 	ldr.w	r3, [sl]
 800558c:	f8c5 8008 	str.w	r8, [r5, #8]
 8005590:	bf08      	it	eq
 8005592:	2700      	moveq	r7, #0
 8005594:	eba0 0008 	sub.w	r0, r0, r8
 8005598:	443b      	add	r3, r7
 800559a:	4407      	add	r7, r0
 800559c:	f047 0701 	orr.w	r7, r7, #1
 80055a0:	45ab      	cmp	fp, r5
 80055a2:	f8ca 3000 	str.w	r3, [sl]
 80055a6:	f8c8 7004 	str.w	r7, [r8, #4]
 80055aa:	d0c4      	beq.n	8005536 <_malloc_r+0x322>
 80055ac:	2e0f      	cmp	r6, #15
 80055ae:	d810      	bhi.n	80055d2 <_malloc_r+0x3be>
 80055b0:	2301      	movs	r3, #1
 80055b2:	f8c8 3004 	str.w	r3, [r8, #4]
 80055b6:	68ab      	ldr	r3, [r5, #8]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	f022 0203 	bic.w	r2, r2, #3
 80055be:	4294      	cmp	r4, r2
 80055c0:	eba2 0304 	sub.w	r3, r2, r4
 80055c4:	d801      	bhi.n	80055ca <_malloc_r+0x3b6>
 80055c6:	2b0f      	cmp	r3, #15
 80055c8:	dc1a      	bgt.n	8005600 <_malloc_r+0x3ec>
 80055ca:	4648      	mov	r0, r9
 80055cc:	f000 f836 	bl	800563c <__malloc_unlock>
 80055d0:	e62d      	b.n	800522e <_malloc_r+0x1a>
 80055d2:	f8db 3004 	ldr.w	r3, [fp, #4]
 80055d6:	3e0c      	subs	r6, #12
 80055d8:	f026 0607 	bic.w	r6, r6, #7
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	4333      	orrs	r3, r6
 80055e2:	f8cb 3004 	str.w	r3, [fp, #4]
 80055e6:	eb0b 0306 	add.w	r3, fp, r6
 80055ea:	2205      	movs	r2, #5
 80055ec:	2e0f      	cmp	r6, #15
 80055ee:	605a      	str	r2, [r3, #4]
 80055f0:	609a      	str	r2, [r3, #8]
 80055f2:	d9a0      	bls.n	8005536 <_malloc_r+0x322>
 80055f4:	f10b 0108 	add.w	r1, fp, #8
 80055f8:	4648      	mov	r0, r9
 80055fa:	f000 f88b 	bl	8005714 <_free_r>
 80055fe:	e79a      	b.n	8005536 <_malloc_r+0x322>
 8005600:	68ae      	ldr	r6, [r5, #8]
 8005602:	f044 0201 	orr.w	r2, r4, #1
 8005606:	4434      	add	r4, r6
 8005608:	f043 0301 	orr.w	r3, r3, #1
 800560c:	6072      	str	r2, [r6, #4]
 800560e:	60ac      	str	r4, [r5, #8]
 8005610:	6063      	str	r3, [r4, #4]
 8005612:	e631      	b.n	8005278 <_malloc_r+0x64>
 8005614:	200009c0 	.word	0x200009c0
 8005618:	20000518 	.word	0x20000518
 800561c:	00000080 	.word	0x00000080
 8005620:	20000990 	.word	0x20000990
 8005624:	0000007f 	.word	0x0000007f
 8005628:	200009b8 	.word	0x200009b8
 800562c:	200009bc 	.word	0x200009bc

08005630 <__malloc_lock>:
 8005630:	4801      	ldr	r0, [pc, #4]	; (8005638 <__malloc_lock+0x8>)
 8005632:	f000 b92b 	b.w	800588c <__retarget_lock_acquire_recursive>
 8005636:	bf00      	nop
 8005638:	2000104c 	.word	0x2000104c

0800563c <__malloc_unlock>:
 800563c:	4801      	ldr	r0, [pc, #4]	; (8005644 <__malloc_unlock+0x8>)
 800563e:	f000 b926 	b.w	800588e <__retarget_lock_release_recursive>
 8005642:	bf00      	nop
 8005644:	2000104c 	.word	0x2000104c

08005648 <_sbrk_r>:
 8005648:	b538      	push	{r3, r4, r5, lr}
 800564a:	4c06      	ldr	r4, [pc, #24]	; (8005664 <_sbrk_r+0x1c>)
 800564c:	2300      	movs	r3, #0
 800564e:	4605      	mov	r5, r0
 8005650:	4608      	mov	r0, r1
 8005652:	6023      	str	r3, [r4, #0]
 8005654:	f7ff fcce 	bl	8004ff4 <_sbrk>
 8005658:	1c43      	adds	r3, r0, #1
 800565a:	d102      	bne.n	8005662 <_sbrk_r+0x1a>
 800565c:	6823      	ldr	r3, [r4, #0]
 800565e:	b103      	cbz	r3, 8005662 <_sbrk_r+0x1a>
 8005660:	602b      	str	r3, [r5, #0]
 8005662:	bd38      	pop	{r3, r4, r5, pc}
 8005664:	20001054 	.word	0x20001054

08005668 <_malloc_trim_r>:
 8005668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800566c:	4f25      	ldr	r7, [pc, #148]	; (8005704 <_malloc_trim_r+0x9c>)
 800566e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8005710 <_malloc_trim_r+0xa8>
 8005672:	4689      	mov	r9, r1
 8005674:	4606      	mov	r6, r0
 8005676:	f7ff ffdb 	bl	8005630 <__malloc_lock>
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	685d      	ldr	r5, [r3, #4]
 800567e:	f1a8 0411 	sub.w	r4, r8, #17
 8005682:	f025 0503 	bic.w	r5, r5, #3
 8005686:	eba4 0409 	sub.w	r4, r4, r9
 800568a:	442c      	add	r4, r5
 800568c:	fbb4 f4f8 	udiv	r4, r4, r8
 8005690:	3c01      	subs	r4, #1
 8005692:	fb08 f404 	mul.w	r4, r8, r4
 8005696:	4544      	cmp	r4, r8
 8005698:	da05      	bge.n	80056a6 <_malloc_trim_r+0x3e>
 800569a:	4630      	mov	r0, r6
 800569c:	f7ff ffce 	bl	800563c <__malloc_unlock>
 80056a0:	2000      	movs	r0, #0
 80056a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056a6:	2100      	movs	r1, #0
 80056a8:	4630      	mov	r0, r6
 80056aa:	f7ff ffcd 	bl	8005648 <_sbrk_r>
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	442b      	add	r3, r5
 80056b2:	4298      	cmp	r0, r3
 80056b4:	d1f1      	bne.n	800569a <_malloc_trim_r+0x32>
 80056b6:	4261      	negs	r1, r4
 80056b8:	4630      	mov	r0, r6
 80056ba:	f7ff ffc5 	bl	8005648 <_sbrk_r>
 80056be:	3001      	adds	r0, #1
 80056c0:	d110      	bne.n	80056e4 <_malloc_trim_r+0x7c>
 80056c2:	2100      	movs	r1, #0
 80056c4:	4630      	mov	r0, r6
 80056c6:	f7ff ffbf 	bl	8005648 <_sbrk_r>
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	1a83      	subs	r3, r0, r2
 80056ce:	2b0f      	cmp	r3, #15
 80056d0:	dde3      	ble.n	800569a <_malloc_trim_r+0x32>
 80056d2:	490d      	ldr	r1, [pc, #52]	; (8005708 <_malloc_trim_r+0xa0>)
 80056d4:	6809      	ldr	r1, [r1, #0]
 80056d6:	1a40      	subs	r0, r0, r1
 80056d8:	490c      	ldr	r1, [pc, #48]	; (800570c <_malloc_trim_r+0xa4>)
 80056da:	f043 0301 	orr.w	r3, r3, #1
 80056de:	6008      	str	r0, [r1, #0]
 80056e0:	6053      	str	r3, [r2, #4]
 80056e2:	e7da      	b.n	800569a <_malloc_trim_r+0x32>
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	4a09      	ldr	r2, [pc, #36]	; (800570c <_malloc_trim_r+0xa4>)
 80056e8:	1b2d      	subs	r5, r5, r4
 80056ea:	f045 0501 	orr.w	r5, r5, #1
 80056ee:	605d      	str	r5, [r3, #4]
 80056f0:	6813      	ldr	r3, [r2, #0]
 80056f2:	4630      	mov	r0, r6
 80056f4:	1b1c      	subs	r4, r3, r4
 80056f6:	6014      	str	r4, [r2, #0]
 80056f8:	f7ff ffa0 	bl	800563c <__malloc_unlock>
 80056fc:	2001      	movs	r0, #1
 80056fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005702:	bf00      	nop
 8005704:	20000110 	.word	0x20000110
 8005708:	20000518 	.word	0x20000518
 800570c:	20000990 	.word	0x20000990
 8005710:	00000080 	.word	0x00000080

08005714 <_free_r>:
 8005714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005718:	4604      	mov	r4, r0
 800571a:	4688      	mov	r8, r1
 800571c:	2900      	cmp	r1, #0
 800571e:	f000 80ab 	beq.w	8005878 <_free_r+0x164>
 8005722:	f7ff ff85 	bl	8005630 <__malloc_lock>
 8005726:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800572a:	4d54      	ldr	r5, [pc, #336]	; (800587c <_free_r+0x168>)
 800572c:	f022 0001 	bic.w	r0, r2, #1
 8005730:	f1a8 0308 	sub.w	r3, r8, #8
 8005734:	181f      	adds	r7, r3, r0
 8005736:	68a9      	ldr	r1, [r5, #8]
 8005738:	687e      	ldr	r6, [r7, #4]
 800573a:	428f      	cmp	r7, r1
 800573c:	f026 0603 	bic.w	r6, r6, #3
 8005740:	f002 0201 	and.w	r2, r2, #1
 8005744:	d11b      	bne.n	800577e <_free_r+0x6a>
 8005746:	4430      	add	r0, r6
 8005748:	b93a      	cbnz	r2, 800575a <_free_r+0x46>
 800574a:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800574e:	1a9b      	subs	r3, r3, r2
 8005750:	4410      	add	r0, r2
 8005752:	6899      	ldr	r1, [r3, #8]
 8005754:	68da      	ldr	r2, [r3, #12]
 8005756:	60ca      	str	r2, [r1, #12]
 8005758:	6091      	str	r1, [r2, #8]
 800575a:	f040 0201 	orr.w	r2, r0, #1
 800575e:	605a      	str	r2, [r3, #4]
 8005760:	60ab      	str	r3, [r5, #8]
 8005762:	4b47      	ldr	r3, [pc, #284]	; (8005880 <_free_r+0x16c>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4298      	cmp	r0, r3
 8005768:	d304      	bcc.n	8005774 <_free_r+0x60>
 800576a:	4b46      	ldr	r3, [pc, #280]	; (8005884 <_free_r+0x170>)
 800576c:	4620      	mov	r0, r4
 800576e:	6819      	ldr	r1, [r3, #0]
 8005770:	f7ff ff7a 	bl	8005668 <_malloc_trim_r>
 8005774:	4620      	mov	r0, r4
 8005776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800577a:	f7ff bf5f 	b.w	800563c <__malloc_unlock>
 800577e:	607e      	str	r6, [r7, #4]
 8005780:	2a00      	cmp	r2, #0
 8005782:	d139      	bne.n	80057f8 <_free_r+0xe4>
 8005784:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8005788:	1a5b      	subs	r3, r3, r1
 800578a:	4408      	add	r0, r1
 800578c:	6899      	ldr	r1, [r3, #8]
 800578e:	f105 0e08 	add.w	lr, r5, #8
 8005792:	4571      	cmp	r1, lr
 8005794:	d032      	beq.n	80057fc <_free_r+0xe8>
 8005796:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800579a:	f8c1 e00c 	str.w	lr, [r1, #12]
 800579e:	f8ce 1008 	str.w	r1, [lr, #8]
 80057a2:	19b9      	adds	r1, r7, r6
 80057a4:	6849      	ldr	r1, [r1, #4]
 80057a6:	07c9      	lsls	r1, r1, #31
 80057a8:	d40a      	bmi.n	80057c0 <_free_r+0xac>
 80057aa:	4430      	add	r0, r6
 80057ac:	68b9      	ldr	r1, [r7, #8]
 80057ae:	bb3a      	cbnz	r2, 8005800 <_free_r+0xec>
 80057b0:	4e35      	ldr	r6, [pc, #212]	; (8005888 <_free_r+0x174>)
 80057b2:	42b1      	cmp	r1, r6
 80057b4:	d124      	bne.n	8005800 <_free_r+0xec>
 80057b6:	616b      	str	r3, [r5, #20]
 80057b8:	612b      	str	r3, [r5, #16]
 80057ba:	2201      	movs	r2, #1
 80057bc:	60d9      	str	r1, [r3, #12]
 80057be:	6099      	str	r1, [r3, #8]
 80057c0:	f040 0101 	orr.w	r1, r0, #1
 80057c4:	6059      	str	r1, [r3, #4]
 80057c6:	5018      	str	r0, [r3, r0]
 80057c8:	2a00      	cmp	r2, #0
 80057ca:	d1d3      	bne.n	8005774 <_free_r+0x60>
 80057cc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80057d0:	d21a      	bcs.n	8005808 <_free_r+0xf4>
 80057d2:	08c0      	lsrs	r0, r0, #3
 80057d4:	1081      	asrs	r1, r0, #2
 80057d6:	2201      	movs	r2, #1
 80057d8:	408a      	lsls	r2, r1
 80057da:	6869      	ldr	r1, [r5, #4]
 80057dc:	3001      	adds	r0, #1
 80057de:	430a      	orrs	r2, r1
 80057e0:	606a      	str	r2, [r5, #4]
 80057e2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80057e6:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 80057ea:	6099      	str	r1, [r3, #8]
 80057ec:	3a08      	subs	r2, #8
 80057ee:	60da      	str	r2, [r3, #12]
 80057f0:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 80057f4:	60cb      	str	r3, [r1, #12]
 80057f6:	e7bd      	b.n	8005774 <_free_r+0x60>
 80057f8:	2200      	movs	r2, #0
 80057fa:	e7d2      	b.n	80057a2 <_free_r+0x8e>
 80057fc:	2201      	movs	r2, #1
 80057fe:	e7d0      	b.n	80057a2 <_free_r+0x8e>
 8005800:	68fe      	ldr	r6, [r7, #12]
 8005802:	60ce      	str	r6, [r1, #12]
 8005804:	60b1      	str	r1, [r6, #8]
 8005806:	e7db      	b.n	80057c0 <_free_r+0xac>
 8005808:	0a42      	lsrs	r2, r0, #9
 800580a:	2a04      	cmp	r2, #4
 800580c:	d813      	bhi.n	8005836 <_free_r+0x122>
 800580e:	0982      	lsrs	r2, r0, #6
 8005810:	3238      	adds	r2, #56	; 0x38
 8005812:	1c51      	adds	r1, r2, #1
 8005814:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8005818:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800581c:	428e      	cmp	r6, r1
 800581e:	d124      	bne.n	800586a <_free_r+0x156>
 8005820:	2001      	movs	r0, #1
 8005822:	1092      	asrs	r2, r2, #2
 8005824:	fa00 f202 	lsl.w	r2, r0, r2
 8005828:	6868      	ldr	r0, [r5, #4]
 800582a:	4302      	orrs	r2, r0
 800582c:	606a      	str	r2, [r5, #4]
 800582e:	60de      	str	r6, [r3, #12]
 8005830:	6099      	str	r1, [r3, #8]
 8005832:	60b3      	str	r3, [r6, #8]
 8005834:	e7de      	b.n	80057f4 <_free_r+0xe0>
 8005836:	2a14      	cmp	r2, #20
 8005838:	d801      	bhi.n	800583e <_free_r+0x12a>
 800583a:	325b      	adds	r2, #91	; 0x5b
 800583c:	e7e9      	b.n	8005812 <_free_r+0xfe>
 800583e:	2a54      	cmp	r2, #84	; 0x54
 8005840:	d802      	bhi.n	8005848 <_free_r+0x134>
 8005842:	0b02      	lsrs	r2, r0, #12
 8005844:	326e      	adds	r2, #110	; 0x6e
 8005846:	e7e4      	b.n	8005812 <_free_r+0xfe>
 8005848:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800584c:	d802      	bhi.n	8005854 <_free_r+0x140>
 800584e:	0bc2      	lsrs	r2, r0, #15
 8005850:	3277      	adds	r2, #119	; 0x77
 8005852:	e7de      	b.n	8005812 <_free_r+0xfe>
 8005854:	f240 5154 	movw	r1, #1364	; 0x554
 8005858:	428a      	cmp	r2, r1
 800585a:	bf9a      	itte	ls
 800585c:	0c82      	lsrls	r2, r0, #18
 800585e:	327c      	addls	r2, #124	; 0x7c
 8005860:	227e      	movhi	r2, #126	; 0x7e
 8005862:	e7d6      	b.n	8005812 <_free_r+0xfe>
 8005864:	6889      	ldr	r1, [r1, #8]
 8005866:	428e      	cmp	r6, r1
 8005868:	d004      	beq.n	8005874 <_free_r+0x160>
 800586a:	684a      	ldr	r2, [r1, #4]
 800586c:	f022 0203 	bic.w	r2, r2, #3
 8005870:	4290      	cmp	r0, r2
 8005872:	d3f7      	bcc.n	8005864 <_free_r+0x150>
 8005874:	68ce      	ldr	r6, [r1, #12]
 8005876:	e7da      	b.n	800582e <_free_r+0x11a>
 8005878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800587c:	20000110 	.word	0x20000110
 8005880:	2000051c 	.word	0x2000051c
 8005884:	200009c0 	.word	0x200009c0
 8005888:	20000118 	.word	0x20000118

0800588c <__retarget_lock_acquire_recursive>:
 800588c:	4770      	bx	lr

0800588e <__retarget_lock_release_recursive>:
 800588e:	4770      	bx	lr

08005890 <_init>:
 8005890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005892:	bf00      	nop
 8005894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005896:	bc08      	pop	{r3}
 8005898:	469e      	mov	lr, r3
 800589a:	4770      	bx	lr

0800589c <_fini>:
 800589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589e:	bf00      	nop
 80058a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058a2:	bc08      	pop	{r3}
 80058a4:	469e      	mov	lr, r3
 80058a6:	4770      	bx	lr
